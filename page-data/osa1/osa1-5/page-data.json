{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa1/osa1-5",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Toisto\",\n  \"nav_order\": 5,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Nyt osaamme tehd\\xE4 yksinkertaisia komentoja, yksi kerrallaan. Mutta mit\\xE4 jos haluamme tehd\\xE4 jotain monta kertaa?\"), mdx(\"p\", null, \"Esimerkiksi, tehd\\xE4\\xE4n ohjelma, joka kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 numeron 7 kertaa ja laskee ne yhteen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int sum = 0;\\nConsole.Write(\\\"Give integer value: \\\");\\nint userInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + intValue);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 saa teht\\xE4v\\xE4n hoidettua, mutta kuten huomaat, siin\\xE4 on paljon toistoa ja monta rivi\\xE4 koodia n\\xE4in yksinkertaiseen teht\\xE4v\\xE4\\xE4n. Ent\\xE4 jos haluaisimme pyyt\\xE4\\xE4 k\\xE4ytt\\xE4j\\xE4lt\\xE4 10 numeroa? Tai 1000? Voisimme toistaa samat rivit, mutta se olisi melko hullua.\"), mdx(\"p\", null, \"Helpompi ja siistimpi tapa ratkaista t\\xE4m\\xE4 ongelma on k\\xE4ytt\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"silmukoita\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"loops\"), \"), erityisesti \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"while-silmukkaa\"), \", johon tutustuimme hieman aiemmissa osissa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int sum = 0;\\nint readNumbers = 0;\\n\\nwhile (true) \\n{\\n    if (readNumbers == 7) {\\n        break;\\n    }\\n\\n    Console.WriteLine(\\\"Give a number\\\");\\n    sum = sum + Convert.ToInt32(Console.ReadLine());\\n    readNumbers = readNumbers + 1;\\n}\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\")), mdx(\"p\", null, \"Tutkitaan while-silmukkaa hieman tarkemmin.\"), mdx(\"h2\", {\n    \"id\": \"while-silmukka\"\n  }, \"While-silmukka\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (lauseke)\\n{\\n    // Your code is here\\n    // Here can be any amount of code\\n}\\n\")), mdx(\"p\", null, \"Toistaiseksi k\\xE4yt\\xE4mme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"true\"), \" -arvoa totuusarvona. T\\xE4m\\xE4 voi johtaa loputtomaan silmukkaan. Kun koodilohko on suoritettu, tarkistetaan lausekkeen arvo. Koska se on aina tosi, koodi suoritetaan aina uudelleen.\"), mdx(\"h2\", {\n    \"id\": \"while-silmukan-lopettaminen\"\n  }, \"While-silmukan lopettaminen\"), mdx(\"p\", null, \"Onnistuimme luomaan ohjelman edellisess\\xE4 esimerkiss\\xE4, joka ei toimi ikuisesti. Teimme sen avainsanalla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"break\"), \". Kuten nimi viittaa, se keskeytt\\xE4\\xE4 silmukan. Teknisesti ottaen se est\\xE4\\xE4 nykyisen koodilohkon suorituksen ja hypp\\xE4\\xE4 eteenp\\xE4in seuraavaan koodilohkoon.\"), mdx(\"p\", null, \"Yleens\\xE4 break-komentoa k\\xE4ytet\\xE4\\xE4n, kun k\\xE4ytt\\xE4j\\xE4 antaa tietyn tyyppisen sy\\xF6tteen tai kun silmukkalaskenta on saavuttanut tietyn kohdan, juuri kuten esimerkiss\\xE4mme yll\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 1;\\n\\nwhile (true) \\n{\\n    Console.WriteLine(number);\\n    if (number >= 5) {\\n        break;\\n    }\\n    number = number + 1;\\n}\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n3\\n4\\n5\\nAll done!\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Loimme alkuper\\xE4isen numeromme silmukan ulkopuolella. Jos loisimme sen silmukan alussa, se luotaisiin uudelleen joka kerta, kun silmukka alkaa uudelleen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    int number = 1;\\n    Console.WriteLine(number);\\n    if (number >= 5) {\\n        break;\\n    }\\n    number = number + 1;\\n}\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n1\\n1\\n1\\n1\\n... \\n(This keeps going forever)\\n\")), mdx(\"p\", null, \"Voit my\\xF6s pyyt\\xE4\\xE4 k\\xE4ytt\\xE4j\\xE4n sy\\xF6tett\\xE4 while-silmukassa. Seuraavassa esimerkiss\\xE4 kysymme k\\xE4ytt\\xE4j\\xE4lt\\xE4, haluavatko he jatkaa ohjelman suorittamista.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Do you want to continue?\\\");\\n    string input = Console.ReadLine();\\n    if (input == \\\"no\\\") \\n    {\\n        break;\\n    }\\n    Console.WriteLine(\\\"Let's keep going!\\\");\\n}\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Do you want to continue?\\n> yes\\nLet's keep going!\\nDo you want to continue?\\n> totally\\nLet's keep going!\\nDo you want to continue?\\n> no\\nAll done!\\n\")), mdx(\"p\", null, \"Edellisess\\xE4 esimerkiss\\xE4 pyysimme k\\xE4ytt\\xE4j\\xE4lt\\xE4 merkkijonosy\\xF6tett\\xE4. Tietenkin muut muuttujatyypit toimivat yht\\xE4 hyvin.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Input an integer, 0 quits\\\");\\n    int command = Convert.ToInt32(Console.ReadLine());\\n    if (command == 0) \\n    {\\n        break;\\n    }\\n\\n    Console.WriteLine(\\\"You gave \\\" + command);\\n}\\n\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Input an integer, 0 quits\\n> 5\\nYou gave 5\\nInput an integer, 0 quits\\n> -2\\nYou gave -2\\nInput an integer, 0 quits\\n> 0\\nAll done!\\n\")), mdx(\"h2\", {\n    \"id\": \"paluu-while-silmukan-alkuun\"\n  }, \"Paluu while-silmukan alkuun\"), mdx(\"p\", null, \"Palaamme while-silmukan alkuun, kun kaikki koodilohkon sis\\xE4ll\\xE4 oleva koodi on suoritettu. On my\\xF6s mahdollista palata alkuun muista kohdista koodia. Teemme sen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"continue\"), \" -avainsanalla.\"), mdx(\"p\", null, \"Alla olevassa esimerkiss\\xE4 pyyd\\xE4mme k\\xE4ytt\\xE4j\\xE4lt\\xE4 positiivisia kokonaislukuja. Jos k\\xE4ytt\\xE4j\\xE4 antaa negatiivisen kokonaisluvun, tulostamme viestin \\\"Ei ole positiivinen kokonaisluku\\\" ja palaamme silmukan alkuun. Jos k\\xE4ytt\\xE4j\\xE4 antaa nollan, ohjelma p\\xE4\\xE4ttyy.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n        continue;\\n    }\\n\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n}\\n\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Input a positive integer, 0 quits\\n> 12\\nYou gave 12\\nInput a positive integer, 0 quits\\n> -2\\nNot a positive integer!\\nInput a positive integer, 0 quits\\n> 0\\nAll done!\\n\")), mdx(\"p\", null, \"Saatoit huomata, ett\\xE4 k\\xE4ytimme kaksi if-ehtolauseketta sen sijaan, ett\\xE4 k\\xE4ytt\\xE4isimme if-else-if -rakennetta. Katsotaan koodiamme if-else-rakenteella.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    else if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n        continue;\\n    }\\n\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n}\\n\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"p\", null, \"Ainoa ero koodissa on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"else if\"), \" sen sijaan, ett\\xE4 olisi pelkk\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"if\"), \". Ent\\xE4 jos muuttaisimme j\\xE4rjestyst\\xE4 koodilohkossa?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n        continue;\\n    }\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n}\\n\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"p\", null, \"K\\xE4ytt\\xE4j\\xE4n n\\xE4k\\xF6kulmasta toiminnallisuus on identtinen. Yhdistet\\xE4\\xE4n t\\xE4m\\xE4 koodi if-else-rakenteeksi.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n    }\\n    else if (number == 0) \\n    {\\n        break;\\n    }\\n    else \\n    {\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n    }\\n}\\n\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"p\", null, \"Nyt kommentoimme ohjelman uusimmat versiot n\\xE4hd\\xE4ksemme, mit\\xE4 tapahtuu koodissa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Toista kunnes break\\nwhile (true) \\n{\\n    // Kysy k\\xE4ytt\\xE4j\\xE4lt\\xE4 sy\\xF6te\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    // Lue sy\\xF6te\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    \\n    // Tarkista onko luku pienmpi kuin 0, jos ei, anna virhe\\n    if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n        continue;\\n    }\\n    // Haluaako k\\xE4ytt\\xE4j\\xE4 lopettaa?\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    // Tulosta lopputulos\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n}\\n\\n// Lopeta\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"p\", null, \"Kaikki rivit ja sis\\xE4iset koodilohkot suorittavat yksinkertaisen, merkityksellisen teht\\xE4v\\xE4n. Ent\\xE4 yhdistetty versio?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Toista kunnes break\\nwhile (true) \\n{\\n    // Kysy k\\xE4ytt\\xE4j\\xE4lt\\xE4 sy\\xF6te\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    // Lue sy\\xF6te\\n    int number = Convert.ToInt32(Console.ReadLine());\\n\\n    // if-else-if-else\\n    // Yksi koodilohko, monta toimintaoa\\n\\n    // Tarkista onko numero liian pieni\\n    if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n    }\\n    // Jos numero ei ole liian pieni, haluaako k\\xE4ytt\\xE4j\\xE4 lopettaa?\\n    else if (number == 0) \\n    {\\n        break;\\n    }\\n    // Jos numero ei ole liian pieni eik\\xE4 k\\xE4ytt\\xE4j\\xE4 halua lopettaa, tulosta numero\\n    else \\n    {\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n    }\\n}\\n// Lopetus\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"p\", null, \"Kuten n\\xE4et, if-else-if-else -lohkolla on melko suuri teht\\xE4v\\xE4, ja sen m\\xE4\\xE4ritt\\xE4minen vaatii useita vaiheita. Kun suunnittelet ohjelmiasi, sinun tulisi pyrki\\xE4 yksinkertaisiin teht\\xE4viin kaikille koodilohkoille.\"), mdx(\"h2\", {\n    \"id\": \"laskutoimitukset-while-silmukoiden-avulla\"\n  }, \"Laskutoimitukset while-silmukoiden avulla\"), mdx(\"p\", null, \"While-silmukoita k\\xE4ytet\\xE4\\xE4n usein laskutoimituksiin. Esimerkiksi ohjelmat, jotka k\\xE4sittelev\\xE4t m\\xE4\\xE4rittelem\\xE4tt\\xF6mi\\xE4 m\\xE4\\xE4ri\\xE4 k\\xE4ytt\\xE4j\\xE4n sy\\xF6tteit\\xE4, perustuvat while-rakenteeseen. T\\xE4llaisissa ohjelmissa voimme ker\\xE4t\\xE4 esimerkiksi tilastoja annetuista numeroista tai muista sy\\xF6tteist\\xE4.\"), mdx(\"p\", null, \"Jotta ohjelma voi tulostaa tietoa sen j\\xE4lkeen, kun while-silmukka on suoritettu, meid\\xE4n on tallennettava ja muokattava tietoja silmukan aikana.\"), mdx(\"p\", null, \"Jos muuttuja tietojen tallentamiseen esitell\\xE4\\xE4n silmukalle omistetussa koodilohkossa, muuttuja on saatavilla vain koodilohkossa eik\\xE4 muualla. N\\xE4ytet\\xE4\\xE4n t\\xE4m\\xE4 kommentoidulla koodilla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Toista kunnes lopetetaan\\n\\nwhile (true) \\n{\\n    // Luo muuttuja pit\\xE4m\\xE4\\xE4n kirjaa ykk\\xF6sist\\xE4\\n    int countOnes = 0;\\n    // Kysy luku\\n    Console.WriteLine(\\\"Input an integer, 0 quits\\\");\\n    // Lue luku ja tallenna se muuttujaan\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    // Jos 0, lopeta\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    // Jos annettu numero on 1\\n        if  (number == 1)\\n    {\\n        // Kasvata muuttujan arvoa 1:ll\\xE4\\n        countOnes = countOnes + 1;\\n    }\\n}\\n\\n// Alla oleva k\\xE4sky ei pysty k\\xE4ytt\\xE4m\\xE4\\xE4n muuttujaa \\\"countOnes\\\",\\n// koska se on m\\xE4\\xE4ritelty while-loopin sis\\xE4ll\\n// Koodi ei toimi\\nConsole.WriteLine(\\\"Amount of ones: \\\" + countOnes);\\n\")), mdx(\"p\", null, \"Kaikki muuttujat ovat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"n\\xE4kyviss\\xE4\"), \" sille koodilohkolle, jossa ne sijaitsevat. Muokataan esimerkki\\xE4mme niin, ett\\xE4 tulostusrivi on sis\\xE4isen koodilohkon sis\\xE4ll\\xE4, ja katsotaan, mit\\xE4 tapahtuu.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Toista kunnes lopetetaan\\n\\nwhile (true) \\n{\\n    // Luo muuttuja pit\\xE4m\\xE4\\xE4n kirjaa ykk\\xF6sist\\xE4\\n    int countOnes = 0;\\n    // Kysy luku\\n    Console.WriteLine(\\\"Input an integer, 0 quits\\\");\\n    // Lue luku ja tallenna se muuttujaan\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    // Jos 0, lopeta\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    // Jos annettu numero on 1\\n    if  (number == 1)\\n    {\\n        // Kasvata muuttujan arvoa 1:ll\\xE4\\n        countOnes = countOnes + 1;\\n    }\\n    // Tulosta montako ykk\\xF6st\\xE4 ker\\xE4ttiin\\n    Console.WriteLine(\\\"Amount of ones: \\\" + countOnes);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Input an integer, 0 quits\\n> 5\\nAmount of ones: 0\\nInput an integer, 0 quits\\n> 1\\nAmount of ones: 1\\nInput an integer, 0 quits\\n> 1\\nAmount of ones: 1\\nInput an integer, 0 quits\\n> 2\\nAmount of ones: 0\\nInput an integer, 0 quits\\n> 0\\n\")), mdx(\"p\", null, \"Nyt ohjelma toimii, mutta ei niin kuin tarkoitimme. Koska muuttuja luodaan silmukan sis\\xE4ll\\xE4 ja alustetaan nollaksi, aina kun silmukka toistuu, muuttuja palaa aina alkutilanteeseen.\"), mdx(\"p\", null, \"Jos haluamme ohjelman toimivan, meid\\xE4n on luotava muuttuja ennen silmukkaa. Seuraava esimerkki toimii tarkoitetusti.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Luo muuttuja pit\\xE4m\\xE4\\xE4n kirjaa ykk\\xF6sist\\xE4. Huom nyt while-silmukan ulkopuolella!\\nint countOnes = 0;\\n\\n// Toista kunnes lopetetaan\\nwhile (true) \\n{\\n\\n    // Kysy luku\\n    Console.WriteLine(\\\"Input an integer, 0 quits\\\");\\n    // Lue luku ja tallenna se muuttujaan\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    // Jos 0, lopeta\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    // Jos annettu numero on 1\\n    if  (number == 1)\\n    {\\n        // Kasvata muuttujan arvoa 1:ll\\xE4\\n        countOnes = countOnes + 1;\\n    }\\n}\\n// Tulosta montako ykk\\xF6st\\xE4 ker\\xE4ttiin\\nConsole.WriteLine(\\\"Amount of ones: \\\" + countOnes);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Input an integer, 0 quits\\n> 5\\nInput an integer, 0 quits\\n> 1\\nInput an integer, 0 quits\\n> 1\\nInput an integer, 0 quits\\n> -1\\nInput an integer, 0 quits\\n> 0\\nAmount of ones: 2\\n\")), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Huom! Tee harjoitukset englanniksi, katso mallia harjoitusten esimerkeist\\xE4, miten koodin tulee toimia ja mit\\xE4 sen tulee tulostaa (englanniksi)\"), mdx(Exercise, {\n    title: '034 Continue',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma, joka kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 haluaako h\\xE4n jatkaa. Jos k\\xE4ytt\\xE4j\\xE4 vastaa \\\"no\\\", ohjelma p\\xE4\\xE4ttyy, muussa tapauksessa kysyt\\xE4\\xE4n uudestaan.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Use a while-loop!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Do you want to continue?\\n> Yes\\nDo you want to continue?\\n> Hot potato\\nDo you want to continue?\\n> no\\n\"))), mdx(Exercise, {\n    title: '035 Answer to life',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma, joka kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja, kunnes k\\xE4ytt\\xE4j\\xE4 antaa luvun 42.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 41\\nGive a number:\\n> 68\\nGive a number:\\n-42\\nGive a number:\\n42\\n\"))), mdx(Exercise, {\n    title: '036 Power of positivity',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma, joka kysyy kokonaislukuja k\\xE4ytt\\xE4j\\xE4lt\\xE4. Jos numero on nolla, ohjelma loppuu. Jos numero on negatiivinen tulosta viesti \\\"That is negative\\\". Jos numero on positiivinen, tulosta numero korotettuna toiseen potenssiin (eli numero kerrottuna itsell\\xE4\\xE4n).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 5\\n25\\nGive a number:\\n> -2\\nThat is negative\\nGive a number:\\n> 4\\n16\\nGive a number:\\n0\\n\"))), mdx(Exercise, {\n    title: '037 Counting numbers',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma, joka kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja. Jos k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 0, ohjelma loppuu. Ohjelman lopussa ohjelma ilmoittaa montako numeroa k\\xE4ytt\\xE4j\\xE4 kerkesi sy\\xF6tt\\xE4\\xE4 ennen loptusta. \\xC4l\\xE4 laske viimeist\\xE4 nollaa mukaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 5\\nGive a number:\\n> -2\\nGive a number:\\n> 22\\nGive a number:\\n> 0\\nTotal amount of numbers: 3\\n\"))), mdx(Exercise, {\n    title: '038 Counting negatives',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma joka kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja. Jos luku on 0, lopeta. Lopussa ohjelma tulostaa montako negatiivista lukua k\\xE4ytt\\xE4j\\xE4 sy\\xF6tti ennen lopetusta. Tee tulostus k\\xE4ytt\\xE4m\\xE4ll\\xE4 fraasia \\\"Total amount of negative numbers: \\\" ja summa. \\xC4l\\xE4 laske viimeist\\xE4 nollaa mukaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 5\\nGive a number:\\n> -2\\nGive a number:\\n> 22\\nGive a number:\\n> 0\\nTotal amount of negative numbers: 1\\n\"))), mdx(Exercise, {\n    title: '039 Sum of numbers',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma, joka kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja. Jos luku on 0, lopeta. Lopussa tulosta sy\\xF6tettyjen lukujen yhteissumma \\\"Total sum of numbers: \\\" ja summa per\\xE4\\xE4n. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 5\\nGive a number:\\n> -2\\nGive a number:\\n> 22\\nGive a number:\\n> 0\\nTotal sum of numbers: 25\\n\"))), mdx(Exercise, {\n    title: '040 Amount and sum',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma, joka kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja. Nolla lopettaa. Lopussa tulosta numeroiden summa ja numeroiden m\\xE4\\xE4r\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 5\\nGive a number:\\n> -2\\nGive a number:\\n> 22\\nGive a number:\\n> 0\\nTotal sum of numbers: 25\\nTotal amount of numbers: 3\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Tarvitset kaksi muuttujaa, yhden summalle ja toisen numeroiden m\\xE4\\xE4r\\xE4lle.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#while-silmukka","title":"While-silmukka"},{"url":"#while-silmukan-lopettaminen","title":"While-silmukan lopettaminen"},{"url":"#paluu-while-silmukan-alkuun","title":"Paluu while-silmukan alkuun"},{"url":"#laskutoimitukset-while-silmukoiden-avulla","title":"Laskutoimitukset while-silmukoiden avulla"}]},{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Toisto"}}},"pageContext":{"id":"937dd365-794f-53db-973e-2752d8f3ce8b"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}