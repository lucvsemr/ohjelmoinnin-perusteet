{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa1/osa1-1",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tulostaminen ja lukeminen\",\n  \"nav_order\": 1,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Ohjelman perusrunko on seuraava:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\npublic class Program\\n{\\n    public static void Main(string[] args)\\n    {\\n        // Koodisi tulee t\\xE4h\\xE4n v\\xE4liin\\n    }\\n}\\n\")), mdx(\"p\", null, \"Ohjelman suoritus alkaa ensimm\\xE4isest\\xE4 rivist\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public static void Main(string[] args) {\"), \" ja p\\xE4\\xE4ttyy sulkevaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"}\"), \" sulkeeseen. Kaikki niiden v\\xE4liss\\xE4 suoritetaan yksi rivi kerrallaan. Esimerkiksi ohjelmoijan yleisin aloitusohjelma, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Hello World!\"), \", menisi n\\xE4in:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program {\\n    public static void Main(string[] args)\\n    {\\n        Console.WriteLine(\\\"Hello World!\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"T\\xE4ss\\xE4 esimerkiss\\xE4 ainoa suoritettava lauseke on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine(\\\"Hello World!\\\");\"), \", joka tulostaa\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Hello World!\\n\")), mdx(\"p\", null, \"Keskitymme my\\xF6hemmin lausekkeisiin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public class\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public static void\"), \", joten sinun ei tarvitse huolehtia niist\\xE4 viel\\xE4.\"), mdx(\"p\", null, \"Materiaalissa koko koodirakenne saattaa olla esitetty\\xE4 pienempi, ellei sit\\xE4 nimenomaan tarvita. Yll\\xE4 oleva esimerkki voitaisiin esitt\\xE4\\xE4 my\\xF6s seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine(\\\"Hello World!\\\");\\n\")), mdx(\"p\", null, \"materiaalissa. Harjoituksissa ensimm\\xE4isille viikoille annetaan perusrakenne, joten sinun ei tarvitse viel\\xE4 huolehtia sen ulkoa opettelusta.\"), mdx(\"h2\", {\n    \"id\": \"tulostaminen\"\n  }, \"Tulostaminen\"), mdx(\"p\", null, \"Kuten aiemmin mainittiin, ohjelmointikieliss\\xE4 on sis\\xE4\\xE4nrakennettuja lauseita. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \" on yksi niist\\xE4. Lause on melko itsest\\xE4\\xE4n selv\\xE4. Se kertoo tietokoneelle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"kirjoita rivi konsoliin\"), \". Voit muuttaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Hello World!\"), \" tilalle mink\\xE4 tahansa haluamasi tekstin, kunhan itse komentoa ei muuteta, ja se toimii.\"), mdx(\"p\", null, \"Harjoitusten vaatimukset ovat hyvin tarkkoja. Esimerkiksi, jos rivi tarvitsee p\\xE4\\xE4tty\\xE4 huutomerkkiin, sit\\xE4 ei voida j\\xE4tt\\xE4\\xE4 pois.\"), mdx(\"p\", null, \"Ohjelmat luodaan (ja luetaan) k\\xE4sky kerrallaan, miss\\xE4 jokaisen k\\xE4skyn on oltava omalla rivill\\xE4\\xE4n. Seuraavassa esimerkiss\\xE4 kutsutaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \" kahdesti, mik\\xE4 tarkoittaa, ett\\xE4 tulostuskomento suoritetaan kahdesti.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program {\\n    public static void Main(string[] args)\\n    {\\n        Console.WriteLine(\\\"Hello World!\\\");\\n        Console.WriteLine(\\\"... and Pietarsaari!\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 tulostaisi:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Hello World!\\n... and Pietarsaari!\\n\")), mdx(\"p\", null, \"Tarkennettuna komento \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine(\\\"esimerkkiteksti\\\");\"), \" tulostaa tekstin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"esimerkkiteksti\"), \" ja rivinvaihdon. Rivinvaihdon voi my\\xF6s hoitaa erikoismerkill\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\\n\"), \", joka kirjoitetaan tulostettavan tekstin osana.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program {\\n    public static void Main(string[] args)\\n    {\\n        Console.WriteLine(\\\"Hello World!\\\\n... and Pietarsaari!\\\");\\n    }\\n}\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \" Tyhj\\xE4\\xE4 tilaa \\\\n ymp\\xE4rill\\xE4 ei ole. Tekstiss\\xE4 jokainen merkki, mukaan lukien tyhj\\xE4t, on osa teksti\\xE4. Jos laittaisit tyhj\\xE4\\xE4 tilaa rivinvaihdon ymp\\xE4rille, ensimm\\xE4inen rivi p\\xE4\\xE4ttyisi tyhj\\xE4\\xE4n merkkiin ja toinen alkaisi sill\\xE4.\"), mdx(\"p\", null, \"Joskus teksti voi olla varsin pitki\\xE4, ja sen lukeminen yhdest\\xE4 rivist\\xE4 voi olla melko vaikeaa. On mahdollista jakaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"merkkijono\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string\"), \") useisiin osiin ja sitten yhdist\\xE4\\xE4 ne yhteen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"+\"), \" -operaattorilla. Yll\\xE4 oleva esimerkki voisi olla:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program {\\n    public static void Main(string[] args)\\n    {\\n        Console.WriteLine(\\\"Hello World!\\\\n\\\" +\\n        \\\"... and Pietarsaari!\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 tulostaa t\\xE4sm\\xE4lleen saman informaation kuin aiemmin. Ensimm\\xE4iseen ratkaisuun verrattuna t\\xE4m\\xE4 on tehokkaampi, koska tulostuskomentoa tarvitsee kutsua vain kerran. Toiseen ratkaisuun verrattuna t\\xE4m\\xE4 on helpompi lukea.\"), mdx(\"p\", null, \"T\\xE4h\\xE4n asti kaikki, mit\\xE4 olemme tulostaneet, on p\\xE4\\xE4ttynyt rivinvaihtoon. Jos haluaisimme tulostaa jotain ilman, ett\\xE4 rivi vaihtuu lopussa, k\\xE4ytt\\xE4isimme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.Write(\\\"En vaihda rivi\\xE4\\\");\")), mdx(\"p\", null, \"N\\xE4in ollen tulostamiseen on kaksi lausetta:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Console.WriteLine()\"), \" tulostaa tekstin ja vaihtaa rivin\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Console.Write()\"), \" tulostaa tekstin, mutta pit\\xE4\\xE4 samalla rivill\\xE4\")), mdx(\"p\", null, \"Tulostetussa tekstiss\\xE4 voi olla erikoismerkkej\\xE4, kuten \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\\n\"), \". On my\\xF6s \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Escape_character\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"muita erikoismerkkej\\xE4 (t\\xE4\\xE4ll\\xE4)\")), \", joihin saattaa olla hy\\xF6dyllist\\xE4 tutustua.\"), mdx(\"h2\", {\n    \"id\": \"komennon-parametrit\"\n  }, \"Komennon parametrit\"), mdx(\"p\", null, \"Kun haluamme tulostaa jotain, meid\\xE4n on annettava se tieto \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"parametrina\"), \" tulostusk\\xE4skyllemme. Parametrit annetaan komennolle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"()\"), \" sis\\xE4ll\\xE4. Esimerkiksi tulostaaksemme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pid\\xE4n ohjelmoinnista\"), \", annamme parametrin lainausmerkeiss\\xE4 seuraavasti: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.Write(\\\"Pid\\xE4n ohjelmoinnista\\\")\"), \".\"), mdx(\"h2\", {\n    \"id\": \"puolipiste-erottaa-komennot\"\n  }, \"Puolipiste erottaa komennot\"), mdx(\"p\", null, \"Puolipisteell\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \";\"), \" erotetaan komennot toisistaan. Voisimme kirjoittaa esimerkkimme yhdelle riville, mutta ne eiv\\xE4t olisi kovin luettavia.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.Write(\\\"Hello \\\"); Console.Write(\\\"World!\\\"); Console.Write(\\\"\\\\n\\\");\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 tulostaisi:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Hello World!\\n\")), mdx(\"h2\", {\n    \"id\": \"koodilohkot-code-blocks\"\n  }, \"Koodilohkot (code blocks)\"), mdx(\"p\", null, \"Koodi koostuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"koodilohkoista\"), \". Koodilohko tarkoittaa koodin osaa, joka on erotettu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"{}\"), \" suluilla. Usein yhdess\\xE4 ohjelmassa on useita n\\xE4it\\xE4, kuten voitiin jo n\\xE4hd\\xE4 perusrakenteestamme.\"), mdx(\"p\", null, \"Esimerkiksi rivi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public static void Main(string[] args)\"), \", joka m\\xE4\\xE4rittelee, mist\\xE4 ohjelman suoritus alkaa, m\\xE4\\xE4rittelee lohkon siit\\xE4, mit\\xE4 suoritetaan, kun ohjelma k\\xE4ynnistyy.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program\\n{  // Luokan koodilohko alkaa\\n\\n  public static void Main(string[] args)\\n  {  // P\\xE4\\xE4ohjelman koodilohko alkaa\\n\\n  // Koodisi tulee t\\xE4h\\xE4n v\\xE4liin\\n\\n  } // P\\xE4\\xE4ohjelman koodilohko p\\xE4\\xE4ttyy\\n\\n} // Luokan koodilohko p\\xE4\\xE4ttyy\\n\")), mdx(\"p\", null, \"Esimerkki n\\xE4ytt\\xE4\\xE4 lohkon toisen lohkon sis\\xE4ll\\xE4. Lohkoja voidaan k\\xE4ytt\\xE4\\xE4 ohjelman rakenteen m\\xE4\\xE4ritt\\xE4miseen. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"class\"), \" -lohko sis\\xE4lt\\xE4\\xE4 koko ohjelman rakenteen, kun taas \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main\"), \" -lohko sis\\xE4lt\\xE4\\xE4 l\\xE4hdekoodin, joka suoritetaan, kun ohjelma k\\xE4ynnistyy.\"), mdx(\"p\", null, \"Lohko avataan aina \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"{\"), \" ja suljetaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"}\"), \". Jos jompikumpi niist\\xE4 puuttuu, koodi ei k\\xE4\\xE4nny ja sit\\xE4 ei suoriteta.\"), mdx(\"h2\", {\n    \"id\": \"kommentit-comments\"\n  }, \"Kommentit (comments)\"), mdx(\"p\", null, \"Kuten olet ehk\\xE4 huomannut, meill\\xE4 on jo \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"kommentteja\"), \" koodissamme. Kommentit ovat tekstej\\xE4, jotka eiv\\xE4t k\\xE4\\xE4nn\\xE4, ja siksi niit\\xE4 ei suoriteta. Kommentteja voidaan k\\xE4ytt\\xE4\\xE4 esimerkiksi tietyiss\\xE4 koodielementeiss\\xE4 kommentointiin tai osan koodista \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"v\\xE4liaikaiseen\"), \" kommentointiin vianj\\xE4ljitystarkoituksiin. On olemassa kahdenlaisia kommentteja:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"// yksirivinen kommentti\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"/\", \"*\", \" monirivinen kommentti \", \"*\", \"/\"))), mdx(\"p\", null, \"Kuten n\\xE4et, yksirivinen kommentti alkaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"//\"), \", mutta sill\\xE4 ei ole lopetusmerkki\\xE4. Monirivinen kommentti alkaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/\", \"*\"), \" ja p\\xE4\\xE4ttyy \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"*\", \"/\"), \". Kaikki niiden v\\xE4liss\\xE4 oleva tulkitaan kommentiksi k\\xE4\\xE4nt\\xE4j\\xE4n toimesta.\"), mdx(\"h2\", {\n    \"id\": \"koodin-tyyli\"\n  }, \"Koodin tyyli\"), mdx(\"p\", null, \"Vaikka tietokoneella tai valitsemallamme kielell\\xE4 ei ole tyylirajoituksia, on suuri etu pit\\xE4\\xE4 koodi siistin\\xE4 ja helppolukuisena. Jokaiselle kielelle on olemassa laajalle levinneit\\xE4 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"koodausk\\xE4yt\\xE4nt\\xF6j\\xE4 (t\\xE4\\xE4ll\\xE4)\")), \". Sisennys ja muuttujien nime\\xE4misk\\xE4yt\\xE4nn\\xF6t ovat hy\\xF6dyllisimm\\xE4t seikat, jotka on hyv\\xE4 pit\\xE4\\xE4 mieless\\xE4.\"), mdx(\"p\", null, \"Voimme kirjoittaa ohjelmamme esimerkiksi seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program\\n{\\n    public static void Main(string[] args)\\n    {\\n        Console.WriteLine(\\\"Hello World!\\\\n\\\" +\\n        \\\"... and Pietarsaari!\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"kuten my\\xF6s:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program { public static void Main(string[] args) { Console.WriteLine(\\\"Hello World!\\\\n\\\" +\\n\\\"... and Pietarsaari!\\\");  }\\n                                        }\\n\")), mdx(\"p\", null, \"Kuten n\\xE4et, j\\xE4lkimm\\xE4inen ei ole yht\\xE4 helppo lukea, ja esimerkiksi eri koodilohkojen ymm\\xE4rt\\xE4minen on vaikeampaa. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pit\\xE4k\\xE4\\xE4 koodinne siistin\\xE4 ja puhtaana!\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Omasta koodista saa helposti luettavampaa, kun k\\xE4ytt\\xE4\\xE4 koodin kirjoittamisen j\\xE4lkeen n\\xE4pp\\xE4inyhdistelm\\xE4\\xE4 ALT + SHIFT + F. T\\xE4m\\xE4 sisent\\xE4\\xE4 tekstin automaattisesti!\"), mdx(\"h2\", {\n    \"id\": \"merkkijonon-tulostaminen\"\n  }, \"Merkkijonon tulostaminen\"), mdx(\"p\", null, \"Nyt kun ymm\\xE4rr\\xE4mme koodin perusrakenteen, menn\\xE4\\xE4n hieman syvemm\\xE4lle. T\\xE4h\\xE4n menness\\xE4 olemme tulostaneet yksinkertaisia tekstirivej\\xE4. N\\xE4m\\xE4 tekstit ovat itse asiassa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"merkkijonoliteraaleja\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string literals\"), \"). N\\xE4it\\xE4 literaaleja voidaan tallentaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"merkkijonomuuttujiin\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string variables\"), \"). Kun tuomme muuttujan ohjelmaan, annamme sille yleens\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arvon\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"value\"), \"). Arvo annetaan seuraamalla muuttujaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"=\"), \" merkill\\xE4, arvolla ja lopettamalla rivi j\\xE4lleen puolipisteell\\xE4, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \";\"), \". Esimerkiksi, jos haluamme merkkijonomuuttujan nimelt\\xE4\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"message\"), \" arvolla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I am learning\"), \", antaisimme sen n\\xE4in:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string message = \\\"I am learning\\\";\\n\")), mdx(\"p\", null, \"Muuttujan luominen antaa meille mahdollisuuden viitata muuttujaan ohjelman sis\\xE4ll\\xE4. Voisimme k\\xE4ytt\\xE4\\xE4 muuttujaa tulostamiseen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string message = \\\"Print me\\\";\\nConsole.WriteLine(message);\\n\")), mdx(\"p\", null, \"Ja t\\xE4ll\\xF6in saisimme:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Print me\\n\")), mdx(\"p\", null, \"Jos nyt k\\xE4ytt\\xE4isimme lainausmerkkej\\xE4 muuttujan nimen ymp\\xE4rill\\xE4, tulostaisimme sen merkkijonoliteraalina.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string message = \\\"Print me\\\";\\nConsole.WriteLine(\\\"message\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"message\\n\")), mdx(\"p\", null, \"Kuten aiemmin yhdistimme useita tekstirivej\\xE4, my\\xF6s merkkijonomuuttujia voidaan liitt\\xE4\\xE4 yhteen osana tulostamista.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string name = \\\"Doctor Octopus\\\";\\nConsole.WriteLine(\\\"We meet again, \\\" + name);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"We meet again, Doctor Octopus\\n\")), mdx(\"p\", null, \"Sama voidaan tehd\\xE4 my\\xF6s osissa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string name = \\\"Doctor Octopus\\\";\\nstring greeting = \\\"We meet again, \\\";\\nConsole.WriteLine(greeting + name + \\\"!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"We meet again, Doctor Octopus!\\n\")), mdx(\"p\", null, \"Voisimme my\\xF6s luoda merkkijonomuuttujan useista literaaleista:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string counting = \\\"One\\\" + \\\"\\\\n\\\" + \\\"Two\\\" + \\\"\\\\n\\\" + \\\"Three\\\";\\nConsole.WriteLine(counting);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"One\\nTwo\\nThree\\n\")), mdx(\"h2\", {\n    \"id\": \"merkkijonon-kysyminen-käyttäjältä\"\n  }, \"Merkkijonon kysyminen k\\xE4ytt\\xE4j\\xE4lt\\xE4\"), mdx(\"p\", null, \"T\\xE4h\\xE4n menness\\xE4 olemme k\\xE4ytt\\xE4neet suoraan l\\xE4hdekoodiin kirjoitettuja merkkijonoja. Olisi hyv\\xE4, jos voisimme kertoa ohjelmalle, mit\\xE4 haluamme tulostaa joka kerta. T\\xE4m\\xE4 voidaan tehd\\xE4 toisella sis\\xE4\\xE4nrakennetulla komennolla, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ReadLine\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program\\n{\\n    public static void Main()\\n    {\\n    // Tulosta kysymys\\n    Console.Write(\\\"Give a message: \\\");\\n\\n    // M\\xE4\\xE4rit\\xE4 uusi string-muuttuja ja lue merkkijono k\\xE4ytt\\xE4j\\xE4lt\\xE4\\n    string message = Console.ReadLine();\\n\\n    // Tulosta vastaus\\n    Console.WriteLine(message);\\n    }\\n}\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 n\\xE4ytt\\xE4isi joltakin t\\xE4lt\\xE4, sy\\xF6tteell\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I want to print this\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a message: I want to print this\\nI want to print this\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 on sama esimerkki, mutta yhdist\\xE4m\\xE4ll\\xE4 sy\\xF6tt\\xF6viestin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Give me a message:\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program\\n{\\n   public static void Main()\\n   {\\n    // Tulosta kysymys\\n    Console.Write(\\\"Give a message: \\\");\\n\\n    // M\\xE4\\xE4rit\\xE4 uusi string-muuttuja ja lue merkkijono k\\xE4ytt\\xE4j\\xE4lt\\xE4\\n    string message = Console.ReadLine();\\n\\n    // Tulosta vastaus\\n    Console.WriteLine(\\\"Your message was: \\\" + message);\\n   }\\n}\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 n\\xE4ytt\\xE4isi jotakuinkin t\\xE4lt\\xE4 sy\\xF6tteell\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I want to print this\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a message: I want to print this\\nYour message was: I want to print this\\n\")), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Huom! Tee harjoitukset englanniksi, katso mallia harjoitusten esimerkeist\\xE4, miten koodin tulee toimia ja mit\\xE4 sen tulee tulostaa (englanniksi)\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Muista ajaa ohjelmat itse konsolissa, komennolla dotnet run!\"), mdx(Exercise, {\n    title: '001 Hello World!',\n    mdxType: \"Exercise\"\n  }, \"Ohjelman perusrunko on annettu teht\\xE4v\\xE4nannossa:\", mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\nnamespace Exercise001\\n{\\n    class Program\\n    {\\n        public static void Main(string[] args)\\n        {\\n            // Koodisi tulee t\\xE4nne\\n            \\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"Rivi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\\\\\Koodisi tulee t\\xE4nne:\"), \" on kommentti. K\\xE4\\xE4nt\\xE4j\\xE4 ei k\\xE4\\xE4nn\\xE4 sit\\xE4, joten siit\\xE4 ei tarvitse v\\xE4litt\\xE4\\xE4. Voit poistaa sen, jos haluat.\"), mdx(\"p\", null, \"Luo ohjelma, joka tulostaa tekstin \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello World!\"), \" komentoriville. Ohjelma sis\\xE4lt\\xE4\\xE4 yll\\xE4 kuvaillun perusrakenteen.\")), mdx(Exercise, {\n    title: '002 Bonnie Tyler',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Tehd\\xE4\\xE4n hieman lis\\xE4\\xE4! Bonnie Tyler laului joskus tunteista, joka soveltuu my\\xF6s koodaukseen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Once upon a time\\nI was falling in love\\nNow I'm only falling apart\\n\")), mdx(\"p\", null, \"Kirjoita ohjelma, joka tulostaa yll\\xE4 olevat lyriikat k\\xE4ytt\\xE4m\\xE4ll\\xE4 komentoa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \" kolme kertaa.\")), mdx(Exercise, {\n    title: '003 Bonnie Tyler with line changes',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Hienos\\xE4\\xE4det\\xE4\\xE4n ohjelmaamme. Tulosta sama viesti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Once upon a time\\nI was falling in love\\nNow I'm only falling apart\\n\")), mdx(\"p\", null, \"T\\xE4ll\\xE4 kertaa vain k\\xE4ytt\\xE4m\\xE4ll\\xE4 kerran komentoa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \".\")), mdx(Exercise, {\n    title: '004 First variable',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4ss\\xE4 on valmiina seuraava runko:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n \\nnamespace Exercise004\\n{\\n    public class Program\\n    {\\n        public static void Main(string[] args)\\n        {\\n            string message = \\\"Passport and floss!\\\";\\n            Console.WriteLine(message);\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"Muokkaa sit\\xE4 niin, ett\\xE4 se tulostaa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Passport and a toothbrush!\"), \"\\n\\xC4l\\xE4 muokkaa rivi\\xE4 joka alkaa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \", muokkaa vain muuttujan sis\\xE4lt\\xF6\\xE4!\")), mdx(Exercise, {\n    title: '005 Ada Lovelace',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4ss\\xE4 on valmiina seuraava runko:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\nnamespace Exercise005\\n{\\n    class Program\\n    {\\n        public static void Main(string[] args)\\n        {\\n            string name = \\\"Ada LoveLace\\\";\\n            // Write your code here:           \\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"Muokkaa koodia ett\\xE4 se tulostaa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello Ada LoveLace!\"), \"\\n\\xC4l\\xE4 muokkaa muuttujaa!\")), mdx(Exercise, {\n    title: '006 Print input',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma, joka pyyt\\xE4\\xE4 k\\xE4ytt\\xE4j\\xE4lt\\xE4 merkkijonoa. Kun k\\xE4ytt\\xE4j\\xE4 on antanut merkkijonon (kirjoittanut tekstin ja painanut Enter), ohjelma tulostaa annetun rivin. Esimerkki tulosteesta sy\\xF6tteell\\xE4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello\"), \" (sy\\xF6te on merkitty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \" selkeyden vuoksi):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give input!\\n> Hello\\nHello\\n\"))), mdx(Exercise, {\n    title: '007 Triple hello',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma, joka pyyt\\xE4\\xE4 k\\xE4ytt\\xE4j\\xE4lt\\xE4 merkkijonoa. Kun k\\xE4ytt\\xE4j\\xE4 on antanut merkkijonon (kirjoittanut tekstin ja painanut Enter), ohjelma tulostaa annetun rivin 3 kertaa. Esimerkki tulosteesta sy\\xF6tteell\\xE4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give input!\\n> Hello\\nHello\\nHello\\nHello\\n\"))), mdx(Exercise, {\n    title: '008 Greeting',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma, joka kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 heid\\xE4n nime\\xE4\\xE4n ja tervehtii heit\\xE4. Esimerkki tulosteesta sy\\xF6tteell\\xE4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ada\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"What is your name?\\n> Ada\\nHello Ada!\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Huomaa huutomerkki!\")), mdx(Exercise, {\n    title: '009 Conversation',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma, joka simuloi pient\\xE4 keskustelua. Ohjelma tulostaa kolme lausetta ja odottaa kaksi k\\xE4ytt\\xE4j\\xE4n sy\\xF6tett\\xE4. Esimerkki tulosteesta:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Hello, how are you?\\n> Fine, thanks.\\nThat's interesting, tell me more\\n> I learn coding\\nThank you for sharing!\\n\"))), mdx(Exercise, {\n    title: '010 Name and profession',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma, joka kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 nimen ja ammatin. T\\xE4m\\xE4n j\\xE4lkeen ohjelma kirjoittaa pienen tarinan n\\xE4ill\\xE4 tiedoilla. T\\xE4ss\\xE4 esimerkkitarina sy\\xF6tteill\\xE4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ada\"), \" ja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Data Scientist\"), \":\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Jokainen Ada ja Data Scientist tarinassa ovat k\\xE4ytt\\xE4j\\xE4n antamia sy\\xF6tteit\\xE4. Muista tallentaa k\\xE4ytt\\xE4j\\xE4lt\\xE4 kysytyt sy\\xF6tteet muuttujiin ja k\\xE4ytt\\xE4\\xE4 niit\\xE4 tarinassa!  \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"I will tell a story, but I need some information.\\nGive a name for main character:\\n> Ada\\nGive the character a profession:\\n> Data Scientist\\nHere is the story:\\nOnce upon a time there was a Data Scientist called Ada\\nOn her way to work, Ada often pondered what being Data Scientist meant to them.\\nWhen you work as a Data Scientist you meet interesting people.\\nAda enjoys their work as Data Scientist, The end.\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#tulostaminen","title":"Tulostaminen"},{"url":"#komennon-parametrit","title":"Komennon parametrit"},{"url":"#puolipiste-erottaa-komennot","title":"Puolipiste erottaa komennot"},{"url":"#koodilohkot-code-blocks","title":"Koodilohkot (code blocks)"},{"url":"#kommentit-comments","title":"Kommentit (comments)"},{"url":"#koodin-tyyli","title":"Koodin tyyli"},{"url":"#merkkijonon-tulostaminen","title":"Merkkijonon tulostaminen"},{"url":"#merkkijonon-kysyminen-käyttäjältä","title":"Merkkijonon kysyminen käyttäjältä"}]},{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Tulostaminen ja lukeminen"}}},"pageContext":{"id":"66890f05-4210-5f5b-96d2-b00695d50973"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}