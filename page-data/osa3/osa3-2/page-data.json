{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa3/osa3-2",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Listat\",\n  \"nav_order\": 2,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Ohjelmoinnissa t\\xF6rm\\xE4\\xE4 usein tilanteisiin, joissa halutaan k\\xE4sitell\\xE4 useita arvoja. T\\xE4h\\xE4n menness\\xE4 olemme k\\xE4ytt\\xE4neet ratkaisuna erillisi\\xE4 muuttujia, mutta t\\xE4m\\xE4 on ep\\xE4k\\xE4yt\\xE4nn\\xF6llist\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string word1;\\nstring word2;\\nstring word3;\\n// ...\\nstring word10;\\n\")), mdx(\"p\", null, \"Yll\\xE4 esitelty ratkaisu on k\\xE4yt\\xF6nn\\xF6ss\\xE4 hy\\xF6dyt\\xF6n -- kuvittele tilanne, jossa sanoja on tuhansia.\"), mdx(\"p\", null, \"Ohjelmointikielet tarjoavat ty\\xF6kaluja suurten m\\xE4\\xE4rien arvojen k\\xE4sittelyyn. Seuraavaksi kurkistamme listaan (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List\"), \"), joka on tarkoitettu samantyyppisten arvojen s\\xE4ilytt\\xE4miseen.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List\"), \" on valmiiksi tehty ty\\xF6kalu C#:ssa, joka auttaa listojen k\\xE4sittelyss\\xE4. Se tarjoaa erilaisia metodeja, joilla voi lis\\xE4t\\xE4 arvoja listaan, poistaa arvoja listasta ja hakea arvoja listan tietylt\\xE4 paikalta. Listan toteutus -- eli se, miten lista on ohjelmoitu -- on abstrahoitu metodien taakse, joten listaa k\\xE4ytt\\xE4v\\xE4n ohjelmoijan ei tarvitse huolehtia listan sis\\xE4isest\\xE4 toiminnasta.\"), mdx(\"h2\", {\n    \"id\": \"listojen-käyttäminen-ja-luominen\"\n  }, \"Listojen k\\xE4ytt\\xE4minen ja luominen\"), mdx(\"p\", null, \"Jotta listaa voidaan k\\xE4ytt\\xE4\\xE4, se t\\xE4ytyy ensin ottaa k\\xE4ytt\\xF6\\xF6n ohjelmassa. T\\xE4m\\xE4 tapahtuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using System.Collections.Generic;\"), \" -komennolla ohjelman alussa. Alla on esimerkki ohjelmasta, jossa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List\"), \" on otettu k\\xE4ytt\\xF6\\xF6n.\"), mdx(\"p\", null, \"Jotta listaa voidaan k\\xE4ytt\\xE4\\xE4, se t\\xE4ytyy ensin alustaa. Alla on esimerkkki jossa luodaan List joka sis\\xE4lt\\xE4\\xE4 kokonaislukuja, nimelt\\xE4\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"numbers\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System.Collections.Generic;\\n\\npublic class Program \\n{\\n    public static void Main(string[] args) \\n    {\\n      List<int> numbers = new List<int>();\\n      // Loput koodista...\\n    }\\n}\\n\\n\")), mdx(\"p\", null, \"Uusi lista luodaan komennolla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List<tyyppi\", \">\", \" list = new List<tyyppi\", \">\", \"()\"), \", jossa tyyppi on listaan tallennettavien arvojen tyyppi (esim. int). Luodaan esimerkiksi lista joka sis\\xE4lt\\xE4\\xE4 merkkijonoja.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> strings = new List<string>();\\n\")), mdx(\"p\", null, \"Listan itsens\\xE4 tyyppi on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List\"), \". Kun lista alustetaan, m\\xE4\\xE4ritell\\xE4\\xE4n muuttujan tyypin lis\\xE4ksi my\\xF6s listaan tallennettavien arvojen tyyppi -- kaikki listaan tallennettavat muuttujat ovat saman tyyppisi\\xE4. T\\xE4ll\\xF6in merkkijonoja sis\\xE4lt\\xE4v\\xE4 lista on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List<string\", \">\"), \". Uusi lista luodaan komennolla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"new List<\", \">\", \"();\"), \".\"), mdx(\"h2\", {\n    \"id\": \"listan-alkioiden-tyypin-määrittäminen\"\n  }, \"Listan alkioiden tyypin m\\xE4\\xE4ritt\\xE4minen\"), mdx(\"p\", null, \"Kun m\\xE4\\xE4rittelemme listan sis\\xE4lt\\xE4mien alkioiden (eli listassa olevien asioiden) tyyppi\\xE4, kirjoitetaan tyyppi samalla tavalla kuin muuttujia m\\xE4\\xE4ritelt\\xE4ess\\xE4. Lista, joka sis\\xE4lt\\xE4\\xE4 int-tyyppisi\\xE4 alkioita, m\\xE4\\xE4ritell\\xE4\\xE4n muodossa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List<int\", \">\"), \"; ja lista, joka sis\\xE4lt\\xE4\\xE4 double-tyyppisi\\xE4 muuttujia, m\\xE4\\xE4ritell\\xE4\\xE4n muodossa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List<double\", \">\"), \".\"), mdx(\"p\", null, \"Alla on esimerkkej\\xE4 erilaisia tyyppej\\xE4 sis\\xE4lt\\xE4vien listojen luomisesta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> list = new List<int>();\\nlist.Add(1);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<double> list = new List<double>();\\nlist.Add(4.2);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<bool> list = new List<bool>();\\nlist.Add(true);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> list = new List<string>();\\nlista.Add(\\\"String is text\\\");\\n\")), mdx(\"p\", null, \"Kun lista on kerran luotu, List olettaa ett\\xE4 kaikki siihen lis\\xE4tt\\xE4v\\xE4t alkiot ovat oikeaa tyyppi\\xE4. Tietysti voit lis\\xE4t\\xE4 listaan my\\xF6s oikeaa tyyppi\\xE4 olevia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"muuttujia\"), \". T\\xE4ll\\xF6in muuttujan arvo tallentuu listan alkioksi.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> integers = new List<int>();\\nint integer = 1;\\nintegers.Add(integer);\\n\\nList<double> doubles = new List<double>();\\ndouble d = 4.2;\\ndoubles.Add(d);\\n\")), mdx(\"h2\", {\n    \"id\": \"arvojen-lisääminen-ja-hakeminen-tietystä-paikasta-listassa\"\n  }, \"Arvojen lis\\xE4\\xE4minen ja hakeminen tietyst\\xE4 paikasta Listassa\"), mdx(\"p\", null, \"Seuraava esimerkki demonstroi muutaman merkkijonon lis\\xE4\\xE4mist\\xE4 Listaan, joka sis\\xE4lt\\xE4\\xE4 merkkijonoja. Lis\\xE4\\xE4minen tapahtuu listan metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Add\"), \" k\\xE4ytt\\xE4m\\xE4ll\\xE4, jolle annetaan parametrina lis\\xE4tt\\xE4v\\xE4 arvo. T\\xE4m\\xE4n j\\xE4lkeen tulostetaan arvo paikassa 0. Alkion arvon hakeminen tietyst\\xE4 paikasta tapahtuu erikoismerkinn\\xE4ll\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"list\", \"[index]\"), \", jossa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"list\"), \" on listan nimi ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"index\"), \" on paikka, josta arvo haetaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class WordListExample \\n{\\n  public static void Main(string[] args) \\n  {\\n    // luodaan wordList, joka sis\\xE4lt\\xE4\\xE4 merkkijonoja\\n    List<string> wordList = new List<string>();\\n\\n    // lis\\xE4t\\xE4\\xE4n wordListiin kaksi arvoa\\n    wordList.Add(\\\"First\\\");\\n    wordList.Add(\\\"Second\\\");\\n\\n    // haetaan arvo paikasta 0 ja tulostetaan se\\n    Console.WriteLine(wordList[0]);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Ohjelmamme tulostaa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First\\n\")), mdx(\"p\", null, \"Kuten n\\xE4kyy, j\\xE4lkimm\\xE4inen metodi hakee listasta ensimm\\xE4isen arvon, kun sille annetaan parametriksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"0\"), \". T\\xE4m\\xE4 johtuu siit\\xE4, ett\\xE4 listan paikat lasketaan nollasta alkaen. Ensimm\\xE4inen arvo l\\xF6ytyy siis kohdasta wordList\", \"[0]\", \", toinen kohdasta wordList\", \"[1]\", \" jne.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class WordListExample \\n{\\n  public static void Main(string[] args) \\n  {\\n    // luodaan wordList, joka sis\\xE4lt\\xE4\\xE4 merkkijonoja\\n    List<string> wordList = new List<string>();\\n\\n    // lis\\xE4t\\xE4\\xE4n wordListiin kaksi arvoa\\n    wordList.Add(\\\"First\\\");\\n    wordList.Add(\\\"Second\\\");\\n\\n    // haetaan arvo paikasta 1 ja tulostetaan se\\n    Console.WriteLine(wordList[1]);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Ohjelma tulostaa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Second\\n\")), mdx(\"h2\", {\n    \"id\": \"tiedon-hakeminen-olemattomasta-kohdasta\"\n  }, \"Tiedon hakeminen \\\"olemattomasta\\\" kohdasta\"), mdx(\"p\", null, \"Jos yrit\\xE4t hakea tietoa paikasta, jota ei ole olemassa, ohjelma tulostaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentOutOfRangeException\"), \" -virheen. Seuraavassa esimerkiss\\xE4 listalle lis\\xE4t\\xE4\\xE4n kaksi arvoa, mink\\xE4 j\\xE4lkeen yritet\\xE4\\xE4n tulostaa arvo paikasta 2.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class WordListExample \\n{\\n  public static void Main(string[] args) \\n  {\\n  public static void Main(string[] args) \\n  {\\n    // luodaan wordList, joka sis\\xE4lt\\xE4\\xE4 merkkijonoja\\n    List<string> wordList = new List<string>();\\n\\n    // lis\\xE4t\\xE4\\xE4n wordListiin kaksi arvoa\\n    wordList.Add(\\\"First\\\");\\n    wordList.Add(\\\"Second\\\");\\n\\n    // haetaan arvo paikasta 2 ja tulostetaan se\\n    Console.WriteLine(wordList[2]);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Koska numerointi (eli indeksointi) listan alkioissa alkaa nollasta, ohjelma ei l\\xF6yd\\xE4 mit\\xE4\\xE4n paikasta kaksi ja sen suoritus p\\xE4\\xE4ttyy virheeseen. Alla on kuvaus virheest\\xE4, jonka ohjelma aiheuttaa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Unhandled exception. System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection. (Parameter 'index')\\n   at System.Collections.Generic.List`1.get_Item(Int32 index)\\n   at WordListExample.Program.Main(String[] args) in ... Program.cs:line 13\\n\")), mdx(\"p\", null, \"Virheviesti kertoo tarkalleen, mit\\xE4 ja miss\\xE4 tapahtui. Ensin, virhe sis\\xE4lt\\xE4\\xE4 virheen tyypin, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentOutOfRangeException\"), \". Sen j\\xE4lkeen se antaa mahdollisen korjauksen. Seuraavaksi virhe sis\\xE4lt\\xE4\\xE4, mik\\xE4 metodi aiheutti virheen. T\\xE4ss\\xE4 tapauksessa se olisi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"get_Item(Int32 index)\"), \". Viimeiseksi virhe kertoo, mik\\xE4 osa koodistamme aiheutti virheen.\"), mdx(\"p\", null, \"Kuten huomataan, kun kutsutaan List\", \"[index]\", \", kutsutaan itse asiassa metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System.Collections.Generic.List`1.get_Item(Int32 index)\"), \", joka on monimutkaisempi metodi, joka on jo valmiiksi rakennettu. T\\xE4m\\xE4 on valmiiden metodien etu: meid\\xE4n ei tarvitse huolehtia siit\\xE4, miten toteutamme metodin datan hakemiseksi listasta, koska se on jo valmiina.\"), mdx(\"h2\", {\n    \"id\": \"numerointi-ja-indeksi\"\n  }, \"Numerointi ja indeksi\"), mdx(\"p\", null, \"Numerointi eli indeksointi alkaa aina nollasta. Listan ensimm\\xE4inen arvo sijaitsee indeksiss\\xE4 0, toinen indeksiss\\xE4 1, kolmas indeksiss\\xE4 2 jne. Ohjelmissa indeksi\\xE4 merkit\\xE4\\xE4n muuttujalla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"i\"), \".\"), mdx(\"p\", null, \"Esimerkiksi lista, joka sis\\xE4lt\\xE4\\xE4 kokonaislukuja, voisi sis\\xE4lt\\xE4\\xE4 seuraavaa:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"i\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"0\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"1\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"2\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"3\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"5\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"6\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"...\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"6\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"1\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"2\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"3\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  })))), mdx(\"p\", null, \"Yll\\xE4 olevassa listassa ensimm\\xE4inen arvo on 6 ja toinen arvo 1. Jos listaan lis\\xE4tt\\xE4isiin uusi arvo kutsumalla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Add-metodia\"), \" parametrinaan 8, luku 8 sijoittuisi indeksiin 6. Se olisi listan seitsem\\xE4s luku.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"numbers.Add(8);\\n\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"i\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"0\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"1\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"2\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"3\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"5\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"6\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"...\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"6\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"1\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"2\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"3\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"8\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  })))), mdx(\"p\", null, \"Samoin, kutsumalla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"numbers\", \"[index]\"), \" parametrilla 4, saataisiin listan viides luku.\"), mdx(\"p\", null, \"Jokaisella C#:n tarjoamalla ty\\xF6kalulla on nimi ja sijainti. Ohjelma voi k\\xE4ytt\\xE4\\xE4 ty\\xF6kalua sen j\\xE4lkeen, kun se on tuotu k\\xE4ytt\\xF6\\xF6n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using\"), \" -komennolla. Komennolle annetaan halutun luokan sijainti ja nimi. Esimerkiksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console\"), \" l\\xF6ytyy \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System\"), \" -luokasta, joten se tuodaan k\\xE4ytt\\xF6\\xF6n komennolla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using System;\"), \" koodin alussa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\npublic class Program \\n{  \\n    public static void Main(string[] args) \\n    {  \\n        Console.WriteLine(\\\"Console has been imported\\\");\\n    }  \\n}   \\n\")), mdx(\"p\", null, \"Sama p\\xE4tee yleens\\xE4 kaikkiin C#:n luokkiin. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console\"), \" kutsutaan suoraan j\\xE4rjestelm\\xE4st\\xE4, joten voimme tuoda sen k\\xE4ytt\\xF6\\xF6n pelk\\xE4ll\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using System;\"), \" -komennolla. Jos haluamme k\\xE4ytt\\xE4\\xE4 Listoja, joudumme menem\\xE4\\xE4n syvemm\\xE4lle ja k\\xE4ytt\\xE4m\\xE4\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using System.Collections.Generic;\"), \" -komennolla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\nusing System.Collections.Generic;\\n\\npublic class Program \\n{  \\n    public static void Main(string[] args) \\n    {  \\n        Console.WriteLine(\\\"Console has been imported\\\");\\n        List<string> list = new List<string>();\\n        list.Add(\\\"List can be now used, too.\\\");\\n    }  \\n}   \\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Nyky\\xE4\\xE4n C#:n k\\xE4\\xE4nt\\xE4j\\xE4 ei v\\xE4ltt\\xE4m\\xE4tt\\xE4 kaipaa yleisimpi\\xE4 tuonteja, kuten System tai System.Colletions.Generic. On kuitenkin t\\xE4rke\\xE4\\xE4 ymm\\xE4rt\\xE4\\xE4 n\\xE4iden olemassaolosta ja toiminnasta, jotta vanhempaa koodia lukiessa ei tule yll\\xE4tyksi\\xE4.\"), mdx(\"h2\", {\n    \"id\": \"listan-läpikäyminen\"\n  }, \"Listan l\\xE4pik\\xE4yminen\"), mdx(\"p\", null, \"Seuraavaksi tutustumme metodeihin, joilla voidaan k\\xE4yd\\xE4 l\\xE4pi listan arvoja. Aloittakaamme yksinkertaisesta esimerkist\\xE4, jossa tulostetaan lista, joka sis\\xE4lt\\xE4\\xE4 nelj\\xE4 arvoa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nConsole.WriteLine(teachers[0]);\\nConsole.WriteLine(teachers[1]);\\nConsole.WriteLine(teachers[2]);\\nConsole.WriteLine(teachers[3]);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Simon\\nSamuel\\nAnn\\nAnna\\n\")), mdx(\"p\", null, \"Esimerkki on huomattavan k\\xF6mpel\\xF6. Ent\\xE4 jos listassa olisi enemm\\xE4n arvoja? Tai v\\xE4hemm\\xE4n? Ent\\xE4 jos emme tied\\xE4, montako arvoa listalla on?\"), mdx(\"p\", null, \"Listan alkioiden m\\xE4\\xE4r\\xE4 saadaan selville listan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Count\"), \" -ominaisuudella, joka palauttaa listan sis\\xE4lt\\xE4mien alkioiden m\\xE4\\xE4r\\xE4n. M\\xE4\\xE4r\\xE4 on kokonaisluku (int), ja sit\\xE4 voidaan k\\xE4ytt\\xE4\\xE4 osana lauseketta tai tallentaa kokonaislukumuuttujaan my\\xF6hemp\\xE4\\xE4 k\\xE4ytt\\xF6\\xE4 varten.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> list = new List<string>();\\nConsole.WriteLine(\\\"Number of values on the list: \\\" + list.Count);\\n\\nlist.Add(\\\"First\\\");\\nConsole.WriteLine(\\\"Number of values on the list: \\\" + list.Count);\\n\\nint values = list.Count;\\n\\nlist.Add(\\\"Second\\\");\\nConsole.WriteLine(\\\"Number of values on the list: \\\" + values);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Number of values on the list: 0 \\nNumber of values on the list: 1 \\nNumber of values on the list: 1\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Count ei ole metodi vaan ominaisuus. T\\xE4m\\xE4 tarkoittaa, ett\\xE4 Countia kutsuttaessa ei lis\\xE4t\\xE4 sulkeita loppuun!\"), mdx(\"p\", null, \"Tehd\\xE4\\xE4n ohjelmastamme uusi versio joka tulostaa jokaisen arvon listalta. T\\xE4ss\\xE4 v\\xE4liversiossa k\\xE4yt\\xE4mme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"index\"), \" -muuttujaa pit\\xE4m\\xE4\\xE4n kirjaa siit\\xE4, mik\\xE4 paikka tulostetaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nint index = 0;\\n\\nif (index < teachers.Count) \\n{\\n  Console.WriteLine(teachers[index]); // index = 0\\n  index = index + 1; // index = 1\\n}\\n\\nif (index < teachers.Count) \\n{\\n  Console.WriteLine(teachers[index]); // index = 1\\n  index = index + 1; // index = 2\\n}\\n\\nif (index < teachers.Count) \\n{\\n  Console.WriteLine(teachers[index]); // index = 2\\n  index = index + 1; // index = 3\\n}\\n\\nif (index < teachers.Count) \\n{\\n  Console.WriteLine(teachers[index]); // index = 3\\n  index = index + 1; // index = 4\\n}\\n\\nif (index < index.Count) \\n{\\n  // t\\xE4t\\xE4 ei suoriteta sill\\xE4 index = 4 ja teachers.Count = 4\\n  Console.WriteLine(teachers[index]);\\n  index = index + 1;\\n}\\n\")), mdx(\"p\", null, \"Huomaamme, ett\\xE4 yll\\xE4 olevassa koodissa on paljon toistoa.\"), mdx(\"p\", null, \"Voimme muuttaa if-lauseet while-silmukoiksi, jotka toistuvat niin kauan kuin ehto index < teachers.Count pit\\xE4\\xE4 paikkansa (eli muuttujan index arvo ei kasva liian suureksi).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nint index = 0;\\n// Toista niin kauan kuin muuttujan `index`\\n// arvo on pienempi kuin teachers-listan koko\\nwhile (index < teachers.Count) \\n{\\n  Console.WriteLine(teachers[index]);\\n  index = index + 1;\\n}\\n\")), mdx(\"p\", null, \"Nyt tulostus toimii riippumatta siit\\xE4, kuinka monta alkiota listalla on.\"), mdx(\"p\", null, \"For-silmukka on eritt\\xE4in k\\xE4tev\\xE4 t\\xE4ss\\xE4. Voimme muuttaa yll\\xE4 olevan silmukan for-silmukaksi, jonka j\\xE4lkeen ohjelma n\\xE4ytt\\xE4\\xE4 t\\xE4lt\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nfor (int index = 0; index < teachers.Count; index++) \\n{\\n    Console.WriteLine(teachers[index]);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Simon\\nSamuel\\nAnn\\nAnna\\n\")), mdx(\"p\", null, \"Indeksin muuttuja for-silmukassa on tyypillisesti nimetty \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"i\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"for (int i = 0; i < teachers.Count; i++) \\n{\\n    Console.WriteLine(teachers[index]);\\n}\\n\")), mdx(\"p\", null, \"Mietit\\xE4\\xE4n tilannetta jossa haluamme k\\xE4sitell\\xE4 listaa, joka sis\\xE4lt\\xE4\\xE4 kokonaislukuja. Toiminnallisuus on pitk\\xE4lti sama kuin edellisess\\xE4 esimerkiss\\xE4. Suurin ero on listan alustamisessa -- listan sis\\xE4lt\\xE4m\\xE4n arvon tyyppi m\\xE4\\xE4ritell\\xE4\\xE4n int:ksi, ja tulostettava arvo tallennetaan muuttujaan nimelt\\xE4 number ennen tulostamista.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\n\\nnumbers.Add(1);\\nnumbers.Add(2);\\nnumbers.Add(3);\\nnumbers.Add(4);\\n\\nfor (int i = 0; i < numbers.Count; i++) \\n{\\n    int number = numbers[i];\\n    Console.WriteLine(number);\\n    // vaihtoehtoisesti: Console.WriteLine(numbers[i]);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n3\\n4\\n\")), mdx(\"p\", null, \"Numeroiden tulostaminen p\\xE4invastaisessa j\\xE4jestyksess\\xE4 olisi my\\xF6s suoraviivaista.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\n\\nnumbers.Add(1);\\nnumbers.Add(2);\\nnumbers.Add(3);\\nnumbers.Add(4);\\n\\nint index = numbers.Count - 1;\\nwhile (index >= 0)\\n{\\n  int number = numbers[index];\\n  Console.WriteLine(number);\\n  index = index - 1;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"4\\n3\\n2\\n1\\n\")), mdx(\"p\", null, \"Kokeile toteuttaa edellinen esimerkki for-silmukalla!\"), mdx(\"h2\", {\n    \"id\": \"listan-iterointi-for-each--silmukalla\"\n  }, \"Listan iterointi For-Each -silmukalla\"), mdx(\"p\", null, \"Jos ei ole tarvetta pit\\xE4\\xE4 kirjaa indeksist\\xE4, jolla ollaan menossa listan arvoja l\\xE4pi k\\xE4ydess\\xE4, voidaan k\\xE4ytt\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"for-each\"), \" -silmukkaa. Se eroaa edellisist\\xE4 silmukoista siin\\xE4, ett\\xE4 siin\\xE4 ei ole erillist\\xE4 ehtoa toistolle tai inkrementaatiolle.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nforeach (string teacher in teachers)\\n{\\n  Console.WriteLine(teacher);\\n}\\n\")), mdx(\"p\", null, \"K\\xE4yt\\xE4nn\\xF6ss\\xE4, for-each -silmukka k\\xE4tkee osan for-silmukosta, jota harjoittelimme aiemmin. For-each -silmukka n\\xE4ytt\\xE4isi t\\xE4lt\\xE4, jos se toteutettaisiin for-silmukkana:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nfor (int i = 0; i < teachers.Count; i++) \\n{\\n    string teacher = teachers[i];\\n    Console.WriteLine(teacher);\\n}\\n\")), mdx(\"p\", null, \"K\\xE4yt\\xE4nn\\xF6ss\\xE4 for-each -silmukka tarkastelee listan arvoja yksi kerrallaan. Lausekkeessa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"foreach (muuttujaTyyppi muuttujaNimi in listanNimi)\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"muuttujaTyyppi\"), \" on listan elementin tyyppi, ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"muuttujaNimi\"), \" on muuttuja, joka k\\xE4ytet\\xE4\\xE4n listan arvon tallentamiseen, kun k\\xE4yd\\xE4\\xE4n sit\\xE4 l\\xE4pi.\"), mdx(\"h2\", {\n    \"id\": \"listasta-poistaminen-ja-arvon-olemassaolon-tarkistaminen\"\n  }, \"Listasta poistaminen ja arvon olemassaolon tarkistaminen\"), mdx(\"p\", null, \"Listan metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"RemoveAt(index)\"), \" poistaa parametrina annetussa indeksiss\\xE4 olevan arvon. Parametrina annetaan kokonaisluku.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// luo lista merkkijonoja varten\\nList<string> list = new List<string>();\\n\\n// lis\\xE4\\xE4 listaan kolme arvoa\\nlist.Add(\\\"First\\\");\\nlist.Add(\\\"Second\\\");\\nlist.Add(\\\"Third\\\");\\n\\n// poista arvo indeksist\\xE4 1\\nlist.RemoveAt(1);\\n\\n// hae arvot indekseist\\xE4 0 ja 1 ja tulosta ne\\nConsole.WriteLine(list[0]);\\nConsole.WriteLine(list[1]);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First\\nThird\\n\")), mdx(\"p\", null, \"Voimme my\\xF6s k\\xE4ytt\\xE4\\xE4 metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Remove\"), \", jos tied\\xE4mme poistettavan arvon:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// luo lista merkkijonoja varten\\nList<string> list = new List<string>();\\n\\n// lis\\xE4\\xE4 listaan kolme arvoa\\nlist.Add(\\\"First\\\");\\nlist.Add(\\\"Second\\\");\\nlist.Add(\\\"Third\\\");\\n\\n// poista arvo jonka sis\\xE4lt\\xF6 on \\\"Second\\\"\\nlist.Remove(\\\"Second\\\");\\n\\n// hae arvot indekseist\\xE4 0 ja 1 ja tulosta ne\\nConsole.WriteLine(list[0]);\\nConsole.WriteLine(list[1]);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First\\nThird\\n\")), mdx(\"p\", null, \"Metodi toimii t\\xE4sm\\xE4lleen samoin numeroilla, joten ole varovainen mit\\xE4 metodia k\\xE4yt\\xE4t!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// luo lista kokonaislukuja varten\\nList<int> list = new List<int>();\\n\\n// lis\\xE4\\xE4 listaan kolme arvoa\\nlist.Add(1);\\nlist.Add(3);\\nlist.Add(2);\\n\\n// poista arvo indeksist\\xE4 1\\nlist.RemoveAt(1);\\n\\n// hae arvot indekseist\\xE4 0 ja 1 ja tulosta ne\\nConsole.WriteLine(list[0]);\\nConsole.WriteLine(list[1]);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// luo lista kokonaislukuja varten\\nList<int> list = new List<int>();\\n\\n// lis\\xE4\\xE4 listaan kolme arvoa\\nlist.Add(1);\\nlist.Add(3);\\nlist.Add(2);\\n\\n// poista arvolla\\nlist.Remove(1);\\n\\n// hae arvot indekseist\\xE4 0 ja 1 ja tulosta ne\\nConsole.WriteLine(list[0]);\\nConsole.WriteLine(list[1]);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"3\\n2\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Metodi Remove poistaa ensimm\\xE4isen osuman jonka se l\\xF6yt\\xE4\\xE4. Eli jos listassasi on monta alkiota samalla arvolla, vain ensimm\\xE4inen poistetaan!\"), mdx(\"p\", null, \"Listan metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Contains\"), \" voidaan k\\xE4ytt\\xE4\\xE4 tarkistamaan arvon olemassaoloa listassa. Metodi saa parametrinaan arvon, jota etsit\\xE4\\xE4n, ja se palauttaa boolean-tyyppisen arvon (True tai False), joka kertoo, l\\xF6ytyik\\xF6 arvo listasta vai ei.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// luo lista merkkijonoja varten\\nList<string> list = new List<string>();\\n\\n// lis\\xE4\\xE4 listaan kolme arvoa\\nlist.Add(\\\"First\\\");\\nlist.Add(\\\"Second\\\");\\nlist.Add(\\\"Third\\\");\\n\\nConsole.WriteLine(\\\"Can we find First: \\\" + list.Contains(\\\"First\\\"));\\n\\n\\nif (list.Contains(\\\"Second\\\"))\\n{\\n  Console.WriteLine(\\\"We found second!\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Can we find First: True\\nWe found second!\\n\")), mdx(\"h2\", {\n    \"id\": \"lista-metodin-parametrina\"\n  }, \"Lista metodin parametrina\"), mdx(\"p\", null, \"Kuten muitakin muuttujia, my\\xF6s listoja voidaan k\\xE4ytt\\xE4\\xE4 metodien parametreina. Kun metodi m\\xE4\\xE4ritell\\xE4\\xE4n ottamaan listan parametrina, parametrin tyyppi m\\xE4\\xE4ritell\\xE4\\xE4n listan tyypiksi ja listassa olevien arvojen tyypiksi. Alla olevassa esimerkiss\\xE4 metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Print\"), \" tulostaa listan arvot yksi kerrallaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Print(List<String> list)\\n{\\n  foreach (string value in list)\\n  {\\n    Console.WriteLine(value);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Olemme jo tottuneet metodeihin, ja se toimii samalla tavalla t\\xE4ss\\xE4kin. Alla olevassa esimerkiss\\xE4 k\\xE4yt\\xE4mme yll\\xE4 m\\xE4\\xE4ritelty\\xE4 metodia.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> strings = new List<string>();\\n\\nstrings.Add(\\\"First\\\");\\nstrings.Add(\\\"Second\\\");\\nstrings.Add(\\\"Third\\\");\\n\\nPrint(strings);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First\\nSecond\\nThird\\n\")), mdx(\"p\", null, \"Valittu parametri metodin m\\xE4\\xE4rittelyss\\xE4 ei ole riippuvainen listasta, joka annetaan parametrina metodin kutsussa. Ohjelmassa, joka kutsuu Print-metodia, listamuuttujan nimi on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"strings\"), \", mutta metodissa Print muuttujan nimi on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"list\"), \" -- muuttujan nimi, joka tallentaa listan, voisi olla my\\xF6s \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"printables\"), \".\"), mdx(\"p\", null, \"On my\\xF6s mahdollista m\\xE4\\xE4ritell\\xE4 useita muuttujia metodin parametreiksi. Esimerkiss\\xE4 metodi saa kaksi parametria: listan numeroita ja raja-arvon. Metodi tulostaa kaikki listan luvut, jotka ovat pienempi\\xE4 kuin toinen parametri.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void PrintSmallerThan(List<int> numbers, int threshold) \\n{\\n  foreach(int number in numbers)\\n  {\\n    if (number < threshold) \\n    {\\n      Console.WriteLine(number);\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"T\\xE4ss\\xE4 n\\xE4emme sen toiminnassa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> list = new List<int>();\\n\\nlist.Add(1);\\nlist.Add(2);\\nlist.Add(3);\\nlist.Add(2);\\nlist.Add(1);\\n\\nPrintSmallerThan(list, 3);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n2\\n1\\n\")), mdx(\"p\", null, \"Kuten aiemminkin, metodi voi my\\xF6s palauttaa arvon. Metodille, joka palauttaa arvon, m\\xE4\\xE4ritell\\xE4\\xE4n palautettavan arvon tyypin kohdalle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void\"), \" -sanan sijaan, ja itse palauttaminen tapahtuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return\"), \" -k\\xE4skyll\\xE4. Alla oleva metodi palauttaa listan Countin.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Count(List<string> list)\\n{\\n  return list.Count;\\n}\\n\")), mdx(\"p\", null, \"Voit my\\xF6s m\\xE4\\xE4ritt\\xE4\\xE4 omia muuttujia metodeille. Alla oleva metodi laskee listan arvojen keskiarvon. Jos lista on tyhj\\xE4, se palauttaa luvun -1.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static double Average(List<int> numbers) \\n{\\n  if (numbers.Count == 0) \\n  {\\n      return -1.0;\\n  }\\n\\n  int sum = 0;\\n  foreach(int number in numbers) \\n  {\\n      sum = sum + number;\\n  }\\n\\n  return 1.0 * sum / numbers.Count;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"listan-kopioiminen-metodin-parametriksi\"\n  }, \"Listan kopioiminen metodin parametriksi\"), mdx(\"p\", null, \"Aiemmin olemme k\\xE4ytt\\xE4neet kokonaislukuja, liukulukuja jne. metodien parametreina. Kun muuttujia, kuten int, k\\xE4ytet\\xE4\\xE4n metodin parametreina, muuttujan arvo kopioituu metodin k\\xE4ytt\\xF6\\xF6n. Sama tapahtuu, kun parametrina on lista.\"), mdx(\"p\", null, \"Listat, kuten k\\xE4yt\\xE4nn\\xF6ss\\xE4 kaikki muuttujat jotka voivat tallentaa suuria m\\xE4\\xE4ri\\xE4 tietoa, ovat viittaus-tyyppisi\\xE4 muuttujia. T\\xE4m\\xE4 tarkoittaa, ett\\xE4 muuttujan arvo on viittaus, joka osoittaa paikkaan, jossa tieto sijaitsee.\"), mdx(\"p\", null, \"Kun lista (tai mik\\xE4 tahansa viittaus-tyyppinen muuttuja) kopioidaan metodin k\\xE4ytt\\xF6\\xF6n, metodi saa listan arvon, eli viittauksen. T\\xE4m\\xE4 tarkoittaa, ett\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"metodi saa viittauksen muuttujan todelliseen arvoon\"), \". Metodi voi muuttaa alkuper\\xE4isen muuttujan arvoa. K\\xE4yt\\xE4nn\\xF6ss\\xE4 lista, joka annetaan metodin parametrina, on sama lista, jota k\\xE4ytet\\xE4\\xE4n ohjelmassa, joka kutsuu metodia.\"), mdx(\"p\", null, \"Katsotaan t\\xE4t\\xE4 nopeasti seuraavassa metodissa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void RemoveFirst(List<int> numbers)\\n{\\nif (numbers.Count == 0)\\n{\\nreturn;\\n}\\nnumbers.RemoveAt(0);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\nnumbers.Add(2);\\nnumbers.Add(6);\\nnumbers.Add(-1);\\n\\nConsole.WriteLine(\\\"First print: \\\");\\nnumbers.ForEach(Console.WriteLine);\\n\\nRemoveFirst(numbers);\\n\\nConsole.WriteLine(\\\"Second print: \\\");\\nnumbers.ForEach(Console.WriteLine);\\n\\nRemoveFirst(numbers);\\nRemoveFirst(numbers);\\nRemoveFirst(numbers);\\n\\nConsole.WriteLine(\\\"Third print: \\\");\\nnumbers.ForEach(Console.WriteLine); // Lyhyempi tapa tehd\\xE4 listan forEach\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First print: \\n3\\n2\\n6\\n-1\\nSecond print: \\n2\\n6\\n-1\\nThird print: \\n\")), mdx(\"p\", null, \"Kuten n\\xE4kyy, metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"RemoveFirst\"), \" vaikuttaa suoraan listaan, joka annetaan parametrina. \"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Sen sijaan ett\\xE4 k\\xE4ytt\\xE4isimme Console.WriteLine(numbers) saadaksemme arvot listasta, k\\xE4yt\\xE4mme annotaatiota numbers.ForEach(Console.WriteLine);\"), mdx(\"h2\", {\n    \"id\": \"yhteenveto-listan-metodeista-ja-ominaisuuksista\"\n  }, \"Yhteenveto listan metodeista ja ominaisuuksista\"), mdx(\"p\", null, \"L\\xF6yd\\xE4t kaiken mahdollisen tiedon \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-7.0\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Listoista t\\xE4\\xE4lt\\xE4\")), \". Suurimman osan ajasta emme tarvitse kaikkea t\\xE4t\\xE4 tietoa, vaan valikoidun osan siit\\xE4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Listalle lis\\xE4\\xE4minen tapahtuu \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Add\"), \" -metodilla, joka saa parametrina lis\\xE4tt\\xE4v\\xE4n arvon.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Listan alkioiden m\\xE4\\xE4r\\xE4n saa selville \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Count\"), \" -ominaisuudella, joka palauttaa kokonaisluvun.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nint amount = numbers.Count;\\nConsole.WriteLine(\\\"Amount of integers in numbers: \\\" + amount);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Voit hakea arvon tietyst\\xE4 indeksist\\xE4 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"list\", \"[index]\"), \" -lausekkeella, jolle annetaan haluttu indeksi parametrina.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\nConsole.WriteLine(numbers[0]);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Alkion poistaminen tehd\\xE4\\xE4n joko \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Remove\"), \" tai \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"RemoveAt\"), \" -metodilla, riippuen siit\\xE4, poistetaanko arvolla vai indeksill\\xE4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> list = new List<string>();\\nlist.Add(\\\"First\\\");\\nlist.Add(\\\"Second\\\");\\nlist.Add(\\\"Third\\\");\\nlist.RemoveAt(0);\\nlist.Remove(\\\"Third\\\");\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tarkistaaksemme l\\xF6ytyyk\\xF6 arvo listalta, k\\xE4yt\\xE4mme \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Contains\"), \" -metodia, joka saa parametrina arvon, jota etsit\\xE4\\xE4n. Metodi palauttaa boolean-arvon.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> list = new List<string>();\\nlist.Add(\\\"First\\\");\\nlist.Contains(\\\"First\\\");\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Listan iteroimiseen voidaan k\\xE4ytt\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"forEach\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\nnumbers.Add(2);\\n\\nnumbers.ForEach(Console.WriteLine);\\n\")), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Exercise, {\n    title: '001 Third from list',\n    mdxType: \"Exercise\"\n  }, \"Teht\\xE4v\\xE4ss\\xE4 on pohja ohjelmalle, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 merkkijonoja ja lis\\xE4\\xE4 ne listalle. Lukeminen lopetetaan kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 tyhj\\xE4n merkkijonon. Ohjelma tulostaa listan ensimm\\xE4isen alkion.\", mdx(\"p\", null, \"Teht\\xE4v\\xE4n\\xE4si on muokata ohjelmaa siten, ett\\xE4 tulostetaan ensimm\\xE4isen alkion sijaan kolmas alkio. Muista, ett\\xE4 ohjelmoijat aloittavat laskemisen nollasta! Ohjelma saa toimia v\\xE4\\xE4rin, jos listalla on v\\xE4hemm\\xE4n kuin kolme alkiota, joten sinun ei tarvitse varautua sellaiseen tilanteeseen ollenkaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Tom \\n> Emma \\n> Alex \\n> Mary\\n>\\nAlex\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Emma \\n> Alex \\n> Mary\\n>\\n\\nMary\\n\"))), mdx(Exercise, {\n    title: '002 Sum of second and third',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Ohjelmapohjassa on ohjelma, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja ja lis\\xE4\\xE4 ne listalle. Lukeminen lopetetaan kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 luvun 0. Ohjelma tulostaa listan ensimm\\xE4isen arvon.\"), mdx(\"p\", null, \"Muokkaa ohjelmaa siten, ett\\xE4 tulostetaan toisen ja kolmannen luvun summa.  Ohjelma saa toimia v\\xE4\\xE4rin, jos listalla on v\\xE4hemm\\xE4n kuin kolme alkiota, joten sinun ei tarvitse varautua sellaiseen tilanteeseen ollenkaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 1 \\n> 3 \\n> 5 \\n> 7 \\n> 0 \\n8\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 2 \\n> 3 \\n> 4 \\n> 0 \\n7\\n\"))), mdx(Exercise, {\n    title: '003 Exception',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on ohjelma joka k\\xE4ytt\\xE4\\xE4 listaa. Muokkaa sit\\xE4 siten, ett\\xE4 ohjelma aiheuttaa poikkeuksen \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ArgumentOutOfRangeException\"), \" aina kun sit\\xE4 suoritetaan. K\\xE4ytt\\xE4j\\xE4n ei pit\\xE4isi antaa sy\\xF6tett\\xE4 ohjelmalle (esim. kirjoittamalla jotain n\\xE4pp\\xE4imist\\xF6ll\\xE4).\")), mdx(Exercise, {\n    title: '004 Counting names',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on ohjelma joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 merkkijonoja ja lis\\xE4\\xE4 ne listalle. Muokkaa sen toimintaa siten, ett\\xE4 lopettaessaan lukemisen (antamalla tyhj\\xE4n sy\\xF6tteen), ohjelma tulostaa listalla olevien alkioiden m\\xE4\\xE4r\\xE4n.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Tom \\n> Emma \\n> Alex \\n> Mary\\n>\\nIn total: 4\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Juno \\n> Elizabeth \\n> Mason \\n> Irene\\n> Olivia\\n> Liam\\n> Ida\\n> Christopher\\n> Mark\\n> Sylvester\\n> Oscar\\n>\\nIn total: 11\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Muista k\\xE4ytt\\xE4\\xE4 listan Count-ominaisuutta.\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Seuraavien teht\\xE4vien tarkoituksena on oppia k\\xE4ytt\\xE4m\\xE4\\xE4n listoja ja indeksej\\xE4. Vaikka teht\\xE4v\\xE4t voisi tehd\\xE4 ilman listoja, keskity harjoittelemaan listojen k\\xE4ytt\\xF6\\xE4. Teht\\xE4vien toiminnallisuus on toteutettava sy\\xF6tteiden lukemisen j\\xE4lkeen.\"), mdx(Exercise, {\n    title: '005 Last from list',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on ohjelma, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 merkkijonoja ja lis\\xE4\\xE4 ne listalle. Lukeminen lopetetaan kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 tyhj\\xE4n merkkijonon.\"), mdx(\"p\", null, \"Teht\\xE4v\\xE4n\\xE4si on muokata ohjelmaa siten, ett\\xE4 tulostetaan viimeisen\\xE4 luettu merkkijono. Tulosta arvo lukemalla listan viimeisen alkion arvo. Count auttaa t\\xE4ss\\xE4. Sinun ei tarvitse huomioida tyhj\\xE4\\xE4 listaa, voit olettaa ett\\xE4 k\\xE4ytt\\xE4j\\xE4 antaa ainakin yhden sy\\xF6tteen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Tom \\n> Emma \\n> Alex \\n> Mary\\n>\\nMary\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Juno \\n> Elizabeth \\n> Mason \\n> Irene\\n> Olivia\\n> Liam\\n> Ida\\n> Christopher\\n> Mark\\n> Sylvester\\n> Oscar\\n>\\nOscar\\n\"))), mdx(Exercise, {\n    title: '006 First and last',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on ohjelma, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 merkkijonoja ja lis\\xE4\\xE4 ne listalle. Lukeminen lopetetaan kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 tyhj\\xE4n merkkijonon.\"), mdx(\"p\", null, \"Muokkaa ohjelmaa siten, ett\\xE4 tulostetaan ensimm\\xE4inen ja viimeinen luettu merkkijono. Voit olettaa ett\\xE4 k\\xE4ytt\\xE4j\\xE4 antaa ainakin kaksi sy\\xF6tett\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Tom \\n> Emma \\n> Alex \\n> Mary\\n>\\nTom\\nMary\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Juno \\n> Elizabeth \\n> Mason \\n> Irene\\n> Olivia\\n> Liam\\n> Ida\\n> Christopher\\n> Mark\\n> Sylvester\\n> Oscar\\n>\\nJuno\\nOscar\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Tom \\n> Mary\\n>\\nTom\\nMary\\n\"))), mdx(Exercise, {\n    title: '007 Numbers from list',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohja sis\\xE4lt\\xE4\\xE4 ohjelman, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja ja lis\\xE4\\xE4 ne listalle. Lukeminen lopetetaan kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 luvun -1.\"), mdx(\"p\", null, \"Laajenna toiminnallisuutta siten, ett\\xE4 ohjelma tulostaa kaikki luetut luvut. Lukua, joka k\\xE4ytet\\xE4\\xE4n lopettamiseen, ei tulosteta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 2\\n> 8\\n> 11\\n> -1 \\n72\\n2\\n8\\n11\\n\"))), mdx(Exercise, {\n    title: '008 Numbers from and to',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohja sis\\xE4lt\\xE4\\xE4 ohjelman, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja ja lis\\xE4\\xE4 ne listalle. Lukeminen lopetetaan kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 luvun -1.\"), mdx(\"p\", null, \"Laajenna toiminnallisuutta siten, ett\\xE4 k\\xE4ytt\\xE4j\\xE4lt\\xE4 kysyt\\xE4\\xE4n alku- ja loppuarvot kun numeroiden kysyminen on lopetettu. T\\xE4m\\xE4n j\\xE4lkeen ohjelma tulostaa kaikki luetut luvut, jotka ovat annetulla v\\xE4lill\\xE4 (molemmat rajat mukaan lukien). Voit olettaa, ett\\xE4 k\\xE4ytt\\xE4j\\xE4 antaa v\\xE4hint\\xE4\\xE4n yhden luvun, joka on annetulla v\\xE4lill\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 2\\n> 8\\n> 11\\n> -1 \\nFrom where?\\n> 1\\nWhere to?\\n> 9 \\n2 \\n8\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 8\\n> 2\\n> 11\\n> -1 \\nFrom where?\\n> 0 \\nWhere to?\\n> 20  \\n8\\n2\\n11 \\n\"))), mdx(Exercise, {\n    title: '009 Greatest number',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohja sis\\xE4lt\\xE4\\xE4 ohjelman, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja ja lis\\xE4\\xE4 ne listalle. Lukeminen lopetetaan kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 luvun -1.\"), mdx(\"p\", null, \"Jatketaan ohjelman kehitt\\xE4mist\\xE4 siten, ett\\xE4 ohjelma tulostaa listalla olevista luvuista suurimman. Ohjelman tulisi toimia seuraavasti.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 2\\n> 8\\n> 93\\n> 11\\n> -1\\nThe greatest number: 93\\n\")), mdx(\"p\", null, \"Voit olettaa, ett\\xE4 k\\xE4ytt\\xE4j\\xE4 antaa ainakin yhden luvun, joka on suurempi kuin -1.\"), mdx(\"p\", null, \"Voit k\\xE4ytt\\xE4\\xE4 seuraavaa koodia inspiraationa. Se etsii listan pienimm\\xE4n luvun.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Oletetaan ett\\xE4 meill\\xE4 on lista kokonaislukuja\\n\\nint smallest = list[0];\\n\\nfor(int i = 0; i < list.Count; i++) {\\n    int number = list[i];\\n    if (smallest > number) {\\n        smallest = number;\\n    }\\n}\\n\\nConsole.WriteLine(\\\"The smallest number: \\\" + smallest);\\n\"))), mdx(Exercise, {\n    title: '010 Index',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohja sis\\xE4lt\\xE4\\xE4 ohjelman, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja ja lis\\xE4\\xE4 ne listalle. Lukeminen lopetetaan kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 luvun -1.\"), mdx(\"p\", null, \"Laajennetaan toiminnallisuutta siten, ett\\xE4 ohjelma kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 lukua. Ohjelma tulostaa listalla olevien lukujen indeksin, joka vastaa k\\xE4ytt\\xE4j\\xE4n antamaa lukua. Jos lukua ei l\\xF6ydy, ohjelma ei tulosta mit\\xE4\\xE4n.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Numero voi esiinty\\xE4 useamminkin kuin kerran\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72 \\n> 2 \\n> 8 \\n> 8 \\n> 11 \\n> -1\\nSearch for? \\n> 2 \\n2 is at index 1\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72 \\n> 2 \\n> 8 \\n> 8 \\n> 11 \\n> -1\\nSearch for? \\n> 8 \\n8 is at index 2\\n8 is at index 3\\n\"))), mdx(Exercise, {\n    title: '011 Smallest and index',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja ja lis\\xE4\\xE4 ne listalle. Lukeminen lopetetaan kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 luvun 9999. T\\xE4m\\xE4n j\\xE4lkeen ohjelma tulostaa listalla olevista luvuista pienimm\\xE4n sek\\xE4 kaikki indeksit, joissa pienin luku esiintyy. \"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Pienin numero voi esiinty\\xE4 useamminkin kuin kerran\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 2\\n> 8\\n> 8\\n> 11\\n> 9999\\nSmallest number: 2 \\nFound at index: 1\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 44\\n> 8\\n> 8\\n> 11\\n> 9999\\nSmallest number: 8 \\nFound at index: 2 \\nFound at index: 3\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Voit aiempia teht\\xE4vi\\xE4 inspiraationa, yhdist\\xE4m\\xE4ll\\xE4 niiden toiminnallisuutta. Etsi ensin pienin numero, sen j\\xE4lkeen sen kaikki indeksit.\")), mdx(Exercise, {\n    title: '012 Sum of list',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohja sis\\xE4lt\\xE4\\xE4 ohjelman, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukuja ja lis\\xE4\\xE4 ne listalle. Lukeminen lopetetaan kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 luvun -1.\"), mdx(\"p\", null, \"Muokkaa ohjelmaa siten, ett\\xE4 ohjelma tulostaa listalla olevien lukujen summan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 2\\n> 8\\n> 11\\n> -1\\nSum: 93\\n\"))), mdx(Exercise, {\n    title: '013 Finding names',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on ohjelma, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 merkkijonoja kunnes k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 tyhj\\xE4n merkkijonon. Lis\\xE4\\xE4 seuraava toiminnallisuus: ohjelma kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 viel\\xE4 yht\\xE4 merkkijonoa. Ohjelma kertoo k\\xE4ytt\\xE4j\\xE4lle, l\\xF6ytyik\\xF6 merkkijono listalta vai ei.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"> Tom\\n> Emma\\n> Alex\\n> Mary\\nSearch for?\\n> Mary\\nMary was found!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"> Tom\\n> Emma\\n> Alex\\n> Mary\\nSearch for?\\n> Logan\\nLogan was not found!\\n\"))), mdx(Exercise, {\n    title: '014 Numbers in range',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static void PrintNumbersInRange(List<int> numbers, int lowerLimit, int upperLimit)\"), \" teht\\xE4v\\xE4pohjaan. Metodi tulostaa listan luvut, joiden arvot ovat annetulla v\\xE4lill\\xE4 \", \"[lowerLimit, upperLimit]\", \". Muutama esimerkki metodin k\\xE4yt\\xF6st\\xE4 on annettu alla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\nnumbers.Add(2);\\nnumbers.Add(6);\\nnumbers.Add(-1);\\nnumbers.Add(5);\\nnumnbers.Add(1);\\n\\nConsole.WriteLine(\\\"The numbers in the range [0, 5]\\\");\\nPrintNumbersInRange(numbers, 0, 5);\\n\\nConsole.WriteLine(\\\"The numbers in the range [3, 10]\\\");\\nPrintNumbersInRange(numbers, 3, 10);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The numbers in the range [0, 5] \\n3 \\n2 \\n5 \\n1 \\nThe numbers in the range [3, 10] \\n3 \\n6 \\n5\\n\"))), mdx(Exercise, {\n    title: '015 Sum method',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static int Sum(List<int> numbers)\"), \" teht\\xE4v\\xE4pohjaan. Metodin tulisi palauttaa parametrina annetun listan lukujen summa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\nnumbers.Add(2);\\nnumbers.Add(6);\\nnumbers.Add(-1);\\nConsole.WriteLine(Sum(numbers));\\n\\nnumbers.Add(5);\\nnumbers.Add(1);\\nConsole.WriteLine(Sum(numbers));\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"10\\n16\\n\"))), mdx(Exercise, {\n    title: '016 Remove last method',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static void RemoveLast(List<string> strings)\"), \" teht\\xE4v\\xE4pohjaan. Metodin tulisi poistaa parametrina annetun listan viimeinen arvo. Jos lista on tyhj\\xE4, metodi ei tee mit\\xE4\\xE4n.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> strings = new List<string>();\\n\\nstrings.Add(\\\"First\\\");\\nstrings.Add(\\\"Second\\\");\\nstrings.Add(\\\"Third\\\");\\n\\n// Muista, t\\xE4ll\\xE4 tavoin voi tulostaa listan kaikkien alkioiden arvot\\nstrings.ForEach(Console.WriteLine);\\n\\nRemoveLast(strings);\\nRemoveLast(strings);\\n\\nstrings.ForEach(Console.WriteLine);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First\\nSecond\\nThird\\nFirst\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#listojen-käyttäminen-ja-luominen","title":"Listojen käyttäminen ja luominen"},{"url":"#listan-alkioiden-tyypin-määrittäminen","title":"Listan alkioiden tyypin määrittäminen"},{"url":"#arvojen-lisääminen-ja-hakeminen-tietystä-paikasta-listassa","title":"Arvojen lisääminen ja hakeminen tietystä paikasta Listassa"},{"url":"#tiedon-hakeminen-olemattomasta-kohdasta","title":"Tiedon hakeminen \"olemattomasta\" kohdasta"},{"url":"#numerointi-ja-indeksi","title":"Numerointi ja indeksi"},{"url":"#listan-läpikäyminen","title":"Listan läpikäyminen"},{"url":"#listan-iterointi-for-each--silmukalla","title":"Listan iterointi For-Each -silmukalla"},{"url":"#listasta-poistaminen-ja-arvon-olemassaolon-tarkistaminen","title":"Listasta poistaminen ja arvon olemassaolon tarkistaminen"},{"url":"#lista-metodin-parametrina","title":"Lista metodin parametrina"},{"url":"#listan-kopioiminen-metodin-parametriksi","title":"Listan kopioiminen metodin parametriksi"},{"url":"#yhteenveto-listan-metodeista-ja-ominaisuuksista","title":"Yhteenveto listan metodeista ja ominaisuuksista"}]},{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Listat"}}},"pageContext":{"id":"60be7aad-6d8b-5beb-a26a-6b5fef51bb07"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}