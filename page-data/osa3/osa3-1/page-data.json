{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa3/osa3-1",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Virheiden löytäminen\",\n  \"nav_order\": 1,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Olemme t\\xE4h\\xE4n menness\\xE4 harjoitelleet ohjelmointikielen perusteita, kuten muuttujia, ehtoja, silmukoita ja metodeja. Siirryt\\xE4\\xE4n seuraavaksi katsomaan ohjelmien ymm\\xE4rrett\\xE4vyyteen vaikuttavia tekij\\xF6it\\xE4 ja virheiden l\\xF6yt\\xE4mist\\xE4.\"), mdx(\"h2\", {\n    \"id\": \"ohjelmoija-on-sokea-omalle-koodilleen\"\n  }, \"Ohjelmoija on sokea omalle koodilleen\"), mdx(\"p\", null, \"Ohjelmoija tulee usein sokeaksi omalle koodilleen. Tutustutaan t\\xE4h\\xE4n ilmi\\xF6\\xF6n alla olevan videon avulla. Laske kuinka monta kertaa valkopaitaiset pelaajat sy\\xF6tt\\xE4v\\xE4t palloa toisilleen. Videolla on ohjeet englanniksi.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/watch?v=vJG698U2Mvo\"\n  }, mdx(\"img\", {\n    parentName: \"a\",\n    \"src\": \"https://i3.ytimg.com/vi/vJG698U2Mvo/maxresdefault.jpg\",\n    \"alt\": \"Link to video: https://www.youtube.com/watch?v=vJG698U2Mvo\"\n  }))), mdx(\"p\", null, \"Videolla tapahtuu my\\xF6s jotain muuta, joka saattaa j\\xE4\\xE4d\\xE4 huomaamatta. T\\xE4t\\xE4 ilmi\\xF6t\\xE4 kutsutaan havaintosokeudeksi, ja se selittyy sill\\xE4, ett\\xE4 keskittyess\\xE4mme johonkin tiettyyn teht\\xE4v\\xE4\\xE4n aivomme suodattavat pois teht\\xE4v\\xE4n kannalta ep\\xE4relevanttia tietoa. Emme kuitenkaan aina tied\\xE4 mik\\xE4 tieto on itse asiassa olennaista ja mik\\xE4 ei -- esimerkkin\\xE4 t\\xE4st\\xE4 on opiskelu. Tietyn opiskeluteht\\xE4v\\xE4n keskittyminen johonkin tiettyyn osa-alueeseen voi johtaa siihen, ett\\xE4 olennainen tieto suodattuu pois.\"), mdx(\"p\", null, \"Onneksi teht\\xE4v\\xE4\\xE4n keskittyminen v\\xE4hent\\xE4\\xE4 havaintosokeuden esiintymist\\xE4. Toisin sanoen harjoittelu kehitt\\xE4\\xE4 kyky\\xE4 erottaa olennainen ep\\xE4olennaisesta.\"), mdx(\"p\", null, \"Yksi tapa miten havaintosokeus ilmenee ohjelmoinnin harjoittelussa on se, ett\\xE4 keskittyminen tiettyyn osaan ohjelmaa saattaa johtaa siihen, ett\\xE4 huomiota ei kiinnitet\\xE4 n\\xE4enn\\xE4isesti oikealta vaikuttaviin, mutta virheellisiin osiin. Esimerkiksi ohjelman tulostuksen oikeellisuutta tarkastaessaan ohjelmoija saattaa keskitty\\xE4 tulostuslauseisiin ja erehty\\xE4 j\\xE4tt\\xE4m\\xE4\\xE4n huomiotta ohjelman logiikkaan liittyvi\\xE4 asioita.\"), mdx(\"p\", null, \"Samoin ohjelmoija voi keskitty\\xE4 ohjelman monimutkaisimpaan kohtaan jossa on silmukka, vaikka virhe on jossain aivan muualla. Esimerkkin\\xE4 t\\xE4st\\xE4 on alla oleva ohjelma, joka laskee k\\xE4ytt\\xE4j\\xE4n sy\\xF6tt\\xE4mien lukujen keskiarvon. Ohjelmassa on virhe, ja virhett\\xE4 etsiess\\xE4 silmukka on tyypillisesti ensimm\\xE4inen kohde. \"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Muista ALT + SHIFT + F, joka muotoilee koodin automaattisesti.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"\\nint values = 0;\\nint sum = 0;\\n\\nwhile (true)\\n{\\n  Console.WriteLine(\\\"Provide a value, a negative value ends the program\\\");\\n  int value = Convert.ToInt32(Console.ReadLine());\\n  if (value < 0)\\n  {\\n    break;\\n  }\\n\\n  values = values + 1;\\n  sum = sum + value;\\n}\\n\\nif (sum == 0)\\n{\\n  Console.WriteLine(\\\"The average of the values could not be calculated.\\\");\\n}\\nelse\\n{\\n  Console.WriteLine(\\\"Average of values: \\\" + (1.0 * sum / value));\\n}\\n\")), mdx(\"p\", null, \"Kysymys: Huomaatko mik\\xE4 koodissa on vialla? Vastaus on my\\xF6s sivun alalaidassa. \\xC4L\\xC4 HUIJAA, lue koko osa ensin!\"), mdx(\"p\", null, \"Havaintosokeus on jotain mit\\xE4 emme voi kokonaan eliminoida. Ohjelmoija voi kuitenkin v\\xE4hent\\xE4\\xE4 sen vaikutusta, ja yksi keino on pit\\xE4\\xE4 taukoja. Taukojen pit\\xE4minen vaatii, ett\\xE4 ty\\xF6 aloitetaan ajoissa. Koodikommentit, asioiden nime\\xE4minen oikein ja \\\"debuggaus\\\"-tulosteet ovat my\\xF6s esimerkkej\\xE4 asioista jotka auttavat.\"), mdx(\"h2\", {\n    \"id\": \"koodin-kommentointi\"\n  }, \"Koodin kommentointi\"), mdx(\"p\", null, \"Kommenteilla on monia tarkoituksia, ja yksi niist\\xE4 on selitt\\xE4\\xE4 koodin toimintaa itselleen virheit\\xE4 etsiess\\xE4. Alla on kuvattu melko yksinkertaisen ohjelman suoritus kommenttien avulla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/*\\nTulostaa luvut yhdest\\xE4 kymmeneen.\\nJokainen luku tulostetaan omalle rivilleen.\\n*/\\n\\n// luomme muuttujan nimelt\\xE4 value ja annamme sille arvon 10\\nint value = 10;\\n\\n// Silmukkaa suoritetaan kunnes\\n// muuttujan value arvo on pienempi tai yht\\xE4suuri kuin\\n// nolla. Suoritus ei lopu _v\\xE4litt\\xF6m\\xE4sti_ kun muuttujalle\\n// annetaan arvoksi nolla, vaan vasta kun silmukan ehto\\n// vaan vasta kun silmukan ehto tarkistetaan seuraavan kerran.\\n// T\\xE4m\\xE4 tapahtuu aina silmukan suorituksen j\\xE4lkeen.\\nwhile (value > 0) {\\n    // tulostamme muuttujan arvon ja uuden rivin\\n    Console.WriteLine(value);\\n    // v\\xE4henn\\xE4mme muuttujan arvoa yhdell\\xE4\\n    value = value - 1;\\n}\\n\")), mdx(\"p\", null, \"Kommenteilla ei ole vaikutusta ohjelman suoritukseen, eli ohjelma toimii samalla tavalla kommenttien kanssa kuin ilman niit\\xE4.\"), mdx(\"p\", null, \"Kommenttien tyyli yll\\xE4 olevassa esimerkiss\\xE4 on tarkoitettu oppimistarkoituksiin, mutta se on liian yksityiskohtainen oikeaan ohjelmointiin, jossa tavoitteena on, ett\\xE4 l\\xE4hdekoodi on itsess\\xE4\\xE4n dokumentoivaa. T\\xE4m\\xE4 tarkoittaa sit\\xE4, ett\\xE4 ohjelman toiminnallisuus pit\\xE4isi olla ilmeist\\xE4 luokkien, metodien ja muuttujien nimist\\xE4.\"), mdx(\"p\", null, \"Esimerkki voidaan my\\xF6s \\\"kommentoida pois\\\" kapseloimalla koodin sopivasti nimettyyn metodiin. Alla on kaksi esimerkki\\xE4 t\\xE4st\\xE4 -- toinen metodi on toista monik\\xE4ytt\\xF6isempi. Monik\\xE4ytt\\xF6isempi metodi olettaa kuitenkin, ett\\xE4 k\\xE4ytt\\xE4j\\xE4 tiet\\xE4\\xE4 kumpi parametreista on suurempi ja kumpi pienempi.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void PrintValuesFromTenToOne()\\n{\\n  int value = 10;\\n  while (value > 0)\\n  {\\n    Console.WriteLine(value);\\n    value = value - 1;\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void PrintValuesFromLargestToSmallest(int start, int end)\\n{\\n  while (start >= end) {\\n    Console.WriteLine(start);\\n    start = start - 1;\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"virheiden-etsintä-tulostus-debuggauksella-print-debugging\"\n  }, \"Virheiden etsint\\xE4 tulostus-debuggauksella (print debugging)\"), mdx(\"p\", null, \"Yksi tarpeellinen taito ohjelmoinnissa on kyky testata ja debugata eli etsi\\xE4 virheit\\xE4. Yksinkertaisin tapa etsi\\xE4 virheit\\xE4 on k\\xE4ytt\\xE4\\xE4 niin kutsuttua tulostus-debuggausta, joka k\\xE4yt\\xE4nn\\xF6ss\\xE4 tarkoittaa viestien lis\\xE4\\xE4mist\\xE4 koodin tiettyihin kohtiin. N\\xE4m\\xE4 viestit k\\xE4yt\\xE4nn\\xF6ss\\xE4 seuraavat ohjelman suoritusta, ja voivat sis\\xE4lt\\xE4\\xE4 my\\xF6s muuttujien arvoja.\"), mdx(\"p\", null, \"Tarkastellaan jo aiemmin tuttua ohjelmaa, joka laskee k\\xE4ytt\\xE4j\\xE4n antamien positiivisten lukujen keskiarvon.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"\\nint values = 0;\\nint sum = 0;\\n\\nwhile (true)\\n{\\n  Console.WriteLine(\\\"Provide a value, a negative value ends the program\\\");\\n  int value = Convert.ToInt32(Console.ReadLine());\\n  if (value < 0)\\n  {\\n    break;\\n  }\\n\\n  values = values + 1;\\n  sum = sum + value;\\n}\\n\\nif (sum == 0)\\n{\\n  Console.WriteLine(\\\"The average of the values could not be calculated.\\\");\\n}\\nelse\\n{\\n  Console.WriteLine(\\\"Average of values: \\\" + (1.0 * sum / value));\\n}\\n\")), mdx(\"p\", null, \"Jos koodissa olisi virhe, tulostus-debuggausta voisi k\\xE4ytt\\xE4\\xE4 ohjelman toiminnan selvitt\\xE4miseen lis\\xE4\\xE4m\\xE4ll\\xE4 tulostuslauseita oikeisiin paikkoihin. Alla olevassa esimerkiss\\xE4 on yksi mahdollinen tapa lis\\xE4t\\xE4 tulostuslauseita.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"\\nint values = 0;\\nint sum = 0;\\n\\nwhile (true)\\n{\\n  Console.WriteLine(\\\"-- values-muuttuja: \\\" + values + \\\", sum-muuttuja: \\\" + sum);\\n\\n  Console.WriteLine(\\\"Provide a value, a negative value ends the program\\\");\\n  int value = Convert.ToInt32(Console.ReadLine());\\n  if (value < 0)\\n  {\\n    Console.WriteLine(\\\"-- arvo oli negatiivinen, lopetetaan silmukka\\\");\\n    break;\\n  }\\n\\n  values = values + 1;\\n  sum = sum + value;\\n}\\n\\nConsole.WriteLine(\\\"-- silmukka loppui\\\");\\nConsole.WriteLine(\\\"-- values-muuttuja: \\\" + values + \\\", sum-muuttuja: \\\" + sum);\\n\\nif (sum == 0)\\n{\\n  Console.WriteLine(\\\"The average of the values could not be calculated.\\\");\\n}\\nelse\\n{\\n  Console.WriteLine(\\\"Average of values: \\\" + (1.0 * sum / value));\\n}\\n\")), mdx(\"p\", null, \"Kun ohjelma suoritetaan monta kertaa sopivilla sy\\xF6tteill\\xE4, piilotettu virhe l\\xF6ytyy usein. Sopivien sy\\xF6tteiden keksiminen on taito sin\\xE4ns\\xE4. On t\\xE4rke\\xE4\\xE4 testata niin sanotut kulma- ja reunatapaukset, eli tilanteet joissa ohjelman suoritus voisi olla poikkeuksellista. Esimerkkin\\xE4 t\\xE4st\\xE4 on tilanne, jossa k\\xE4ytt\\xE4j\\xE4 ei sy\\xF6t\\xE4 yht\\xE4\\xE4n hyv\\xE4ksytt\\xE4v\\xE4\\xE4 arvoa tai sy\\xF6tt\\xE4\\xE4 pelkki\\xE4 nollia tai hyvin suuria arvoja.\"), mdx(\"p\", null, \"VASTAUS:\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Viimeinen muuttuja koodissa on nimelt\\xE4\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"value\"), \", kun sen pit\\xE4isi olla nimelt\\xE4\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"values\"), \". Kutsuimme muuttujaa, joka oli m\\xE4\\xE4ritelty silmukan sis\\xE4ll\\xE4, emmek\\xE4 sit\\xE4 jota halusimme.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#ohjelmoija-on-sokea-omalle-koodilleen","title":"Ohjelmoija on sokea omalle koodilleen"},{"url":"#koodin-kommentointi","title":"Koodin kommentointi"},{"url":"#virheiden-etsintä-tulostus-debuggauksella-print-debugging","title":"Virheiden etsintä tulostus-debuggauksella (print debugging)"}]},"frontmatter":{"title":"Virheiden löytäminen"}}},"pageContext":{"id":"e8603092-855f-5bfb-80b1-8ec21675e213"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}