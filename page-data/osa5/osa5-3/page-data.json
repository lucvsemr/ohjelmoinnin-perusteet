{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa5/osa5-3",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Muuttujatyypit\",\n  \"nav_order\": 3,\n  \"hidden\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"On olemassa kahdentyyppisi\\xE4 muuttujia C#:ssa: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"arvomuuttujia\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"viittausmuuttujia\"), \". Arvomuuttujat sis\\xE4lt\\xE4v\\xE4t suoraan arvonsa, kun taas viittausmuuttujat sis\\xE4lt\\xE4v\\xE4t viittauksen arvoonsa, joka on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"olio\"), \" tai \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"objekti\"), \".\"), mdx(\"p\", null, \"Vittausmuuttujilla on mahdollista, ett\\xE4 kaksi muuttujaa viittaavat samaan objektiin, ja siten on mahdollista, ett\\xE4 toisen muuttujan operaatiot vaikuttavat toisen muuttujan viittaamaan objektiin.\"), mdx(\"p\", null, \"Arvomuuttujilla jokaisella muuttujalla on oma kopio datasta, eik\\xE4 toisen muuttujan operaatioilla ole mahdollista vaikuttaa toisen muuttujan arvoon.\"), mdx(\"p\", null, \"Ohjelmoijan n\\xE4k\\xF6kulmasta arvomuuttujan data on tallennettu muuttujan arvoksi, kun taas viittausmuuttujan data on viittaus dataan. Tutkitaan n\\xE4it\\xE4 eri tyyppej\\xE4 kahdella esimerkill\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 10;\\nConsole.WriteLine(number);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"10\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  public class Name\\n  {\\n    private string name;\\n\\n    public Name(string name)\\n    {\\n      this.name = name;\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"  Name john = new Name(\\\"John\\\");\\n  Console.WriteLine(john);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Exercise001.Name\\n\")), mdx(\"p\", null, \"Ensimm\\xE4isess\\xE4 esimerkiss\\xE4 luomme yksinkertaisen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int\"), \" muuttujan, ja siihen tallennetaan arvoksi numero 10. Kun v\\xE4lit\\xE4mme muuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \" metodille, tulostuu arvo 10. Toisessa esimerkiss\\xE4 luomme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"viittausmuuttujan\"), \" nimelt\\xE4 john. Kun kutsutaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Name\"), \" luokan konstruktoria, se tallettaa arvon muuttujan arvoksi. Kun tulostamme muuttujan, tulostuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Exercise001.Name\"), \". Mik\\xE4 on syyn\\xE4 t\\xE4h\\xE4n?\"), mdx(\"p\", null, \"Metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \" tulostaa muuttujan arvon. Arvomuuttujan arvo on konkreettinen, kun taas viittausmuuttujan arvo on viittaus. Viittausmuuttujan tapauksessa tulostetaan olion \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \" representaatio. Oletusarvoisesti \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Object.ToString\"), \" metodi tulostaa olion nimen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"namespace.ClassName\"), \", joten saamme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Exercise001.Name\"), \".\"), mdx(\"p\", null, \"Edellinen esimerkki on tapaus, jossa ohjelmoija ei ole muuttanut muuttujan oletustulostusta. Voit muuttaa oletustulostusta m\\xE4\\xE4rittelem\\xE4ll\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \" metodin kyseisen olion luokassa. Metodi kertoo, mit\\xE4 merkkijonoa tulostetaan, kun luokan instanssi tulostetaan. Alla olemme m\\xE4\\xE4ritelleet \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public override string ToString()\"), \" metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Name\"), \" luokassa: se palauttaa instanssimuuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \". Nyt kun tulostamme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Name\"), \" luokan instanssin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \" komennolla, tulostuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \" metodin palauttama merkkijono.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  public class Name\\n  {\\n    private string name;\\n\\n    public Name(string name)\\n    {\\n      this.name = name;\\n    }\\n\\n    public override string ToString() {\\n      return this.name;\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Name john = new Name(\\\"John\\\");\\nConsole.WriteLine(john);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"John\\n\")), mdx(\"h2\", {\n    \"id\": \"arvomuuttujat\"\n  }, \"Arvomuuttujat\"), mdx(\"p\", null, \"Arvomuuttuja on joko tietue (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"struct type\"), \") tai  numeroituva (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"enumeration type\"), \"). C# tarjoaa joukon esim\\xE4\\xE4riteltyj\\xE4 tietueita, joita kutsutaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"yksinkertaisiksi tyypeiksi\"), \". Yksinkertaiset tyypit tunnistetaan varattujen sanojen avulla.\"), mdx(\"p\", null, \"Tietyn tyyppinen muuttuja sis\\xE4lt\\xE4\\xE4 tyyppins\\xE4 instanssin. T\\xE4m\\xE4 eroaa viittausmuuttujasta, joka sis\\xE4lt\\xE4\\xE4 viittauksen tyypin instanssiin. Oletuksena arvo kopioidaan kun muuttuja alustetaan, parametri v\\xE4litet\\xE4\\xE4n metodille tai metodin paluuarvo palautetaan. Arvomuuttujan tapauksessa vastaava tyyppi instanssi kopioidaan.\"), mdx(\"p\", null, \"Mielenkiintoisimpia (ja meille t\\xE4rkeimpi\\xE4) ovat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"yksinkertaiset tyypit\"), \". Useimmat muuttujat, joita olemme k\\xE4sitelleet t\\xE4h\\xE4n menness\\xE4, ovat osa yksinkertaista tyyppi\\xE4: int, bool ja double ovat kaikki yksinkertaisia tyyppej\\xE4. Se tarkoittaa, ett\\xE4 ne ovat itse asiassa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"avainsanoja\"), \", jotka on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"varattu\"), \" edustamaan tiettyj\\xE4 tyyppej\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System namespacesta\"), \".\"), mdx(\"p\", null, \"Koska yksinkertaiset tyypit aliasoivat tietueen tyypin, jokaisella yksinkertaisella tyypill\\xE4 on j\\xE4seni\\xE4. Esimerkiksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int\"), \" sis\\xE4lt\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System.Int32\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System.Object\"), \" m\\xE4\\xE4rittelem\\xE4t j\\xE4senet, ja seuraavat lauseet ovat sallittuja:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int i = int.MaxValue;    // System.Int32.MaxValue vakio\\nstring s = i.ToString(); // System.Int32.ToString() instanssimetodi\\nstring t = 123.ToString(); // System.Int32.ToString() instanssimetodi\\n\")), mdx(\"p\", null, \"Toisinsanottuna, kaikki perusmuuttujat, joita olemme k\\xE4ytt\\xE4neet, ovat itse asiassa vain helpompia tapoja k\\xE4ytt\\xE4\\xE4 System:sta l\\xF6ytyvi\\xE4 metodeja.\"), mdx(\"p\", null, \"Arvomuuttujan alustaminen varaa tietyn kokoisen alueen tietokoneen muistista. Koko m\\xE4\\xE4r\\xE4ytyy muuttujan tyypin mukaan, ja muistipaikka on se paikka, johon muuttujan arvo tallennetaan. Alla olevassa esimerkiss\\xE4 luomme kolme muuttujaa. Jokaisella on oma muistipaikka, johon sille annettu arvo kopioidaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int first = 10;\\nint second = first;\\nint third = second;\\nConsole.WriteLine(first + \\\" \\\" + second + \\\" \\\" + third);\\nsecond = 5;\\nConsole.WriteLine(first + \\\" \\\" + second + \\\" \\\" + third);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"10 10 10\\n10 5 10\\n\")), mdx(\"p\", null, \"Muuttujan nimi kertoo muistipaikan, johon sen arvo on tallennettu. Kun muuttujalle annetaan arvo yht\\xE4suuruusmerkill\\xE4, oikeanpuoleinen arvo kopioidaan muuttujan muistipaikkaan. Esimerkiss\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int first = 10\"), \" varaa muistipaikan nimelt\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"first\"), \" ja kopioi siihen arvon 10. Vastaavasti \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int second = first\"), \" varaa muistipaikan nimelt\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"second\"), \" ja kopioi siihen arvon, joka on muistipaikassa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"first\"), \". Lopuksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int third = second\"), \" varaa muistipaikan nimelt\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"third\"), \" ja kopioi siihen arvon, joka on muistipaikassa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"second\"), \".\"), mdx(\"p\", null, \"Muuttujien arvot kopioidaan my\\xF6s metodikutsuissa. K\\xE4yt\\xE4nn\\xF6ss\\xE4 t\\xE4m\\xE4 tarkoittaa sit\\xE4, ett\\xE4 muuttujan arvoa, joka v\\xE4litet\\xE4\\xE4n metodin parametrina, ei muuteta metodissa, joka kutsuu toista metodia.\"), mdx(\"h2\", {\n    \"id\": \"viittausmuuttujat\"\n  }, \"Viittausmuuttujat\"), mdx(\"p\", null, \"C#:n viittaustyyppej\\xE4 ovat luokka (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"class\"), \"), rajapinta (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"interface\"), \"), taulukko (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"array\"), \") ja delegaatti (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"delegate\"), \").\"), mdx(\"p\", null, \"Viittautyyppisen muuttujan arvo on viittaus sentyyppiseen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"instanssiin\"), \", joka on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"olio\"), \" tai \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"objekti\"), \". Erityinen arvo \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"null\"), \" on yhteensopiva kaikkien viittaustyyppien kanssa ja ilmaisee instanssin puuttumista. Ohjelmoija voi my\\xF6s luoda omia muuttujatyyppej\\xE4 m\\xE4\\xE4rittelem\\xE4ll\\xE4 uusia luokkia. K\\xE4yt\\xE4nn\\xF6ss\\xE4 mik\\xE4 tahansa luokasta instansioitu olio on viittausmuuttuja.\"), mdx(\"p\", null, \"Tarkastellaan taas esimerkki\\xE4, jossa luomme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Name\"), \" luokan instanssin nimelt\\xE4 John.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Name john = new Name(\\\"John\\\");\\n\")), mdx(\"p\", null, \"Kutsu koostuu seuraavista osista:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kun uusi muuttuja luodaan, pit\\xE4\\xE4 ensin m\\xE4\\xE4ritt\\xE4\\xE4 muuttujan tyyppi. Alla esimerkiss\\xE4 m\\xE4\\xE4rit\\xE4mme muuttujan tyypiksi \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Name\"), \". Jotta ohjelma voisi suorittaa, pit\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Name\"), \" luokan olla saatavilla.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Name ...\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Muuttujan nimi pit\\xE4\\xE4 my\\xF6s m\\xE4\\xE4ritt\\xE4\\xE4. Voit my\\xF6hemmin k\\xE4ytt\\xE4\\xE4 muuttujaa viittaamaan sen arvoon. Alla esimerkiss\\xE4 muuttujan nimi on \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"john\"), \".\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Name john ...\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Voit tallettaa muuttujaan arvon. Voit luoda instanssin luokasta kutsumalla luokan konstruktoria, joka m\\xE4\\xE4ritt\\xE4\\xE4 instanssimuuttujien arvot sill\\xE4 hetkell\\xE4, kun olio luodaan. Alla oletamme luokan \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Name\"), \" konstruktorin ottavan merkkijonon parametrina.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"... new Name(\\\"John\\\");\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Konstruktorikutsu palauttaa viittauksen luotuun instanssiin. Yht\\xE4suuruusmerkki kertoo ohjelmalle, ett\\xE4 oikeanpuoleinen arvo talletetaan vasemmanpuolimmaiseen muuttujaan. Viittaus vastaluotuun muuttujaan, jonka konstruktorikutsu on palauttanut, kopioidaan muuttujan \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"john\"), \" arvoksi.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Name john = new Name(\\\"John\\\");\\n\")), mdx(\"p\", null, \"Suurin ero arvo- ja viittausmuuttujien v\\xE4lill\\xE4 on se, ett\\xE4 arvomuuttujat ovat (l\\xE4hes poikkeuksetta) muuttumattomia. Toisaalta viittausmuuttujien sis\\xE4ist\\xE4 tilaa voidaan tyypillisesti muuttaa. T\\xE4m\\xE4 ilmi\\xF6 selittyy sill\\xE4, ett\\xE4 arvomuuttujan arvo tallennetaan suoraan muuttujaan, kun taas viittausmuuttujan arvo on viittaus muuttujan dataan, eli muuttujan sis\\xE4iseen tilaan.\"), mdx(\"p\", null, \"Aritmeettiset operaatiot, kuten yhteen-, v\\xE4hennys- ja kertolasku, voidaan suorittaa arvomuuttujilla -- n\\xE4m\\xE4 operaatiot eiv\\xE4t muuta muuttujan alkuper\\xE4ist\\xE4 arvoa. Aritmeettiset lausekkeet luovat uusia arvoja, jotka tallennetaan muuttujiin tarvittaessa. Huomaa, ett\\xE4 viittausmuuttujien arvoja ei voida muuttaa n\\xE4ill\\xE4 aritmeettisill\\xE4 lausekkeilla.\"), mdx(\"p\", null, \"Viittausmuuttujan arvo, eli itse viittaus, osoittaa muistipaikkaan, jossa muuttujan data on tallennettuna. Oletetaan ett\\xE4 meill\\xE4 on luokka Person k\\xE4yt\\xF6ss\\xE4, ja se sis\\xE4lt\\xE4\\xE4 instanssimuuttujan age. Jos luokasta on luotu olio, voimme l\\xF6yt\\xE4\\xE4 age muuttujan seuraamalla olion viittausta. T\\xE4m\\xE4n age muuttujan arvoa voidaan muuttaa tarvittaessa.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/types\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Voit lukea lis\\xE4\\xE4 muuttujatyypeist\\xE4 t\\xE4\\xE4lt\\xE4\")), \". T\\xE4m\\xE4 tiedon kaninkolo on \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hyvin syv\\xE4\"), \" ja saattaa vaatia aikaa ymm\\xE4rt\\xE4\\xE4.\"), mdx(\"h2\", {\n    \"id\": \"arvomuuttuja-tai-viittausmuuttuja-metodin-parametrina\"\n  }, \"Arvomuuttuja tai viittausmuuttuja metodin parametrina\"), mdx(\"p\", null, \"Aiemmin totesimme, ett\\xE4 arvomuuttujan arvo on suoraan tallennettu muuttujaan, kun taas viittausmuuttujan arvo on viittaus muuttujan dataan. Totesimme my\\xF6s, ett\\xE4 yht\\xE4suuruusmerkki kertoo ohjelmalle, ett\\xE4 oikeanpuoleinen arvo kopioidaan vasemmalla olevaan muuttujaan.\"), mdx(\"p\", null, \"Samantapainen kopiointi tapahtuu kun metodia kutsutaan. Riippumatta siit\\xE4 onko muuttuja arvo- vai viittausmuuttuja, sen arvo kopioidaan metodille v\\xE4litett\\xE4ess\\xE4. Arvomuuttujan tapauksessa arvo kopioidaan suoraan, kun taas viittausmuuttujan tapauksessa viittaus kopioidaan.\"), mdx(\"p\", null, \"Katsotaan k\\xE4yt\\xE4nn\\xF6n esimerkki\\xE4. Oletetaan ett\\xE4 meill\\xE4 on seuraava \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \" luokka k\\xE4yt\\xF6ss\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  private string name;\\n  public int birthYear { get; set; }\\n\\n  public Person(string name)\\n  {\\n    this.name = name;\\n    this.birthYear = 1970;\\n  }\\n\\n  public override string ToString()\\n  {\\n    return this.name + \\\" (\\\" + this.birthYear + \\\")\\\";\\n  }\\n}\\n\")), mdx(\"p\", null, \"Katsotaan ohjelman toimintaa askel askeleelta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n\\n  Person first = new Person(\\\"First\\\");\\n\\n  Console.WriteLine(first);\\n  MakeYounger(first);\\n  Console.WriteLine(first);\\n\\n  Person second = first;\\n  MakeYounger(second);\\n\\n  Console.WriteLine(first);\\n}\\n\\npublic static void MakeYounger(Person person)\\n{\\n  person.birthYear++;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First (1970)\\nFirst (1971)\\nFirst (1972)\\n\")), mdx(\"p\", null, \"Ohjelman suoritus alkaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" metodin ensimm\\xE4iselt\\xE4 rivilt\\xE4. Ensimm\\xE4isell\\xE4 rivill\\xE4 esitell\\xE4\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \" tyyppinen muuttuja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"first\"), \", ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \" luokan konstruktorin palauttama arvo kopioidaan sen arvoksi. Konstruktori luo olion, jonka syntym\\xE4vuosi on 1970, ja nimi on saatu parametrina. Ensimm\\xE4isen rivin suorituksen j\\xE4lkeen ohjelman tilanne on seuraava -- muistiin on luotu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \" tyyppinen olio, ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" metodissa on viittaus siihen ensimm\\xE4isess\\xE4 muuttujassa.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/part5-3-first-1-tm.png\",\n    \"alt\": \"Ensimmäinen askel kuvana\"\n  })), mdx(\"p\", null, \"Metodin kolmannella rivill\\xE4 tulostamme muuttujan first arvon. Metodikutsu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \" etsii parametrina annetusta viittausmuuttujasta \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \" metodin. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \" luokalla on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \" metodi, joten se kutsutaan ensimm\\xE4isen muuttujan osoittaman olion kohdalla. Olion name muuttujan arvo on \\\"First\\\", ja syntym\\xE4vuoden arvo on 1970. Tulostettava merkkijono on \\\"First (1970)\\\".\"), mdx(\"p\", null, \"Nelj\\xE4nnell\\xE4 rivill\\xE4 ohjelma kutsuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MakeYounger\"), \" metodia, ja sille v\\xE4litet\\xE4\\xE4n parametrina muuttuja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"first\"), \". Kun \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MakeYounger\"), \" metodia kutsutaan, sille v\\xE4litetyn muuttujan arvo kopioidaan metodin k\\xE4ytt\\xF6\\xF6n. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MakeYounger\"), \" metodin suorituksen aikana \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" metodin suoritus j\\xE4\\xE4 odottamaan kutsupinon p\\xE4\\xE4lle. Koska muuttuja first on viittausmuuttuja, aiemmin luotu viittaus kopioidaan metodin k\\xE4ytt\\xF6\\xF6n. Metodin suorituksen lopussa tilanne on seuraava -- metodi lis\\xE4\\xE4 yhdell\\xE4 parametrina saamansa olion syntym\\xE4vuotta.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/part5-3-first-2-tm.png\",\n    \"alt\": \"Toinen askel kuvana\"\n  })), mdx(\"p\", null, \"Kun metodin MakeYounger suoritus p\\xE4\\xE4ttyy, palaamme Main metodiin. Metodin MakeYounger suorituksen aikana tehdyt muutokset katoavat kutsupinon p\\xE4\\xE4lt\\xE4.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/part5-3-first-3-tm.png\",\n    \"alt\": \"Askel kolme\"\n  })), mdx(\"p\", null, \"Kun palataan Main metodiin, tulostetaan viel\\xE4 muuttujan first arvo. Olio, johon first muuttuja viittaa, on muuttunut MakeYounger metodin suorituksen aikana -- olion syntym\\xE4vuosi on lis\\xE4\\xE4ntynyt yhdell\\xE4. Tulostettava merkkijono on \\\"First (1971)\\\".\"), mdx(\"p\", null, \"T\\xE4m\\xE4n j\\xE4lkeen ohjelma esittelee uuden muuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"second\"), \". Muuttujan arvoksi kopioidaan muuttujan first arvo. Toisin sanoen, muuttujan second arvo on viittaus samaan olioon kuin muuttujan first arvo.\\nThen the program introduces a new Person type variable called second. The value of the variable first is copied into the variable second: in other words, the value of the variable second is a reference to the already existing Person object.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/part5-3-first-4-tm.png\",\n    \"alt\": \"Askel neljä\"\n  })), mdx(\"p\", null, \"T\\xE4m\\xE4n j\\xE4lkeen ohjelma kutsuu MakeYounger metodia, ja sille v\\xE4litet\\xE4\\xE4n parametrina muuttuja second. Metodin suorituksen aikana muuttujan second arvo kopioidaan metodin k\\xE4ytt\\xF6\\xF6n. Metodin suorituksen lopussa tilanne on seuraava -- metodi lis\\xE4\\xE4 yhdell\\xE4 parametrina saamansa olion syntym\\xE4vuotta.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/part5-3-first-5-tm.png\",\n    \"alt\": \"Askel viisi\"\n  })), mdx(\"p\", null, \"Lopulta metodin suoritus loppuu ja palaamme Main metodiin. Tulostamme viel\\xE4 muuttujan first arvon. Tulostettava merkkijono on \\\"First (1972)\\\".\"), mdx(\"p\", null, \"Materiaalissa esitetyt yksityiskohdat muuttujista ja tietokoneen muistista ovat yksinkertaistettuja. Esittelemme muistia koskevia asioita sopivalla abstraktiotasolla ohjelmoinnin oppimisen kannalta. Esimerkiksi kurssin tavoitteiden kannalta seuraava lause on riitt\\xE4v\\xE4: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"lause int number = 5\"), \" varaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"muistista\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"paikan\"), \" muuttujalle number, ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"kopioi siihen arvon 5\"), \".\"), mdx(\"p\", null, \"Tietokoneen toiminnan kannalta, lauseen int number = 5 suorituksen aikana tapahtuu paljon enemm\\xE4n. Suoritus vaatii 32-bittisen muistipaikan varaamisen arvolle 5, ja toisen 32-bittisen muistipaikan varaamisen muuttujalle number. Muistipaikan koko m\\xE4\\xE4r\\xE4ytyy muuttujan tyypin mukaan. T\\xE4m\\xE4n j\\xE4lkeen muistipaikassa, jossa on arvo 5, oleva data kopioidaan muuttujan number muistipaikkaan.\"), mdx(\"p\", null, \"T\\xE4m\\xE4n lis\\xE4ksi, muuttuja number ei ole suoraan muistipaikka tai laatikko, johon tietoa s\\xE4il\\xF6t\\xE4\\xE4n. Muuttujan arvo on muistipaikan osoite, jossa tieto sijaitsee. Muuttujan tyyppi, joka sis\\xE4ltyy muuttujaan itseens\\xE4, kertoo kuinka paljon dataa tulee hakea osoitteesta. Esimerkiksi kokonaisluvun (int) tapauksessa tarvittava m\\xE4\\xE4r\\xE4 on 32 bitti\\xE4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#arvomuuttujat","title":"Arvomuuttujat"},{"url":"#viittausmuuttujat","title":"Viittausmuuttujat"},{"url":"#arvomuuttuja-tai-viittausmuuttuja-metodin-parametrina","title":"Arvomuuttuja tai viittausmuuttuja metodin parametrina"}]},"frontmatter":{"title":"Muuttujatyypit"}}},"pageContext":{"id":"df94496d-035f-5ccd-be92-eb2f4456b865"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}