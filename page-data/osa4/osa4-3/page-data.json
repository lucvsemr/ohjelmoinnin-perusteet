{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa4/osa4-3",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tiedostot ja tiedon lukeminen\",\n  \"nav_order\": 3,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Huomattava osuus ohjelmistoista k\\xE4sittelee tavalla tai toisella dataa. Musiikkia soittava ohjelmisto k\\xE4sittelee musiikkitiedostoja ja kuvank\\xE4sittelyohjelmisto kuvatiedostoja. Internetiss\\xE4 ja mobiililaitteilla toimivat sovellukset, kuten Facebook, WhatsApp ja Telegram, k\\xE4sittelev\\xE4t k\\xE4ytt\\xE4j\\xE4tietoja, jotka tallennetaan tiedostopohjaisiin tietokantoihin. N\\xE4it\\xE4 kaikkia yhdist\\xE4\\xE4 se, ett\\xE4 ne lukevat ja k\\xE4sittelev\\xE4t dataa tavalla tai toisella. Lis\\xE4ksi k\\xE4sitelt\\xE4v\\xE4 data tallennetaan lopulta johonkin muotoon yhteen tai useampaan tiedostoon.\"), mdx(\"h2\", {\n    \"id\": \"näppäimistöltä-lukeminen\"\n  }, \"N\\xE4pp\\xE4imist\\xF6lt\\xE4 lukeminen\"), mdx(\"p\", null, \"Olemme k\\xE4ytt\\xE4neet \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.ReadLine\"), \" -komentoa kurssin alusta alkaen k\\xE4ytt\\xE4j\\xE4n sy\\xF6tteiden lukemiseen. Lukeminen on tapahtunut while-true -silmukassa, jossa lukeminen loppuu tiettyyn sy\\xF6tteeseen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) {\\n    string line = Console.ReadLine();\\n\\n    if (line == \\\"end\\\") {\\n        break;\\n    }\\n\\n    // lis\\xE4\\xE4 luetun rivin listaan my\\xF6hemp\\xE4\\xE4\\n    // k\\xE4sittely\\xE4 varten tai k\\xE4sittele rivi heti\\n\\n}\\n\")), mdx(\"p\", null, \"Tekstipohjaisissa k\\xE4ytt\\xF6liittymiss\\xE4 k\\xE4ytt\\xE4j\\xE4n sy\\xF6te ohjataan sy\\xF6tevirtaan rivi kerrallaan, jolloin tiedot k\\xE4sitell\\xE4\\xE4n aina kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 uuden rivin.\"), mdx(\"p\", null, \"K\\xE4ytt\\xE4j\\xE4n sy\\xF6te luetaan merkkijonona. Jos haluaisimme k\\xE4sitell\\xE4 sy\\xF6tteen esimerkiksi kokonaislukuina, pit\\xE4isi se muuttaa toiseen muotoon. Alla on esimerkkiohjelma, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 sy\\xF6tett\\xE4 niin kauan kunnes k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 \\\"end\\\". Niin kauan kun sy\\xF6te ei ole \\\"end\\\", k\\xE4sitell\\xE4\\xE4n sy\\xF6te kokonaislukuna -- t\\xE4ss\\xE4 tapauksessa luku vain tulostetaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) {\\n    string row = Console.ReadLine();\\n\\n    if (row == \\\"end\\\") {\\n        break;\\n    }\\n\\n    int number = Convert.ToInt32(row);\\n    Console.WriteLine(row);\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"tiedostot-ja-tiedostojärjestelmä\"\n  }, \"Tiedostot ja tiedostoj\\xE4rjestelm\\xE4\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Tiedostot\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"files\"), \") ovat datakokoelmia jotka asuvat tietokoneen sis\\xE4ll\\xE4. N\\xE4m\\xE4 tiedostot sis\\xE4lt\\xE4v\\xE4t muun muassa teksti\\xE4, kuvia, musiikkia tai n\\xE4iden yhdistelmi\\xE4. Tiedostomuoto m\\xE4\\xE4ritt\\xE4\\xE4 tiedoston sis\\xE4ll\\xF6n sek\\xE4 ohjelman, joka osaa lukea tiedoston. Esimerkiksi PDF-tiedostoja luetaan PDF-tiedostoille sopivalla ohjelmalla ja musiikkitiedostoja luetaan musiikkitiedostoille sopivalla ohjelmalla. N\\xE4m\\xE4 ohjelmat ovat ihmisten -- eli ohjelmoijien -- tekemi\\xE4, ja he m\\xE4\\xE4rittelev\\xE4t tiedostomuodon osana ty\\xF6t\\xE4\\xE4n.\"), mdx(\"p\", null, \"Tietokoneilla on useita erilaisia ohjelmia tiedostojen selaamiseen. N\\xE4m\\xE4 ohjelmat ovat k\\xE4ytt\\xF6j\\xE4rjestelm\\xE4kohtaisia. Kaikki tiedostojen selaamiseen k\\xE4ytett\\xE4v\\xE4t ohjelmat k\\xE4ytt\\xE4v\\xE4t tietokoneen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"tiedostoj\\xE4rjestelm\\xE4\\xE4\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"filesystem\"), \") jollain tavalla.\"), mdx(\"p\", null, \"Meid\\xE4n kehitysymp\\xE4rist\\xF6mme tarjoaa mahdollisuuden selata projektin tiedostoja. Visual Studio Codessa koko projekti ja kaikki siihen liittyv\\xE4t tiedostot n\\xE4kyv\\xE4t listassa n\\xE4yt\\xF6n vasemmalla puolella.\"), mdx(\"p\", null, \"Tiedostot sijaitsevat tietokoneen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"kovalevyll\\xE4\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"hard drive\"), \"). Kovalevy on suuri kokoelma ykk\\xF6si\\xE4 ja nollia, eli bittej\\xE4. Tiedot koostuvat n\\xE4ist\\xE4 biteist\\xE4, esimerkiksi yksi int-tyyppinen muuttuja vie 32 bitti\\xE4 (eli 32 ykk\\xF6st\\xE4 tai nollaa). Nykyaikaiset teratavun kokoiset kovalevyt sis\\xE4lt\\xE4v\\xE4t noin 8 biljoonaa bitti\\xE4 (kirjoitettuna 8 000 000 000 000). T\\xE4ll\\xE4 mittakaavalla yksi kokonaisluku on hyvin pieni.\"), mdx(\"p\", null, \"Tiedostot voivat sijaita kovalevyll\\xE4 miss\\xE4 tahansa. Tiedostoj\\xE4rjestelm\\xE4n teht\\xE4v\\xE4 on pit\\xE4\\xE4 kirjaa tiedostojen sijainnista kovalevyll\\xE4 sek\\xE4 tarjota mahdollisuus luoda uusia tiedostoja ja muokata niit\\xE4. Tiedostoj\\xE4rjestelm\\xE4n p\\xE4\\xE4teht\\xE4v\\xE4 on abstrahoida kovalevyn todellista rakennetta; tiedoston k\\xE4ytt\\xE4j\\xE4n tai ohjelman ei tarvitse v\\xE4litt\\xE4\\xE4 siit\\xE4, miten tai miss\\xE4 tiedosto on todellisuudessa tallennettu.\"), mdx(\"h2\", {\n    \"id\": \"tiedostosta-lukeminen\"\n  }, \"Tiedostosta lukeminen\"), mdx(\"p\", null, \"Tiedoston lukeminen tapahtuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"File\"), \"-luokan avulla, joka l\\xF6ytyy \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System.IO\"), \"-nimisest\\xE4 nimiavaruudesta. Keskitymme t\\xE4ss\\xE4 tekstitiedostoihin, eli tiedostoihin jotka sis\\xE4lt\\xE4v\\xE4t merkkijonoja.\"), mdx(\"p\", null, \"Esimerkeiss\\xE4mme (ainakin toistaiseksi) oletamme, ett\\xE4 meill\\xE4 on tiedostot \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"text.txt\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"records.csv\"), \" samassa kansiossa kuin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Program.cs\"), \". Tiedosto text.txt sis\\xE4lt\\xE4\\xE4 seuraavaa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"This is a line\\nThis is second line\\nThis is 3rd\\nThis includes a double, 3.25\\nThis has \\\"quotes\\\"\\n\")), mdx(\"p\", null, \"Ja records.csv sis\\xE4lt\\xE4\\xE4 seuraavaa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"sebastian,22\\nmatt,21\\nrebecca,23\\n\")), mdx(\"p\", null, \"On monia tapoja lukea tiedosto. T\\xE4ss\\xE4 (ensimm\\xE4iset) kaksi niist\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"\\nusing System.IO;\\n\\nstatic void Main(string[] args)\\n{\\n  // Esimerkki #1\\n  // Lue tiedosto yhten\\xE4 merkkijonona.\\n  string text = File.ReadAllText(\\\"text.txt\\\");\\n\\n  // N\\xE4yt\\xE4 tiedoston sis\\xE4lt\\xF6 konsolissa. Muuttuja text on merkkijono.\\n  Console.WriteLine(\\\"This was done with ReadAllText.\\\");\\n  Console.WriteLine(text);\\n\\n  // Tyhj\\xE4 rivi helpomman lukemisen vuoksi\\n  Console.WriteLine();\\n\\n  // Esimerkki #2\\n  // Lue tiedosto rivi kerrallaan ja tallenna jokainen rivi taulukkoon.\\n  // Taulukon jokainen alkio on yksi tiedoston rivi.\\n  Console.WriteLine(\\\"This was done with ReadAllLines.\\\");\\n  string[] lines = File.ReadAllLines(\\\"text.txt\\\");\\n\\n  // N\\xE4yt\\xE4 tiedoston sis\\xE4lt\\xF6 konsolissa k\\xE4ytt\\xE4en foreach-silmukkaa.\\n  foreach (string line in lines)\\n  {\\n    Console.WriteLine(line);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Ohjelma tulostaa\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"This was done with ReadAllText.\\nThis is a line\\nThis is second line\\nThis is 3rd\\nThis includes a double, 3.25\\nThis has \\\"quotes\\\"\\n\\nThis was done with ReadAllLines.\\nThis is a line\\nThis is second line\\nThis is 3rd\\nThis includes a double, 3.25\\nThis has \\\"quotes\\\"\\n\")), mdx(\"p\", null, \"Katsotaan molempia v\\xE4h\\xE4n tarkemmin.\"), mdx(\"h3\", {\n    \"id\": \"filereadalltext\"\n  }, \"File.ReadAllText()\"), mdx(\"p\", null, \"Ensimm\\xE4inen esimerkki on melko itsest\\xE4\\xE4nselv\\xE4. M\\xE4\\xE4rittelemme muuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string text\"), \" ja k\\xE4yt\\xE4mme metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"File.ReadAllText()\"), \" (karkeasti suomennettuna \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"lue kaikki teksti tiedostosta\"), \") lukemaan tekstitiedosto ja tallentamaan sen muuttujaan. T\\xE4m\\xE4 tallentaa tekstin tiedostosta muuttujaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sellaisena kuin se on\"), \" tiedostossa, sis\\xE4lt\\xE4en kaikki rivinvaihdot. Kuten n\\xE4et, kun tulostamme muuttujan, se tulostaa jokaisen rivin erikseen, kuten pit\\xE4\\xE4kin.\"), mdx(\"h3\", {\n    \"id\": \"filereadalllines\"\n  }, \"File.ReadAllLines()\"), mdx(\"p\", null, \"Toinen esimerkki on melko samanlainen kuin ensimm\\xE4inen. Sen sijaan, ett\\xE4 tallentaisimme tiedoston sis\\xE4ll\\xF6n yhten\\xE4 merkkijonona, tallennamme sen taulukkoon komennolla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"File.ReadAllLines()\"), \" (karkeasti suomennettuna \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"lue kaikki rivit tiedostosta\"), \"). Nyt taulukon alkiot ovat tekstin rivej\\xE4.\"), mdx(\"p\", null, \"Mik\\xE4 on siis ero, miksi tarvitsemme kaksi tapaa? Kun haluamme p\\xE4\\xE4st\\xE4 k\\xE4siksi jokaiseen yksitt\\xE4iseen tekstin riviin, k\\xE4ytt\\xE4isimme todenn\\xE4k\\xF6isesti j\\xE4lkimm\\xE4ist\\xE4. Jos kaikki teksti on tallennettu yhteen muuttujaan, sielt\\xE4 tietyn osan l\\xF6yt\\xE4minen olisi vaikeampaa. Toisaalta, jos tarvitsemme tiedon yhten\\xE4 kokonaisuutena, k\\xE4ytt\\xE4isimme ensimm\\xE4ist\\xE4.\"), mdx(\"p\", null, \"On olemassa muitakin tapoja lukea tiedostoja, kuten datavirrat (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"streams\"), \"). Niist\\xE4 lis\\xE4\\xE4 my\\xF6hemmin.\"), mdx(\"h2\", {\n    \"id\": \"tiedon-lukeminen-tietyssä-formaatissa-tiedostosta\"\n  }, \"Tiedon lukeminen tietyss\\xE4 formaatissa tiedostosta\"), mdx(\"p\", null, \"Maailma on t\\xE4ynn\\xE4 dataa joka liittyy toisiin dataan -- n\\xE4m\\xE4 muodostavat kokoelmia. Esimerkiksi henkil\\xF6tiedot sis\\xE4lt\\xE4v\\xE4t nimen, syntym\\xE4ajan, puhelinnumeron. Osoitetiedot taas sis\\xE4lt\\xE4v\\xE4t maan, kaupungin, katuosoitteen, postinumeron ja niin edelleen.\"), mdx(\"p\", null, \"Dataa tallennetaan usein tiedostoihin tietyss\\xE4 formaatissa. Yksi t\\xE4llainen formaatti on meille jo tuttu, eli pilkuilla erotetut arvot (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"comma-separated values\"), \", CSV). T\\xE4m\\xE4 tarkoittaa, ett\\xE4 tiedostossa oleva data on eroteltu pilkuilla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true)\\n{\\n  Console.WriteLine(\\\"Enter name and age separated by a comma:\\\");\\n  string input = Console.ReadLine();\\n  if (input == \\\"\\\")\\n  {\\n    break;\\n  }\\n  string[] pieces = input.Split(\\\",\\\");\\n  Console.WriteLine(\\\"Name: \\\" + pieces[0] + \\\", age: \\\" + pieces[1]);\\n}\\n\")), mdx(\"p\", null, \"Ohjelma toimii seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Enter name and age separated by a comma:\\nsebastian,22\\nName: sebastian, age: 22\\nEnter name and age separated by a comma:\\nmatt,21\\nName: matt, age: 21\\nEnter name and age separated by a comma:\\n\")), mdx(\"p\", null, \"Saman datan lukeminen tiedostosta nimelt\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"records.csv\"), \" n\\xE4ytt\\xE4isi t\\xE4lt\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string[] lines = File.ReadAllLines(\\\"records.csv\\\");\\nforeach (string line in lines)\\n{\\n  string[] pieces = line.Split(\\\",\\\");\\n  Console.WriteLine(\\\"Name: \\\" + pieces[0] + \\\", age: \\\" + pieces[1]);\\n}\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 tulostaa\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Name: sebastian, age: 22\\nName: matt, age: 21\\nName: rebecca, age: 23\\n\")), mdx(\"p\", null, \"Kuten n\\xE4kyy, k\\xE4yt\\xE4mme nyt metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ReadAllLines\"), \", koska haluamme p\\xE4\\xE4st\\xE4 k\\xE4siksi jokaiseen rivin erikseen.\"), mdx(\"p\", null, \"Olisimme voineet k\\xE4ytt\\xE4\\xE4 my\\xF6s \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ReadAllText\"), \", mutta olisimme joutuneet ensin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pilkkomaan merkkijono taulukoksi\"), \" p\\xE4\\xE4st\\xE4ksemme k\\xE4siksi kaikkiin riveihin... Ja kuten n\\xE4et, t\\xE4ll\\xE4 tavalla taulukko on jo olemassa, mik\\xE4 s\\xE4\\xE4st\\xE4\\xE4 ylim\\xE4\\xE4r\\xE4iselt\\xE4 vaiheelta.\"), mdx(\"h2\", {\n    \"id\": \"olioiden-lukeminen-tiedostosta\"\n  }, \"Olioiden lukeminen tiedostosta\"), mdx(\"p\", null, \"Olioiden luominen tiedostosta on suoraviivaista. Oletetaan, ett\\xE4 meill\\xE4 on luokka nimelt\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \" ja sama data kuin aiemmin.\"), mdx(\"p\", null, \"Olion tietojen lukeminen tiedostosta onnistuu seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  List<Person> people = new List<Person>();\\n\\n  string[] lines = File.ReadAllLines(\\\"records.csv\\\");\\n  foreach (string line in lines)\\n  {\\n    string[] pieces = line.Split(\\\",\\\");\\n    string name = pieces[0];\\n    int age = Convert.ToInt32(pieces[1]);\\n\\n    people.Add(new Person(name, age));\\n  }\\n  Console.WriteLine(\\\"Total amount read: \\\" + people.Count);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Total amount read: 3\\n\")), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Exercise, {\n    title: '019 Reading strings',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Kertauksena, yksinkertainen ohjelma sy\\xF6tteen lukemiseen.\"), mdx(\"p\", null, \"Kirjoita ohjelma joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 merkkijonoja kunnes k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 merkkijonon \\\"end\\\". Kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 \\\"end\\\", ohjelman tulee tulostaa kuinka monta merkkijonoa sy\\xF6tteess\\xE4 oli. Merkkijono \\\"end\\\" ei kuulu merkkijonojen lukum\\xE4\\xE4r\\xE4\\xE4n. Alla on muutamia esimerkkej\\xE4 ohjelman toiminnasta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> I \\n> have\\n> a\\n> feeling\\n> that\\n> I\\n> have\\n> written\\n> this\\n> wrong\\n> before\\n> end \\n11\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> end \\n0\\n\"))), mdx(Exercise, {\n    title: '020 Reading integers',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Kirjoita ohjelma joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 merkkijonoja kunnes k\\xE4ytt\\xE4j\\xE4 kirjoittaa \\\"end\\\". Niin kauan kun sy\\xF6te ei ole \\\"end\\\", ohjelman pit\\xE4isi k\\xE4sitell\\xE4 sy\\xF6te kokonaislukuna ja tulostaa annetun numeron kuutio (eli numero \", \"*\", \" numero \", \"*\", \" numero). Alla pari esimerkki\\xE4 ohjelman toiminnasta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 3 \\n27 \\n> -1 \\n-1 \\n> 11 \\n1331 \\n> end\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> end\\n\")), mdx(\"p\", null, \"Muista muuttaa sy\\xF6te kokonaisluvuksi ennen kuin k\\xE4sittelet sit\\xE4.\")), mdx(Exercise, {\n    title: '021 Reading file',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Kirjoita ohjelma joka tulostaa tiedoston \\\"data.txt\\\" sis\\xE4ll\\xF6n siten, ett\\xE4 jokainen tiedoston rivi tulostetaan omalle rivilleen.\"), mdx(\"p\", null, \"Jos tiedoston sis\\xE4lt\\xF6 on seuraava:\"), mdx(\"p\", null, \"In a world\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Where code is built   \"), mdx(\"p\", null, \"Tulosteen tulisi olla seuraava:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"In a world\\nWhere code is built\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Voit olettaa ett\\xE4 tiedosto on samassa kansiossa kuin Program.cs\")), mdx(Exercise, {\n    title: '022 File names',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Kirjoita ohjelma joka kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 merkkijonoa, ja tulostaa tiedoston jonka nimi on sama kuin k\\xE4ytt\\xE4j\\xE4n sy\\xF6te. Voit olettaa ett\\xE4 k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 tiedoston nimen joka l\\xF6ytyy. Sinun ei tarvitse huolehtia virheist\\xE4, eli tiedoston nimi on aina oikein.\"), mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on tiedostot \\\"data.txt\\\" ja \\\"song.txt\\\", joita voit k\\xE4ytt\\xE4\\xE4 ohjelman testaamiseen. Ohjelman tulostus n\\xE4ytt\\xE4\\xE4 seuraavalta kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 merkkijonon \\\"song.txt\\\". Tulostus tulee tiedostosta \\\"song.txt\\\". Ohjelman tulee toimia my\\xF6s muilla tiedostonimill\\xE4, olettaen ett\\xE4 tiedosto l\\xF6ytyy.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Which file should have its contents printed? \\n> song.txt \\n\\nNo option for duality \\nThe old is where we come \\nClockspeed is fast, but we'll survive \\nThe new will overcome \\nWe are challengers, not followers \\nWe take the ball to build \\nEasy safe services \\nAre here to stay\\n\\nValue for society \\nValue for life \\nFor you and me \\nTieto is here allright!\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Voit olettaa ett\\xE4 tiedosto on samassa kansiossa kuin Program.cs\")), mdx(Exercise, {\n    title: '023 Guestlist text file',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on valmiina toiminallisuus vieraslistasovellukselle. Se tarkistaa onko k\\xE4ytt\\xE4j\\xE4n sy\\xF6tt\\xE4m\\xE4 nimi vieraslistalla.\"), mdx(\"p\", null, \"Ohjelmasta kuitenkin puuttuu toiminnallisuus jolla vieraslista luetaan tiedostosta. Muokkaa ohjelmaa siten ett\\xE4 nimet luetaan tiedostosta.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Teht\\xE4v\\xE4 olettaa ett\\xE4 sinulla on merkkijono nimelt\\xE4 \\\"names\\\" johon olet tallentanut tiedoston!\"), \"Esimerkki ohjelman toiminnasta:\", mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Name of the file: \\n> guestlist.txt\\n\\nEnter names, an empty line quits. \\n> Chuck Norris \\nThe name is not on the list. \\n> Jack Baluer \\nThe name is not on the list. \\n> Jack Bauer \\nThe name is on the list. \\n> Jack Bower \\nThe name is on the list.\\n>\\nThank you!\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Teht\\xE4v\\xE4pohjassa on kaksi tiedostoa, \\\"names.txt\\\" ja \\\"other-names.txt\\\", joissa on seuraava sis\\xE4lt\\xF6. \\xC4l\\xE4 muuta tiedostojen sis\\xE4lt\\xF6\\xE4!\"), mdx(\"p\", null, \"names.txt:\"), mdx(\"p\", null, \"ada\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"arto\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"leena\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"test\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"heikki  \"), mdx(\"p\", null, \"other-names.txt:\"), mdx(\"p\", null, \"leo\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"jarmo\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"alicia\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"mike\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"potato  \"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Voit olettaa ett\\xE4 tiedosto on samassa kansiossa kuin Program.cs\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#näppäimistöltä-lukeminen","title":"Näppäimistöltä lukeminen"},{"url":"#tiedostot-ja-tiedostojärjestelmä","title":"Tiedostot ja tiedostojärjestelmä"},{"url":"#tiedostosta-lukeminen","title":"Tiedostosta lukeminen","items":[{"url":"#filereadalltext","title":"File.ReadAllText()"},{"url":"#filereadalllines","title":"File.ReadAllLines()"}]},{"url":"#tiedon-lukeminen-tietyssä-formaatissa-tiedostosta","title":"Tiedon lukeminen tietyssä formaatissa tiedostosta"},{"url":"#olioiden-lukeminen-tiedostosta","title":"Olioiden lukeminen tiedostosta"}]},{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Tiedostot ja tiedon lukeminen"}}},"pageContext":{"id":"1fbf1556-d907-58b9-951a-15b1e6d58252"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}