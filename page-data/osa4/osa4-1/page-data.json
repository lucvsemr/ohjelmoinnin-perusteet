{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa4/osa4-1",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Olio-ohjelmointi\",\n  \"nav_order\": 1,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Aloitamme nyt matkamme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"olio-ohjelmoinnin\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Object Oriented Programming\"), \", usein lyhennetty \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OOP\"), \") maailmaan. Ensin keskitymme kuvailemaan k\\xE4sitteit\\xE4 ja dataa k\\xE4ytt\\xE4en olioita. Siit\\xE4 eteenp\\xE4in opimme lis\\xE4\\xE4m\\xE4\\xE4n toiminnallisuutta, eli metodeja ohjelmaamme.\"), mdx(\"p\", null, \"Olio-ohjelmointi keskittyy ongelmien ratkaisemiseen erist\\xE4m\\xE4ll\\xE4 ongelma-alueen k\\xE4sitteet erillisiksi entiteeteiksi ja k\\xE4ytt\\xE4m\\xE4ll\\xE4 n\\xE4it\\xE4 entiteettej\\xE4 ongelmien ratkaisemiseen. Ongelmaan liittyv\\xE4t k\\xE4sitteet voidaan ottaa huomioon vasta kun ne on tunnistettu. Toisin sanoen on mahdollista muodostaa ongelmasta abstraktio, joka tekee ongelman l\\xE4hestymisest\\xE4 helpompaa.\"), mdx(\"p\", null, \"Kun ongelmaan liittyv\\xE4t k\\xE4sitteet on tunnistettu, voimme my\\xF6s alkaa rakentaa ohjelmia, jotka edustavat niit\\xE4. N\\xE4m\\xE4 rakenteet, ja niist\\xE4 muodostetut yksitt\\xE4iset instanssit, eli oliot, ovat k\\xE4yt\\xF6ss\\xE4 ongelman ratkaisemisessa. Lause \\\"ohjelmat rakennetaan pienist\\xE4, selkeist\\xE4 ja yhteisty\\xF6kykyisist\\xE4 olioista\\\" ei v\\xE4ltt\\xE4m\\xE4tt\\xE4 viel\\xE4 tarkoita paljoakaan. Se alkaa kuitenkin tuntua j\\xE4rkev\\xE4lt\\xE4, kun kurssin edetess\\xE4 p\\xE4\\xE4semme k\\xE4sittelem\\xE4\\xE4n konkreettisia esimerkkej\\xE4.\"), mdx(\"h2\", {\n    \"id\": \"luokat-ja-oliot\"\n  }, \"Luokat ja oliot\"), mdx(\"p\", null, \"Olemme jo k\\xE4ytt\\xE4neet C#-kielen tarjoamia luokkia ja olioita. Luokka m\\xE4\\xE4rittelee olioiden ominaisuudet, eli niiden tietoon liittyv\\xE4t asiat (instanssimuuttujat ja olion ominaisuudet), sek\\xE4 niiden k\\xE4ytt\\xE4ytymisen, eli metodit. Olioiden instanssimuuttujien arvot m\\xE4\\xE4rittelev\\xE4t yksitt\\xE4isen olion sis\\xE4isen tilan, kun taas metodit m\\xE4\\xE4rittelev\\xE4t sen tarjoaman toiminnallisuuden.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Metodi\"), \" on osa l\\xE4hdekoodia joka on nimetty ja jota voidaan kutsua. Metodi on aina jonkin luokan osa ja sit\\xE4 k\\xE4ytet\\xE4\\xE4n usein muokkaamaan olion sis\\xE4ist\\xE4 tilaa.\"), mdx(\"p\", null, \"Esimerkiksi, Lista on C#-kielen tarjoama luokka, ja olemme k\\xE4ytt\\xE4neet sen tarjoamia olioita ohjelmissamme. Alla luodaan Lista-luokasta olio nimelt\\xE4 integers ja lis\\xE4t\\xE4\\xE4n siihen muutamia kokonaislukuja.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// luomme List-luokasta integers-olion\\nList<int> integers = new List<int>();\\n\\n// lis\\xE4t\\xE4\\xE4n arvot 15, 34, 65, 111 integers-olioon\\nintegers.Add(15);\\nintegers.Add(34);\\nintegers.Add(65);\\nintegers.Add(111);\\n\\n// tulostetaan integers-olion koko\\nConsole.WriteLine(integers.Count);\\n\")), mdx(\"p\", null, \"Olio alustetaan aina kutsumalla metodia joka luo objektin, eli konstruktoria k\\xE4ytt\\xE4en \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"new\"), \"-avainsanaa.\"), mdx(\"p\", null, \"Luokka m\\xE4\\xE4rittelee piirrustukset oliolle, joka alustetaan siit\\xE4. Piirret\\xE4\\xE4n analogia luokasta ja oliosta johonkin muuhun kuin tietokoneohjelmointiin. Rintamamiestalo on todenn\\xE4k\\xF6isesti tuttu monille, ja voimme olettaa ett\\xE4 olemassa on piirrustukset jotka m\\xE4\\xE4rittelev\\xE4t mit\\xE4 rintamamiestalo on. Luokka on piirrustus. Toisin sanottuna se m\\xE4\\xE4rittelee mit\\xE4 luokasta luodut oliot ovat:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/houses.jpg\",\n    \"alt\": \"Talon piirrustukset\"\n  })), mdx(\"p\", null, \"Yksitt\\xE4iset oliot, t\\xE4ss\\xE4 tapauksessa rintamamiestalot, luodaan samoilla piirrustuksilla -- ne ovat saman luokan instansseja. Yksitt\\xE4isten olioiden tila, eli ominaisuudet (kuten seinien v\\xE4ri, katon rakennusmateriaali, perustusten v\\xE4ri, ovien materiaali ja v\\xE4ri,...) voivat kuitenkin vaihdella. Seuraava on \\\"rintamamiestalo-luokan olio\\\":\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/singlehouse.jpg\",\n    \"alt\": \"Yksitt√§inen talo\"\n  })), mdx(\"h2\", {\n    \"id\": \"luokkien-luominen\"\n  }, \"Luokkien luominen\"), mdx(\"p\", null, \"Luokka m\\xE4\\xE4ritt\\xE4\\xE4 millaisia siit\\xE4 luodut oliot ovat.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"olion muuttujat (instanssin muuttujat, englanniksi instance variables)\"), \" m\\xE4\\xE4ritt\\xE4v\\xE4t olion sis\\xE4ist\\xE4 tilaa\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"olion metodit\"), \" m\\xE4\\xE4ritt\\xE4v\\xE4t mit\\xE4 olio tekee\")), mdx(\"p\", null, \"Tutustaan nyt luokkien luomiseen ja niiden muuttujien ja metodien m\\xE4\\xE4ritt\\xE4miseen.\"), mdx(\"p\", null, \"Luokka on tarkoitettu esitt\\xE4m\\xE4\\xE4n jotain merkityksellist\\xE4 kokonaisuutta, jossa \\\"merkityksellinen kokonaisuus\\\" viittaa usein johonkin reaalimaailman objektiin tai k\\xE4sitteeseen. Jos tietokoneohjelma k\\xE4sittelee henkil\\xF6tietoja, olisi ehk\\xE4 merkityksellist\\xE4 m\\xE4\\xE4ritell\\xE4 luokka Person, joka sis\\xE4lt\\xE4\\xE4 henkil\\xF6\\xF6n liittyvi\\xE4 metodeja ja muuttujia.\"), mdx(\"p\", null, \"Aloitetaan. Esimerkiss\\xE4 k\\xE4yt\\xE4mme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Exercise001\"), \" pohjaa teht\\xE4vist\\xE4, joten voit seurata mukana. Oletammekin ett\\xE4 meill\\xE4 on projektipohja, jossa on tyhj\\xE4 p\\xE4\\xE4ohjelma, eli \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Program.cs\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\nnamespace Exercise001\\n{\\n  class Program\\n  {\\n    public static void Main(string[] args)\\n    {\\n\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Seuraava olsio on tarkoitettu uusien luokkien luomiseen Visual Studio Codessa. Voit toki k\\xE4ytt\\xE4\\xE4 mit\\xE4 tahansa editoria, mutta t\\xE4m\\xE4 materiaali on luotu Visual Studio Codelle.\"), mdx(\"h3\", {\n    \"id\": \"uuden-luokan-luominen\"\n  }, \"Uuden luokan luominen\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Luodaksemme uuden luokan, klikkaa hiiren oikealla painikkeella VSCode Explorerissa ja valitse New File. T\\xE4m\\xE4 luo uuden tiedoston kansioon, joka on auki VSCode:ssa.\")), mdx(\"p\", null, \"Kuten muuttujilla ja metodeilla, luokan nimell\\xE4 tulisi olla mahdollisimman kuvaava nimi. On tavallista, ett\\xE4 luokka el\\xE4\\xE4 ja muuttaa muotoaan ohjelman kehittyess\\xE4. T\\xE4st\\xE4 syyst\\xE4 luokan nime\\xE4 voi joutua muuttamaan my\\xF6hemmin.\"), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Nime\\xE4 tiedostosi \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Person.cs\"), \". Tiedoston tulee p\\xE4\\xE4tty\\xE4 .cs-p\\xE4\\xE4tteeseen, jotta se tunnistetaan C#-tiedostoksi.\")), mdx(\"p\", null, \"Varmista, ett\\xE4 tiedosto \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person.cs\"), \" on samassa kansiossa kuin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Program.cs\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Varmista, ett\\xE4 tiedostossa on oikea \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"nimiavaruus\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"namespace\"), \"), jotta voit viitata siihen \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Program.cs\"), \"-tiedostosta.\")), mdx(\"p\", null, \"K\\xE4sittelemme nimiavaruudet my\\xF6hemmin. T\\xE4ll\\xE4 hetkell\\xE4, kun luot uuden luokan, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"k\\xE4yt\\xE4 samaa nimiavaruuta (namespace) kuin olemassa olevilla luokilla\"), \".\"), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Lis\\xE4\\xE4 t\\xE4m\\xE4 koodi tiedostoosi:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\nnamespace Exercise001\\n{\\n  public class Person\\n  {\\n    \\n  }\\n}\\n\")), mdx(\"p\", null, \"Luokka m\\xE4\\xE4ritt\\xE4\\xE4 olion ominaisuudet ja metodit. P\\xE4\\xE4tet\\xE4\\xE4n antaa Person-luokalle kaksi ominaisuutta: nimi ja ik\\xE4. On luonnollista ett\\xE4 nimi on merkkijono, ja ik\\xE4 on numero. Lis\\xE4t\\xE4\\xE4n n\\xE4m\\xE4 \\\"piirrustuksiimme\\\":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person {\\n    private string name;\\n    private int age;\\n}\\n\")), mdx(\"p\", null, \"Yll\\xE4 m\\xE4\\xE4rittelimme, ett\\xE4 jokaisella oliolla joka luodaan Person luokasta, on nimi ja ik\\xE4. Luokan sis\\xE4ll\\xE4 m\\xE4\\xE4ritellyt muuttujat ovat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"instanssimuuttujia\"), \", tai olion attribuutteja. Muitakin nimi\\xE4 saattaa esiinty\\xE4. \"), mdx(\"p\", null, \"Instanssimuuttujat kirjoitetaan luokan m\\xE4\\xE4rittelyn j\\xE4lkeen, eli rivin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public class Person {\"), \" j\\xE4lkeen. Jokainen muuttuja on edelt\\xE4v\\xE4n\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"private\"), \"-avainsanalla. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"private\"), \"-avainsana tarkoittaa, ett\\xE4 muuttujat ovat \\\"piilossa\\\" olion sis\\xE4ll\\xE4. T\\xE4t\\xE4 kutsutaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"kapseloinniksi\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"encapsulation\"), \").\"), mdx(\"p\", null, \"Luokkakaaviossa, muuttujat jotka liittyv\\xE4t luokkaan, m\\xE4\\xE4ritell\\xE4\\xE4n muodossa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\"muuttujanNimi: muuttujanTyyppi\\\"\"), \". Miinusmerkki muuttujan nimen edess\\xE4 tarkoittaa, ett\\xE4 muuttuja on kapseloitu (sill\\xE4 on private-avainsana).**\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/person.jpg\",\n    \"alt\": \"Luokkakaavio\"\n  })), mdx(\"p\", null, \"Olemme nyt m\\xE4\\xE4ritt\\xE4neet piirrustukset -- luokan -- person -oliolle. Jokainen uusi person-olio sis\\xE4lt\\xE4\\xE4 muuttujat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"age\"), \", jotka voivat pit\\xE4\\xE4 sis\\xE4ll\\xE4\\xE4n oliokohtaisia arvoja. Person-olion \\\"tila\\\" koostuu sen name- ja age-muuttujien arvoista.\"), mdx(\"p\", null, \"Person ei tee viel\\xE4 mit\\xE4\\xE4n, mutta p\\xE4\\xE4semme sinne kyll\\xE4.\"), mdx(\"h2\", {\n    \"id\": \"konstruktorin-m√§√§ritt√§minen\"\n  }, \"Konstruktorin m\\xE4\\xE4ritt\\xE4minen\"), mdx(\"p\", null, \"Haluamme asettaa alkutilan luotavalle oliolle. Omat oliomme luodaan samalla tavalla kuin valmiitkin oliot, kuten List, k\\xE4ytt\\xE4en \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"new\"), \"-avainsanaa. Olisi k\\xE4tev\\xE4\\xE4 pysty\\xE4 antamaan oliolle luodessa sen muuttujille alkuarvot. Esimerkiksi person oliolle olisi k\\xE4tev\\xE4\\xE4 pysty\\xE4 antamaan nimi:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"    public static void Main(string[] args)\\n    {\\n      Person ada = new Person(\\\"Ada\\\");\\n      // ...\\n    }\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 saadaan tehty\\xE4 m\\xE4\\xE4ritt\\xE4m\\xE4ll\\xE4 metodi, joka luo olion, eli \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"konstruktori\"), \". Konstruktori m\\xE4\\xE4ritell\\xE4\\xE4n instanssimuuttujien j\\xE4lkeen. Seuraavassa esimerkiss\\xE4 m\\xE4\\xE4ritell\\xE4\\xE4n konstruktori Person-luokalle, jota voidaan k\\xE4ytt\\xE4\\xE4 uuden Person-olion luomiseen. Konstruktori asettaa olion i\\xE4n 0:aan ja merkkijonon joka sille annetaan parametrina olion nimeksi:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  private string name;\\n  private int age;\\n\\n  public Person(string initialName) \\n  {\\n    this.age = 0;\\n    this.name =  initialName;\\n  }\\n}\\n\")), mdx(\"p\", null, \"Konstruktorin nimi on aina sama kuin luokan nimi. Yll\\xE4 olevassa esimerkiss\\xE4 luokan nimi on Person, joten konstruktorin nimi on my\\xF6s Person. Konstruktori saa parametrina nimen luotavalle oliolle. Parametri on sulkujen sis\\xE4ll\\xE4 ja seuraa konstruktorin nime\\xE4. Sulkeita seuraa aaltosulkeet. N\\xE4iden sis\\xE4ll\\xE4 on l\\xE4hdekoodi, jota ohjelma suorittaa kun konstruktoria kutsutaan (esim. new Person(\\\"Ada\\\")).\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Oliot luodaan aina k\\xE4ytt\\xE4m\\xE4ll\\xE4 konstruktoria.\")), mdx(\"p\", null, \"Muutamia huomioita: konstruktori sis\\xE4lt\\xE4\\xE4 lausekkeen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this.age = 0\"), \". T\\xE4m\\xE4 lauseke asettaa vasta luodun olion (eli \\\"t\\xE4m\\xE4n\\\" , englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this\"), \" olion) age-instanssimuuttujan arvoksi 0. Toinen lauseke \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this.name = initialName\"), \" asettaa parametrina annetun merkkijonon olion luodessaan.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/personconstructor.jpg\",\n    \"alt\": \"Luokkakaavio konstruktorin kanssa\"\n  })), mdx(\"p\", null, \"Jos ohjelmoija ei m\\xE4\\xE4rit\\xE4 luokalle konstruktoria, C#-k\\xE4\\xE4nt\\xE4j\\xE4 luo luokalle oletuskonstruktorin. Oletuskonstruktori on konstruktori, joka ei tee mit\\xE4\\xE4n muuta kuin luo olion. Olion muuttujat pysyv\\xE4t alustamattomina (yleens\\xE4 olion viittaukset ovat null-arvoisia, eli ne eiv\\xE4t osoita mihink\\xE4\\xE4n).\"), mdx(\"p\", null, \"Esimerkiksi olio voidaan luoda alla olevasta luokasta kutsumalla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"new Person()\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  private string name;\\n  private int age;\\n}\\n\")), mdx(\"p\", null, \"Jos konstruktori on m\\xE4\\xE4ritelty, oletuskonstruktoria ei ole olemassa. Alla olevalle luokalle, kutsu new Person() aiheuttaisi virheen, koska konstruktoria ilman parametreja ei ole m\\xE4\\xE4ritelty.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  private string name;\\n  private int age;\\n\\n  public Person(string initialName) {\\n    this.age = 0;\\n    this.name =  initialName;\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"metodin-m√§√§ritt√§minen-oliolle\"\n  }, \"Metodin m\\xE4\\xE4ritt\\xE4minen oliolle\"), mdx(\"p\", null, \"Osaamme nyt luoda olion ja alustaa sen muuttujat. Olio tarvitsee kuitenkin my\\xF6s metodeja, jotta se voi tehd\\xE4 jotain. Kuten olemme oppineet, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"metodi\"), \" on nimetty l\\xE4hdekoodin osa luokassa, jota voidaan kutsua.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  private string name;\\n  private int age;\\n\\n  public Person(string initialName) {\\n    this.age = 0;\\n    this.name =  initialName;\\n  }\\n\\n  public void PrintPerson() {\\n    Console.WriteLine(this.name + \\\", age \\\" + this.age + \\\" years\\\");\\n  }\\n}\\n\")), mdx(\"p\", null, \"Metodi kirjoitetaan luokassa konstruktorin alapuolelle. Metodin nimi alkaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public void\"), \", sill\\xE4 metodin tarkoitus on olla saatavilla ulkopuolisille (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public\"), \") ja se ei palauta mit\\xE4\\xE4n arvoa (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void\"), \").\"), mdx(\"p\", null, \"Olemme k\\xE4ytt\\xE4neet m\\xE4\\xE4ritelm\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"static\"), \" joissain metodeissa joita olemme kirjoittaneet. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Static\"), \"-m\\xE4\\xE4ritelm\\xE4 tarkoittaa, ett\\xE4 metodi ei kuulu mihink\\xE4\\xE4n olioon, eik\\xE4 sit\\xE4 voi k\\xE4ytt\\xE4\\xE4 olioiden muuttujien arvojen hakemiseen.\"), mdx(\"p\", null, \"T\\xE4st\\xE4 eteenp\\xE4in, metodeissamme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ei tule olemaan static-m\\xE4\\xE4ritelm\\xE4\\xE4\"), \", jos ne k\\xE4sittelev\\xE4t tietoa oliosta, joka on luotu jostain luokasta. Jos metodi saa parametreina kaikki ne muuttujat joiden arvoja se k\\xE4ytt\\xE4\\xE4, se voi olla static-metodi.\"), mdx(\"p\", null, \"Luokan nimen, instanssimuuttujien ja konstruktorin lis\\xE4ksi luokkakaaviossa on nyt my\\xF6s metodi PrintPerson. Koska metodi tulee \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public\"), \"-m\\xE4\\xE4ritelm\\xE4n kanssa, metodi on merkitty plus-merkill\\xE4. Metodin nimen per\\xE4ss\\xE4 ei ole sulkujen sis\\xE4ll\\xE4 mit\\xE4\\xE4n, koska metodi ei ota parametreja. Metodille on my\\xF6s merkitty sen palautusarvo (tai t\\xE4ll\\xE4 kertaa, ettei se palauta mit\\xE4\\xE4n), \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void\"), \".\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/printperson.jpg\",\n    \"alt\": \"Luokkaakaavio tulostusmetodin kanssa\"\n  })), mdx(\"p\", null, \"Metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintPerson\"), \" sis\\xE4lt\\xE4\\xE4 yhden rivin l\\xE4hdekoodia, joka k\\xE4ytt\\xE4\\xE4 instanssimuuttujia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"age\"), \". Luokkakaaviossa ei ole mit\\xE4\\xE4n tietoa siit\\xE4, mit\\xE4 metodi tekee. Instanssimuuttujiin viitataan etuliitteell\\xE4 this. Kaikki olion muuttujat ovat n\\xE4kyviss\\xE4 ja k\\xE4ytett\\xE4viss\\xE4 metodin sis\\xE4ll\\xE4.\"), mdx(\"p\", null, \"Luodaan kolme henkil\\xF6\\xE4 p\\xE4\\xE4ohjelmassa ja pyydet\\xE4\\xE4n heit\\xE4 tulostamaan itsens\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"class Program\\n{\\n  static void Main(string[] args)\\n  {\\n    Person ada = new Person(\\\"Ada\\\");\\n    Person antti = new Person(\\\"Antti\\\");\\n    Person martin = new Person(\\\"Martin\\\");\\n\\n    ada.PrintPerson();\\n    antti.PrintPerson();\\n    martin.PrintPerson();\\n  }\\n}\\n\")), mdx(\"p\", null, \"Prints:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Ada, age 0 years\\nAntti, age 0 years\\nMartin, age 0 years\\n\")), mdx(\"h2\", {\n    \"id\": \"instanssimuuttujien-arvojen-muuttaminen-metodissa\"\n  }, \"Instanssimuuttujien arvojen muuttaminen metodissa\"), mdx(\"p\", null, \"Lis\\xE4t\\xE4\\xE4n metodi aiemmin luotuun luokkaan Person, joka kasvattaa henkil\\xF6n ik\\xE4\\xE4 yhdell\\xE4 vuodella.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  private string name;\\n  private int age;\\n\\n  public Person(string initialName)\\n  {\\n    this.age = 0;\\n    this.name = initialName;\\n  }\\n\\n  public void PrintPerson()\\n  {\\n    Console.WriteLine(this.name + \\\", age \\\" + this.age + \\\" years\\\");\\n  }\\n\\n  public void GrowOlder()\\n  {\\n    this.age = this.age + 1;\\n  }\\n}\\n\")), mdx(\"p\", null, \"Metodi on kirjoitettu luokan sis\\xE4lle, kuten PrintPerson-metodikin. Metodi kasvattaa instanssimuuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"age\"), \" arvoa yhdell\\xE4.\"), mdx(\"p\", null, \"My\\xF6s luokkakaavio saa p\\xE4ivityksen.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/persongrow.jpg\",\n    \"alt\": \"Class Diagram With Growth\"\n  })), mdx(\"p\", null, \"Kutsutaan metodia ja katsotaan mit\\xE4 tapahtuu:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  Person ada = new Person(\\\"Ada\\\");\\n  Person antti = new Person(\\\"Antti\\\");\\n  Person martin = new Person(\\\"Martin\\\");\\n\\n  ada.PrintPerson();\\n  antti.PrintPerson();\\n  martin.PrintPerson();\\n\\n  Console.WriteLine();\\n\\n  ada.GrowOlder();\\n  antti.GrowOlder();\\n  antti.GrowOlder();\\n\\n  ada.PrintPerson();\\n  antti.PrintPerson();\\n  martin.PrintPerson();\\n}\\n\")), mdx(\"p\", null, \"Tulostaa\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Ada, age 0 years\\nAntti, age 0 years\\nMartin, age 0 years\\n\\nAda, age 1 years\\nAntti, age 2 years\\nMartin, age 0 years\\n\")), mdx(\"p\", null, \"Kun n\\xE4m\\xE4 kaksi oliota \\\"syntyv\\xE4t\\\" niill\\xE4 on molemmilla ik\\xE4 0 (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this.age = 0;\"), \" suoritetaan konstruktorissa). \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ada\"), \"-olion GrowOlder-metodia kutsutaan kerran, ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"antti\"), \"-olion GrowOlder-metodia kutsutaan kahdesti. Kuten tulostus osoittaa, Adan ik\\xE4 on 1 vuosi kasvun j\\xE4lkeen, Antin ik\\xE4 on 2. Metodin kutsuminen olion kohdalla vastaavasti ei vaikuta toisen henkil\\xF6-olion ik\\xE4\\xE4n, koska jokainen luokasta instanssioidut oliot ovat omia instanssejaan, kuten Martin.\"), mdx(\"p\", null, \"Metodi voi my\\xF6s sis\\xE4lt\\xE4\\xE4 ehtolauseita tai silmukoita. Alla GrowOlder -metodi on muutettu niin, ett\\xE4 se rajoittaa ik\\xE4\\xE4ntymisen 100 vuoteen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  private string name;\\n  private int age;\\n\\n  public Person(string initialName)\\n  {\\n    this.age = 0;\\n    this.name = initialName;\\n  }\\n\\n  public void PrintPerson()\\n  {\\n    Console.WriteLine(this.name + \\\", age \\\" + this.age + \\\" years\\\");\\n  }\\n\\n  public void GrowOlder()\\n  {\\n    if (this.age < 100)\\n    {\\n      this.age = this.age + 1;\\n    }\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"arvon-palauttaminen-metodista\"\n  }, \"Arvon palauttaminen metodista\"), mdx(\"p\", null, \"Metodi voi palauttaa arvon. T\\xE4h\\xE4n menness\\xE4 luomamme metodit eiv\\xE4t ole palauttaneet mit\\xE4\\xE4n. T\\xE4m\\xE4 on merkitty kirjoittamalla metodin m\\xE4\\xE4rittelyn yhteyteen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void\"), \"-avainsana.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Door \\n{\\n  public void Knock() \\n  {\\n      // ...\\n  }\\n}\\n\")), mdx(\"p\", null, \"Avainsana \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void\"), \" tarkoittaa, ett\\xE4 metodi ei palauta mit\\xE4\\xE4n arvoa.\"), mdx(\"p\", null, \"Jos haluamme metodin palauttavan arvon, meid\\xE4n tulee korvata \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void\"), \"-avainsana muulla. Seuraavassa esimerkiss\\xE4 luokkaan Teacher on lis\\xE4tty metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Grade\"), \", joka palauttaa aina kokonaislukumuuttujan arvon 10. Arvo palautetaan aina \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return\"), \"-k\\xE4skyll\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Teacher \\n{\\n  public int Grade() \\n  {\\n      return 10;\\n  }\\n}\\n\")), mdx(\"p\", null, \"Metodi yll\\xE4 palauttaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int\"), \" tyyppisen muuttujan, jonka arvo on 10. Jotta paluuarvoa voidaan k\\xE4ytt\\xE4\\xE4, se tulee sijoittaa muuttujaan. T\\xE4m\\xE4 tapahtuu samalla tavalla kuin muuttujan arvon sijoittaminen, eli k\\xE4ytt\\xE4m\\xE4ll\\xE4 yht\\xE4suuruusmerkki\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"class Program\\n{\\n  static void Main(string[] args)\\n  {\\n  Teacher teacher = new Teacher();\\n\\n  int grading = teacher.Grade();\\n\\n  Console.WriteLine(\\\"The grade received is \\\" + grading);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The grade received is 10\\n\")), mdx(\"p\", null, \"Metodin paluuarvo sijoitetaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int\"), \" -muuttujaan aivan kuten mik\\xE4 tahansa muukin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int\"), \" -arvo. Paluuarvoa voitaisiin k\\xE4ytt\\xE4\\xE4 my\\xF6s osana lauseketta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\nTeacher first = new Teacher();\\nTeacher second = new Teacher();\\nTeacher third = new Teacher();\\n\\ndouble average = (first.Grade() + second.Grade() + third.Grade()) / 3.0;\\n\\nConsole.WriteLine(\\\"Grading average \\\" + average);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Grading average 10\\n\")), mdx(\"p\", null, \"Kaikki muuttujat joita olemme t\\xE4h\\xE4n menness\\xE4 k\\xE4ytt\\xE4neet, voidaan palauttaa my\\xF6s metodista. Yhteenvetona:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Metodi joka ei palauta mit\\xE4\\xE4n arvoa, on m\\xE4\\xE4ritelty \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"void\"), \"-avainsanalla.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public void MethodThatReturnsNothing() {\\n  // the method body\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Metodi joka palauttaa kokonaisluvun, on m\\xE4\\xE4ritelty \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"int\"), \"-avainsanalla.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public int MethodThatReturnsAnInteger() {\\n  // the method body, requires a return statement\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Metodi joka palauttaa merkkijonon, on m\\xE4\\xE4ritelty \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"string\"), \"-avainsanalla.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public string MethodThatReturnsAString() {\\n  // the method body, requires a return statement\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Metodi joka palauttaa liukuluvun, on m\\xE4\\xE4ritelty \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"double\"), \"-avainsanalla.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public double MethodThatReturnsADouble() {\\n  // the method body, requires a return statement\\n}\\n\")), mdx(\"p\", null, \"Jatketaan Person-luokan kehitt\\xE4mist\\xE4 ja lis\\xE4t\\xE4\\xE4n siihen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ReturnAge\"), \"-metodi, joka palauttaa henkil\\xF6n i\\xE4n.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  private string name;\\n  private int age;\\n\\n  public Person(string initialName)\\n  {\\n    this.age = 0;\\n    this.name = initialName;\\n  }\\n\\n  public void PrintPerson()\\n  {\\n    Console.WriteLine(this.name + \\\", age \\\" + this.age + \\\" years\\\");\\n  }\\n\\n  public void GrowOlder()\\n  {\\n    if (this.age < 100)\\n    {\\n      this.age = this.age + 1;\\n    }\\n  }\\n\\n  // the added method\\n  public int ReturnAge()\\n  {\\n    return this.age;\\n  }\\n}\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/personreturn.jpg\",\n    \"alt\": \"Luokkakaavio palauttavan metodin kanssa\"\n  })), mdx(\"p\", null, \"Katsotaan miten metodi toimii:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  Person pekka = new Person(\\\"Pekka\\\");\\n  Person antti = new Person(\\\"Antti\\\");\\n\\n  pekka.GrowOlder();\\n  pekka.GrowOlder();\\n\\n  antti.GrowOlder();\\n\\n  Console.WriteLine(\\\"Pekka's age: \\\" + pekka.ReturnAge());\\n  Console.WriteLine(\\\"Antti's age: \\\" + antti.ReturnAge());\\n  int combined = pekka.ReturnAge() + antti.ReturnAge();\\n\\n  Console.WriteLine(\\\"Pekka's and Antti's combined age \\\" + combined + \\\" years\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Pekka's age: 2\\nAntti's age: 1\\nPekka's and Antti's combined age 3 years\\n\")), mdx(\"p\", null, \"Kuten huomasimme, metodi voi sis\\xE4lt\\xE4\\xE4 l\\xE4hdekoodia samalla tavalla kuin muutkin koodimme osat. Metodit voivat sis\\xE4lt\\xE4\\xE4 ehtolauseita tai silmukoita, ja muita metodeita voidaan kutsua niiden sis\\xE4ll\\xE4.\"), mdx(\"p\", null, \"Kirjoitetaan nyt metodi, joka m\\xE4\\xE4ritt\\xE4\\xE4 onko henkil\\xF6 t\\xE4ysi-ik\\xE4inen. Metodi palauttaa boolean-arvon, joka on joko \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"true\"), \" tai \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"false\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"class Person\\n{\\n  //... Kaikki aiempi koodi on t\\xE4ss\\xE4 v\\xE4liss\\xE4\\n\\n  public bool IsOfLegalAge()\\n  {\\n    if (this.age < 18)\\n    {\\n      return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  /*\\n  Metodi olisi voinut olla kirjoitettu my\\xF6s seuraavasti:\\n  public bool IsOfLegalAge() \\n  {\\n    return this.age >= 18;\\n  }\\n  */\\n}\\n\")), mdx(\"p\", null, \"Kokeillaanpa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  Person pekka = new Person(\\\"Pekka\\\");\\n  Person antti = new Person(\\\"Antti\\\");\\n\\n  int i = 0;\\n  while (i < 27)\\n  {\\n    pekka.GrowOlder();\\n    i = i + 1;\\n  }\\n\\n  antti.GrowOlder();\\n\\n  if (antti.IsOfLegalAge())\\n  {\\n    Console.Write(\\\"of legal age: \\\");\\n    antti.PrintPerson();\\n  }\\n  else\\n  {\\n    Console.Write(\\\"underage: \\\");\\n    antti.PrintPerson();\\n  }\\n\\n  if (pekka.IsOfLegalAge())\\n  {\\n    Console.Write(\\\"of legal age: \\\");\\n    pekka.PrintPerson();\\n  }\\n  else\\n  {\\n    Console.Write(\\\"underage: \\\");\\n    pekka.PrintPerson();\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"underage: Antti, age 1 years\\nof legal age: Pekka, age 27 years\\n\")), mdx(\"p\", null, \"Hienos\\xE4\\xE4det\\xE4\\xE4n ratkaisua viel\\xE4 hieman. Nykyisell\\xE4\\xE4n henkil\\xF6 voidaan \\\"tulostaa\\\" vain siten, ett\\xE4 tulostetaan sek\\xE4 nimi ett\\xE4 ik\\xE4. Tilanteita kuitenkin esiintyy, joissa halutaan tiet\\xE4\\xE4 vain henkil\\xF6n nimi.\"), mdx(\"p\", null, \"Monessa ohjelmointikieless\\xE4 t\\xE4h\\xE4n k\\xE4ytet\\xE4\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"get-metodia\"), \". C#-kielell\\xE4, olioiden ominaisuuksia, kuten henkil\\xF6n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"age\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \", voidaan k\\xE4ytt\\xE4\\xE4 automaattisesti toteutettujen ominaisuuksien, eli \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Auto Implementation Property\")), \" kautta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public string name { get; }\\n\")), mdx(\"p\", null, \"Avataan t\\xE4t\\xE4 hieman. \\\"Konepellin alla\\\", yll\\xE4 oleva koodi kertoo \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"C#-k\\xE4\\xE4nt\\xE4j\\xE4lle\"), \" ett\\xE4 meid\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \"-ominaisuudella on \\\"sis\\xE4\\xE4nrakennettu\\\" metodi arvon hakemiseen ja asettamiseen. Koodi yll\\xE4 on toiminnallisesti sama kuin:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string _name;\\npublic string name\\n{\\n  get\\n  {\\n    return _name;\\n  }\\n}\\n\")), mdx(\"p\", null, \"T\\xE4ss\\xE4 esimerkiss\\xE4, meill\\xE4 on nyt my\\xF6s rivi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string _name;\"), \", ja molemmilla meid\\xE4n alkuper\\xE4isell\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string name\"), \" on nyt \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public\"), \". \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string _name;\"), \" tunnetaan englanninkielisell\\xE4 termill\\xE4 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties#properties-with-backing-fields\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Backing field\")), \", josta voit lukea lis\\xE4\\xE4 linkist\\xE4. Meid\\xE4n ei tarvitse huolehtia niist\\xE4 nyt.\"), mdx(\"p\", null, \"Metodin kirjoittamisen sijaan, kuten teimme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"age\"), \" kanssa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public string ReturnAge() {\\n  return age;\\n}\\n\")), mdx(\"p\", null, \"Meill\\xE4 on nyt hyvin lyhyt vaihtoehto:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public string name { get; }\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Meid\\xE4n pit\\xE4\\xE4 muuttaa merkkijonan nimi julkiseksi (private -> public), jotta se on k\\xE4ytett\\xE4viss\\xE4 p\\xE4\\xE4ohjelmassa, tai muissa luokissa. On tapoja suojata ominaisuus, mutta palaamme siihen my\\xF6hemmin.\"), mdx(\"p\", null, \"K\\xE4ytet\\xE4\\xE4n t\\xE4t\\xE4 uutta tapaa i\\xE4lle:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  Person pekka = new Person(\\\"Pekka\\\");\\n  Person antti = new Person(\\\"Antti\\\");\\n\\n  int i = 0;\\n  while (i < 27)\\n  {\\n    pekka.GrowOlder();\\n    i = i + 1;\\n  }\\n\\n  antti.GrowOlder();\\n\\n  if (antti.IsOfLegalAge())\\n  {\\n    Console.WriteLine(antti.name + \\\" is of legal age\\\");\\n  }\\n  else\\n  {\\n    Console.WriteLine(antti.name + \\\" is underage\\\");\\n  }\\n\\n  if (pekka.IsOfLegalAge())\\n  {\\n    Console.WriteLine(pekka.name + \\\" is of legal age\\\");\\n  }\\n  else\\n  {\\n    Console.WriteLine(pekka.name + \\\" is underage \\\");\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Antti is underage\\nPekka is of legal age\\n\")), mdx(\"p\", null, \"Kuten huomataan, nyt voimme kutsua henkil\\xF6n nime\\xE4 suoraan lis\\xE4\\xE4m\\xE4ll\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".name\"), \" olion nimen per\\xE4\\xE4n, kuten \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"antti.name\"), \". P\\xE4ivitet\\xE4\\xE4n viel\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"age\"), \" omaamaan my\\xF6s \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"get-metodi\"), \", ja poistetaan vanha \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ReturnAge\"), \"-metodi. Nyt luokkamme n\\xE4ytt\\xE4\\xE4 t\\xE4lt\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  public string name { get; }\\n  public int age { get; set; }\\n\\n  public Person(string initialName)\\n  {\\n    this.age = 0;\\n    this.name = initialName;\\n  }\\n\\n  public void PrintPerson()\\n  {\\n    Console.WriteLine(this.name + \\\", age \\\" + this.age + \\\" years\\\");\\n  }\\n\\n  public void GrowOlder()\\n  {\\n    if (this.age < 100)\\n    {\\n      this.age = this.age + 1;\\n    }\\n  }\\n\\n  public bool IsOfLegalAge() \\n  {\\n    return this.age >= 18;\\n  }\\n}\\n\")), mdx(\"p\", null, \"Huomataan, ett\\xE4 nyt \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"age\"), \"-muuttujalla on my\\xF6s \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"set-metodi\"), \". T\\xE4m\\xE4 johtuu siit\\xE4, ett\\xE4 muutamme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \"-luokan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"age\"), \"-muuttujan arvoa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"GrowOlder\"), \"-metodissa. Palaamme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"set-metodiin\"), \" my\\xF6hemmin.\"), mdx(\"h2\", {\n    \"id\": \"olion-merkkijonoesitys-ja-tostring-metodi\"\n  }, \"Olion merkkijonoesitys ja ToString-metodi\"), mdx(\"p\", null, \"Olemme nyt syyllistyneet huonoon ohjelmointityyliin, luomalla metodin tulostamista varten, eli \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintPerson\"), \" metodin. Parempi tapa on m\\xE4\\xE4ritell\\xE4 metodi oliolle, joka palauttaa olion \\\"merkkijonoesityksen\\\". Metodi joka palauttaa merkkijonoesityksen on aina \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \" C#:ssa. M\\xE4\\xE4ritell\\xE4\\xE4n t\\xE4m\\xE4 metodi person-oliolle seuraavassa esimerkiss\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  // ..\\n  public override string ToString() \\n  {\\n      return this.name + \\\", age \\\" + this.age + \\\" years\\\";\\n  }\\n}\\n\")), mdx(\"p\", null, \"Metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \" toimii kuten \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintPerson\"), \". Kuitenkin, se ei tulosta mit\\xE4\\xE4n, vaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"palauttaa\"), \" merkkijonoesityksen, jonka kutsuva metodi voi tulostaa tarvittaessa.\"), mdx(\"p\", null, \"Metodia voidaan k\\xE4ytt\\xE4\\xE4 v\\xE4h\\xE4n yll\\xE4tt\\xE4v\\xE4ll\\xE4kin tavalla:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  Person pekka = new Person(\\\"Pekka\\\");\\n  Person antti = new Person(\\\"Antti\\\");\\n\\n  int i = 0;\\n  while (i < 27)\\n  {\\n    pekka.GrowOlder();\\n    i = i + 1;\\n  }\\n\\n  antti.GrowOlder();\\n\\n  Console.WriteLine(pekka); // Sama kuin Console.WriteLine(pekka.ToString() )\\n  Console.WriteLine(antti); // Sama kuin Console.WriteLine(antti.ToString() )\\n}\\n\")), mdx(\"p\", null, \"Periaatteessa, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \"-metodi pyyt\\xE4\\xE4 olion merkkijonoesityst\\xE4 ja tulostaa sen. Kutsu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \"-metodiin, joka palauttaa merkkijonoesityksen, ei tarvitse olla kirjoitettu erikseen, koska C# lis\\xE4\\xE4 sen automaattisesti. Kun ohjelmoija kirjoittaa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine(antti);\\n\")), mdx(\"p\", null, \"C# laajentaa kutsun ajonaikana seuraavaan muotoon:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine(antti.ToString());\\n\")), mdx(\"p\", null, \"Sellaisenaan, kutsu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine(antti)\"), \" kutsuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"antti\"), \"-olion \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \"-metodia ja tulostaa sen palauttaman merkkijonoesityksen.\"), mdx(\"p\", null, \"Voimme nyt poistaa turhan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintPerson\"), \"-metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \"-luokasta.\"), mdx(\"h2\", {\n    \"id\": \"metodin-parametrit\"\n  }, \"Metodin parametrit\"), mdx(\"p\", null, \"Jatketaan viel\\xE4 luokan Person kehitt\\xE4mist\\xE4. Olemme p\\xE4\\xE4tt\\xE4neet, ett\\xE4 haluamme laskea ihmisten painoindeksit. T\\xE4t\\xE4 varten kirjoitamme metodit henkil\\xF6n pituuden ja painon asettamiseksi, ja my\\xF6s metodin painoindeksin laskemiseksi. Person-olion uudet ja muutetut osat ovat seuraavat:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  public string name { get; }\\n  public int age { get; set; }\\n  public int weight { get; set; }\\n  public int height { get; set; }\\n\\n  public Person(string initialName)\\n  {\\n    this.age = 0;\\n    this.weight = 0;\\n    this.height = 0;\\n    this.name = initialName;\\n  }\\n\\n  public double BodyMassIndex()\\n  {\\n    double heigthPerHundred = this.height / 100.0;\\n    return this.weight / (heigthPerHundred * heigthPerHundred);\\n  }\\n\\n  // ...\\n}\\n\")), mdx(\"p\", null, \"Instanssimuuttujat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"height\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"weight\"), \" lis\\xE4ttiin person-oliolle. Nyt n\\xE4emme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"{ get; set; };\"), \" molemmilla n\\xE4ill\\xE4 uusilla muuttujilla. K\\xE4yt\\xE4mme niit\\xE4 seuraavaksi kertomaan ohjelmalle, kuinka pitk\\xE4 tai painava henkil\\xF6 on.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  Person matti = new Person(\\\"Matti\\\");\\n  Person juhana = new Person(\\\"Juhana\\\");\\n\\n  matti.height = 180;\\n  matti.weight = 86;\\n\\n  juhana.height = 175;\\n  juhana.weight = 64;\\n\\n  Console.WriteLine(matti.name + \\\", body mass index is \\\" + matti.BodyMassIndex());\\n  Console.WriteLine(juhana.name + \\\", body mass index is \\\" + juhana.BodyMassIndex());\\n\\n}\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 tulostaa\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Matti, body mass index is 26.54320987654321\\nJuhana, body mass index is 20.897959183673468\\n\")), mdx(\"h2\", {\n    \"id\": \"parametrilla-ja-instanssimuuttujalla-voi-olla-sama-nimi\"\n  }, \"Parametrilla ja instanssimuuttujalla voi olla sama nimi!\"), mdx(\"p\", null, \"Konstruktorissamme, olemme k\\xE4ytt\\xE4neet muuttujaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"initialName\"), \" sen sijaan, ett\\xE4 olisimme k\\xE4ytt\\xE4neet \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \". \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public Person(string initialName)\\n{\\n  this.age = 0;\\n  this.weight = 0;\\n  this.height = 0;\\n  this.name = initialName;\\n}\\n\")), mdx(\"p\", null, \"Parametrin nimi voisi olla my\\xF6s sama kuin instanssimuuttujan nimi, joten seuraava toimisi my\\xF6s:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public Person(string name)\\n{\\n  this.age = 0;\\n  this.weight = 0;\\n  this.height = 0;\\n  this.name = name;\\n}\\n\")), mdx(\"p\", null, \"T\\xE4ss\\xE4 tapauksessa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \" metodissa viittaa nimenomaan parametriin nimelt\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this.name\"), \" instanssimuuttujaan samalla nimell\\xE4. Esimerkiksi seuraava esimerkki ei toimisi, koska koodi ei viittaa instanssimuuttujaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \" ollenkaan. Koodi asettaa parametrina saadun \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \"-muuttujan arvoksi sen arvon, joka sill\\xE4 jo on:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public Person(string name)\\n{\\n  this.age = 0;\\n  this.weight = 0;\\n  this.height = 0;\\n  // EI IKIN\\xC4 N\\xC4IN!\\n  name = name;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public Person(string name)\\n{\\n  this.age = 0;\\n  this.weight = 0;\\n  this.height = 0;\\n  // T\\xC4M\\xC4 ON OIKEIN!\\n  this.name = name;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"sis√§isen-metodin-kutsuminen\"\n  }, \"Sis\\xE4isen metodin kutsuminen\"), mdx(\"p\", null, \"Olio voi my\\xF6s kutsua omia metodeitaan. Esimerkiksi jos haluamme merkkijonoesityksen sis\\xE4lt\\xE4v\\xE4n my\\xF6s painoindeksin, olisi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \"-metodin kutsuttava \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BodyMassIndex\"), \"-metodia:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public override string ToString()\\n{\\n      return this.name + \\\", age \\\" + this.age + \\\" years, my body mass index is \\\" + this.BodyMassIndex();\\n}\\n\")), mdx(\"p\", null, \"Eli kun olio kutsuu omaa metodiaan, metodin nimi ja etuliite \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this\"), \" riitt\\xE4v\\xE4t. Vaihtohteinena olisi kutsua olion omaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BodyMassIndex\"), \"-metodia muodossa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BodyMassIndex()\"), \", jolloin ei korosteta sit\\xE4, ett\\xE4 kutsutaan olion omaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BodyMassIndex\"), \"-metodia:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public override string ToString()\\n{\\n      return this.name + \\\", age \\\" + this.age + \\\" years, my body mass index is \\\" + BodyMassIndex();\\n}\\n\")), mdx(\"h1\", {\n    \"id\": \"teht√§v√§t\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Kun luodaan omia luokkia, varmista, ett\\xE4 sis\\xE4llyt\\xE4t oikean nimiavaruuden, jotta voit viitata siihen Program.cs-tiedostosta. Palaamme nimiavaruuksiin my\\xF6hemmin. Toistaiseksi, kun luot uuden luokan, k\\xE4yt\\xE4 samaa nimiavaruutta kuin Program.cs-tiedostossa on.\", mdx(\"p\", null, \"Joissain teht\\xE4viss\\xE4 sinun tulee muuttaa Main-metodia. Lue ohjeet huolellisesti!\")), mdx(Exercise, {\n    title: '001 First account',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on valmiina luokka nimelt\\xE4 Account. Account-olio edustaa pankkitili\\xE4, jolla on saldoa (eli tilill\\xE4 on rahaa). Tili\\xE4 voisi k\\xE4ytt\\xE4\\xE4 seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Account heikkisAccount = new Account(\\\"Heikki's account\\\", 100.00);\\nAccount heikkisSwissAccount = new Account(\\\"Heikki's account in Switzerland\\\", 1000000.00);\\n\\nConsole.WriteLine(\\\"Intial state\\\");\\nConsole.WriteLine(heikkisAccount);\\nConsole.WriteLine(heikkisSwissAccount);\\n\\nheikkisAccount.Withdrawal(20);\\nConsole.WriteLine(\\\"The balance of Heikki's account is now: \\\" + heikkisAccount.balance);\\nheikkisSwissAccount.Deposit(200);\\nConsole.WriteLine(\\\"The balance of Heikki's other account is now: \\\" + heikkisSwissAccount.balance);\\n\\nConsole.WriteLine(\\\"End state\\\");\\nConsole.WriteLine(heikkisAccount);\\nConsole.WriteLine(heikkisSwissAccount);\\n\")), mdx(\"p\", null, \"Kirjoita ohjelma, joka\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"luo tilin, jolla on saldoa 100.0,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tallettaa tilille 20.0,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ja tulostaa tilin saldon.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"120\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Suorita operaatiot tarkasti oikeassa j\\xE4rjestyksess\\xE4\")), mdx(Exercise, {\n    title: '002 First transfer',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Edellisest\\xE4 teht\\xE4v\\xE4st\\xE4 tuttu Account on k\\xE4ytett\\xE4viss\\xE4 t\\xE4ss\\xE4kin teht\\xE4v\\xE4ss\\xE4.\"), mdx(\"p\", null, \"Kirjoita ohjelma, joka\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Luo tilin nimell\\xE4 \\\"Heikki's account\\\" saldolla 1000.0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Luo tilin nimell\\xE4 \\\"Personal account\\\" saldolla 0.0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nostaa tililt\\xE4 \\\"Heikki's account\\\" 100.0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tallettaa tilille \\\"Personal account\\\" 100.0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tulostaa molempien tilien tiedot, ensin Heikin tilin ja sitten Personal tilin\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Heikki's account balance: 900\\nPersonal account balance: 100\\n\"))), mdx(Exercise, {\n    title: '003 First class',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"T\\xE4ss\\xE4 teht\\xE4v\\xE4ss\\xE4 harjoitellaan luokan luomista.\"), mdx(\"p\", null, \"Nime\\xE4 luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" (ja tiedosto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog.cs\"), \")\"), mdx(\"p\", null, \"Lis\\xE4\\xE4 luokalle oikea namespace, jotta voit k\\xE4ytt\\xE4\\xE4 sit\\xE4 p\\xE4\\xE4ohjelmasta.\\nLis\\xE4\\xE4 luokalle seuraavat muuttujat:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"private string name,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"private string breed and \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"private int age   \")), mdx(\"p\", null, \"Luokkakaaviona luokka n\\xE4ytt\\xE4\\xE4 t\\xE4lt\\xE4:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/dogclass.jpg\",\n    \"alt\": \"Dog class diagram\"\n  })), mdx(\"p\", null, \"Huomaa, ett\\xE4 luokka ei viel\\xE4 oikein tee mit\\xE4\\xE4n. Se vain m\\xE4\\xE4rittelee mit\\xE4 tietoja koirasta tallennetaan.\")), mdx(Exercise, {\n    title: '004 Classroom',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo luokka nimelt\\xE4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Room\"), \" (ja tiedosto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Room.cs\"), \"). Lis\\xE4\\xE4 luokkaan muuttujat \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"private string code\"), \" ja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"private int seats\"), \". T\\xE4m\\xE4n j\\xE4lkeen luo konstruktori \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public Room(string classCode, int numberOfSeats)\"), \", joilla voidaan antaa arvot luokan muuttujille.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/centria/ohjelmoinnin-perusteet/raw/master/src/images/roomclass.jpg\",\n    \"alt\": \"Luokan luokkakaavio\"\n  }))), mdx(Exercise, {\n    title: '005 Whistle',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luodaan luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Whistle\"), \". Lis\\xE4\\xE4 luokkaan muuttuja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"private string sound\"), \". T\\xE4m\\xE4n j\\xE4lkeen luo konstruktori \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public Whistle(string whistleSound)\"), \", jolla voidaan luoda uusi pilli, jolle annetaan \\xE4\\xE4ni. T\\xE4m\\xE4n j\\xE4lkeen luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public void Sound()\"), \", joka tulostaa \\xE4\\xE4nen (k\\xE4ytt\\xE4en Console.WriteLine).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Whistle duckWhistle = new Whistle(\\\"Kvaak\\\");\\nWhistle roosterWhistle = new Whistle(\\\"Peef\\\");\\n\\nduckWhistle.Sound();\\nroosterWhistle.Sound();\\nduckWhistle.Sound();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Kvaak \\nPeef \\nKvaak\\n\"))), mdx(Exercise, {\n    title: '006 Product',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Product\"), \" joka edustaa kaupan tuotetta. Tuotteella on hinta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"price (double)\"), \", m\\xE4\\xE4r\\xE4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"quantity (int)\"), \" ja nimi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name (string)\"), \".\"), mdx(\"p\", null, \"Luokalla tulee olla:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"konstruktori \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public Product(string name, double price, int quantity)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"metodi \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public void PrintProduct()\"), \" joka tulostaa tuotteen tiedot seuraavassa muodossa:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Banana: price 1.1: 13 pcs\\n\")), mdx(\"p\", null, \"Yll\\xE4 oleva esimerkki tulostaa tuotteen, jonka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \" on \\\"Banana\\\", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"price\"), \" on 1.1 ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"quantity\"), \" on 13.\")), mdx(Exercise, {\n    title: '007 Counter',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"T\\xE4m\\xE4 teht\\xE4v\\xE4 koostuu useammasta osasta. Jokainen osa on yhden pisteen arvoinen.\"), mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on osittain valmiina luokka DecreasingCounter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\nnamespace Exercise007\\n{\\n  public class DecreasingCounter\\n  {\\n    private int value;   // muuttuja joka sis\\xE4lt\\xE4\\xE4 laskurin arvon\\n\\n    public DecreasingCounter(int initialValue)\\n    {\\n      this.value = initialValue;\\n    }\\n\\n    public void PrintValue()\\n    {\\n      Console.WriteLine(\\\"value: \\\" + this.value);\\n    }\\n\\n    public void Decrement()\\n    {\\n      // kirjoita metodin toteutus t\\xE4nne \\n      // tavoite on v\\xE4hent\\xE4\\xE4 laskurin arvoa yhdell\\xE4\\n    }\\n\\n    // muut metodit tulevat t\\xE4nne\\n  }\\n}\\n\")), mdx(\"p\", null, \"Seuraavassa on esimerkki ohjelman k\\xE4yt\\xF6st\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  DecreasingCounter counter = new DecreasingCounter(10);\\n  counter.PrintValue();\\n\\n  counter.Decrement();\\n  counter.PrintValue();\\n\\n  counter.Decrement();\\n  counter.PrintValue();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"value: 10\\nvalue: 9\\nvalue: 8\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1 : Implementoi metodi Decrement()\")), mdx(\"p\", null, \"Toteuta metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public void Decrement()\"), \" siten, ett\\xE4 se v\\xE4hent\\xE4\\xE4 laskurin arvoa yhdell\\xE4 kun metodia kutsutaan. Kun olet toteuttanut metodin, yll\\xE4 oleva esimerkki pit\\xE4isi toimia kuten esitetty.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2 : Laskurin arvo ei voi olla negatiivinen\")), mdx(\"p\", null, \"Paranna metodia \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Decrement()\"), \" siten, ett\\xE4 laskurin arvo ei voi koskaan olla negatiivinen. T\\xE4m\\xE4 tarkoittaa sit\\xE4, ett\\xE4 jos laskurin arvo on 0, sen arvoa ei voi v\\xE4hent\\xE4\\xE4. T\\xE4ss\\xE4 voi olla hy\\xF6ty\\xE4 ehtolauseesta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n\\n  DecreasingCounter counter = new DecreasingCounter(2);\\n  counter.PrintValue();\\n\\n  counter.Decrement();\\n  counter.Decrement();\\n  counter.PrintValue();\\n\\n  counter.Decrement();\\n  counter.PrintValue();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"value: 2\\nvalue: 0\\nvalue: 0\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 3: Laskurin arvon nollaaminen\")), mdx(\"p\", null, \"Luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public void Reset()\"), \" joka nollaa laskurin arvon. T\\xE4m\\xE4 tarkoittaa sit\\xE4, ett\\xE4 metodia kutsuttaessa laskurin arvo muutetaan arvoksi 0.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n\\n  DecreasingCounter counter = new DecreasingCounter(20);\\n  counter.PrintValue();\\n\\n  counter.Reset();\\n  counter.PrintValue();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"value: 20\\nvalue: 0\\n\"))), mdx(Exercise, {\n    title: '008 Debt',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luodaan luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Debt\"), \" joka edustaa velkaa. Velalla on saldo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"balance (double)\"), \" ja korko \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"interestRate (double)\"), \". Korko ja saldo annetaan konstruktorissa parametreina \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public Debt(double initialBalance, double initialInterestRate)\"), \".\"), mdx(\"p\", null, \"Lis\\xE4ksi luodaan metodit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public void PrintBalance()\"), \" ja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public void WaitOneYear()\"), \" luokalle. Metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintBalance\"), \" tulostaa saldon, ja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WaitOneYear\"), \" kasvattaa velan m\\xE4\\xE4r\\xE4\\xE4. Velan m\\xE4\\xE4r\\xE4 kasvaa kertomalla saldo korkoprosentilla. Esimerkiksi seuraava koodi:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n\\n  Debt mortgage = new Debt(120000.0, 1.01);\\n  mortgage.PrintBalance();\\n\\n  mortgage.WaitOneYear();\\n  mortgage.PrintBalance();\\n\\n  // Wait 20 years\\n  int years = 0;\\n  while (years < 20)\\n  {\\n    mortgage.WaitOneYear();\\n    years = years + 1;\\n  }\\n\\n  mortgage.PrintBalance();\\n}\\n\")), mdx(\"p\", null, \"Esimerkki n\\xE4ytt\\xE4\\xE4 koron vaikutuksen velan m\\xE4\\xE4r\\xE4\\xE4n kun korko on yksi prosentti vuodessa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"120000\\n121200\\n147887.0328416936\\n\"))), mdx(Exercise, {\n    title: '009 Dalmatian',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dalmatian\"), \" joka edustaa dalmatialaista koiraa. Koiralla on nimi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name (string)\"), \" ja t\\xE4plien m\\xE4\\xE4r\\xE4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spots (int)\"), \". Nimi ja t\\xE4plien m\\xE4\\xE4r\\xE4 annetaan konstruktorissa parametreina \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public Dalmatian(string name, int spots)\"), \".\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Anna muuttujille my\\xF6s get ja set:\", mdx(\"p\", null, \"Tee muuttujista public, ja lis\\xE4\\xE4 \", \"{\", \" get; set; \", \"}\", \" muuttujan m\\xE4\\xE4rittelyriviin!\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Dalmatian spotty = new Dalmatian(\\\"Spot\\\", 306);\\nConsole.WriteLine(spotty.name + \\\" is a very good dog. He has \\\" + spotty.spots + \\\" darker spots in his fur\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Spot is a very good dog. He has 306 darker spots in his fur\\n\"))), mdx(Exercise, {\n    title: '010 Gauge',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luodaan mittariluokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Gauge\"), \". Mittarilla on instanssimuuttuja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public int value\"), \", konstruktori ilman parametreja (asettaa mittarin arvoksi 0), ja seuraavat kolme metodia:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Metodi \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public void Increase()\"), \" kasvattaa instanssimuuttujan arvoa yhdell\\xE4. Arvoa ei voi kasvattaa suuremmaksi kuin viisi.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Metodi \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public void Decrease()\"), \" v\\xE4hent\\xE4\\xE4 instanssimuuttujan arvoa yhdell\\xE4. Arvoa ei voi muuttaa negatiiviseksi.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Metodi \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public bool Full()\"), \" palauttaa \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"True\"), \" jos instanssimuuttujan arvo on viisi. Muutoin palautetaan \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"False\"), \".\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Anna muuttujalle my\\xF6s get ja set:\", mdx(\"p\", null, \"Tee muuttujista public, ja lis\\xE4\\xE4 \", \"{\", \" get; set; \", \"}\", \" muuttujan m\\xE4\\xE4rittelyriviin!\")), mdx(\"p\", null, \"Esimerkki luokan toiminnasta:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  Gauge g = new Gauge();\\n\\n  while (!g.Full())\\n  {\\n    Console.WriteLine(\\\"Not full! Value: \\\" + g.value);\\n    g.Increase();\\n  }\\n\\n  Console.WriteLine(\\\"Full! Value: \\\" + g.value);\\n  g.Decrease();\\n  Console.WriteLine(\\\"Not full! Value: \\\" + g.value);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Not full! Value: 0\\nNot full! Value: 1\\nNot full! Value: 2\\nNot full! Value: 3\\nNot full! Value: 4\\nFull! Value: 5\\nNot full! Value: 4\\n\"))), mdx(Exercise, {\n    title: '011 Agent',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa m\\xE4\\xE4ritell\\xE4\\xE4n luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Agent\"), \", jolla on etunimi ja sukunimi. Main-metodi yritt\\xE4\\xE4 tulostaa esittelyn agentista Bond, mutta ei onnistu. T\\xE4m\\xE4 on mit\\xE4 sen pit\\xE4isi tehd\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  Agent bond = new Agent(\\\"James\\\", \\\"Bond\\\");\\n  Console.WriteLine(bond);\\n\\n  Agent bourne = new Agent(\\\"Jason\\\", \\\"Bourne\\\");\\n  Console.WriteLine(bourne);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"My name is Bond. James Bond.\\nMy name is Bourne. Jason Bourne.\\n\")), mdx(\"p\", null, \"Agentin ToString palauttaa t\\xE4ll\\xE4 hetkell\\xE4 tyhj\\xE4n merkkijonon. Korjaa se niin, ett\\xE4 se esittelee kansainv\\xE4liset superagentit asiallisesti (kuten yll\\xE4).\")), mdx(Exercise, {\n    title: '012 Multiplier',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Multiplier\"), \" jolla on:\"), mdx(\"p\", null, \"Konstruktori \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public Multiplier(int number)\"), \"\\nMetodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public int Multiply(int number)\"), \" joka palauttaa arvon number kerrottuna konstruktorissa annetulla luvulla.\\nTarvitset my\\xF6s instanssimuuttujan t\\xE4ss\\xE4 teht\\xE4v\\xE4ss\\xE4. Kun kutsut metodia Multiply, tallenna muuttuneet arvot instanssimuuttujaan!\"), mdx(\"p\", null, \"Esimerkki luokan toiminnasta:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  Multiplier multiplyByThree = new Multiplier(3);\\n\\n  Console.WriteLine(\\\"multiplyByThree.Multiply(2): \\\" + multiplyByThree.Multiply(2));\\n\\n  Multiplier multiplyByFour = new Multiplier(4);\\n\\n  Console.WriteLine(\\\"multiplyByFour.Multiply(2): \\\" + multiplyByFour.Multiply(2));\\n  Console.WriteLine(\\\"multiplyByThree.Multiply(1): \\\" + multiplyByThree.Multiply(1));\\n  Console.WriteLine(\\\"multiplyByFour.Multiply(1): \\\" + multiplyByFour.Multiply(1));\\n  Console.WriteLine(\\\"multiplyByFour.Multiply(3): \\\" + multiplyByFour.Multiply(3));\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"multiplyByThree.Multiply(2): 6\\nmultiplyByFour.Multiply(2): 8\\nmultiplyByThree.Multiply(1): 6\\nmultiplyByFour.Multiply(1): 8\\nmultiplyByFour.Multiply(3): 24\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Talletettu arvo muuttuu metodin kutsujen aikana!\"), mdx(\"p\", null, \"Laskut ovat oikeasti (j\\xE4rjestyksess\\xE4):\"), mdx(\"p\", null, \"3 \", \"*\", \" 2 = 6\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"4 \", \"*\", \" 2 = 8\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"6 \", \"*\", \" 1 = 6\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"8 \", \"*\", \" 1 = 8\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"8 \", \"*\", \" 3 = 24\")), mdx(Exercise, {\n    title: '013 Statistics',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on valmiina luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Statistics\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise013\\n{\\n  public class Statistics\\n  {\\n    public int count {get; set;}\\n    public int sum { get; set; }\\n\\n    public NumberStatistics()\\n    {\\n      // alusta muuttuja count t\\xE4\\xE4ll\\xE4\\n    }\\n\\n    public void AddNumber(int number) {\\n        // lis\\xE4\\xE4 koodia\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Seuraava koodi esittelee valmiin koodin k\\xE4ytt\\xF6\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Statistics statistics = new Statistics();\\nstatistics.AddNumber(3);\\nstatistics.AddNumber(5);\\nstatistics.AddNumber(1);\\nstatistics.AddNumber(2);\\nConsole.WriteLine(\\\"Count: \\\" + statistics.count);\\nConsole.WriteLine(\\\"Sum: \\\" + statistics.sum);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Count: 4\\nSum: 11\\n\")), mdx(\"p\", null, \"Laajenna ohjelmaa seuraavasti:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kun numero lis\\xE4t\\xE4\\xE4n, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"count\"), \"-muuttujan arvo kasvaa yhdell\\xE4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kun numero lis\\xE4t\\xE4\\xE4n, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sum\"), \"-muuttujan arvo kasvaa lis\\xE4tt\\xE4v\\xE4n numeron arvolla\"))), mdx(Exercise, {\n    title: '014 Payment card',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"T\\xE4ss\\xE4 teht\\xE4v\\xE4ss\\xE4, luokka nimelt\\xE4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PaymentCard\"), \" luodaan, joka pyrkii j\\xE4ljittelem\\xE4\\xE4n kahvilan maksuprosessia.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1\")), mdx(\"p\", null, \"Pohjassa on valmiina tiedostot \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Program.cs\"), \" ja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PaymentCard.cs\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lis\\xE4\\xE4 luokka \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PaymentCard\"), \" projektiin oikeaan tiedostoon.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"T\\xE4yt\\xE4 luokalle konstruktori, joka ottaa parametrinaan kortin alkusaldon, ja asettaa sen kortin sis\\xE4iseen muuttujaan.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"T\\xE4yt\\xE4 metodi \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ToString\"), \" joka palauttaa kortin saldon muodossa \\\"The card has a balance of X euros\\\".\")), mdx(\"p\", null, \"T\\xE4ss\\xE4 on luokalle v\\xE4h\\xE4n pohjaa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise014\\n{\\n  public class PaymentCard\\n  {\\n    private double balance;\\n\\n    public PaymentCard(double openingBalance)\\n    {\\n      // Kirjoita t\\xE4h\\xE4n koodia\\n    }\\n\\n    public override string ToString()\\n    {\\n      // Kirjoita t\\xE4h\\xE4n koodia\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Seuraava koodi testaa luokkaa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  PaymentCard card = new PaymentCard(50);\\n  Console.WriteLine(card);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The card has a balance of 50 euros\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2\")), mdx(\"p\", null, \"Laajenna vastaustasi lis\\xE4\\xE4m\\xE4ll\\xE4 kaksi metodia:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Metodi \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public void EatLunch()\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Metodi \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public void DrinkCoffee()\"))), mdx(\"p\", null, \"Metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EatLunch\"), \" v\\xE4hent\\xE4\\xE4 kortin saldoa 10.60 eurolla. Metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DrinkCoffee\"), \" v\\xE4hent\\xE4\\xE4 kortin saldoa 2.0 eurolla.\"), mdx(\"p\", null, \"Seuraava koodi testaa luokkaa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  PaymentCard card = new PaymentCard(50);\\n  Console.WriteLine(card);\\n\\n  card.EatLunch();\\n  Console.WriteLine(card);\\n  \\n  card.DrinkCoffee();\\n  Console.WriteLine(card);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The card has a balance of 50 euros\\nThe card has a balance of 39.4 euros\\nThe card has a balance of 37.4 euros\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 3\")), mdx(\"p\", null, \"Laajenna vastaustasi, niin ett\\xE4 kun ostoksia tehd\\xE4\\xE4n, tarkistetaan my\\xF6s saldo. Jos kortilla ei ole tarpeeksi rahaa, saldo ei muutu.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  PaymentCard card = new PaymentCard(10);\\n  Console.WriteLine(card);\\n\\n  card.EatLunch();\\n  Console.WriteLine(card);\\n  \\n  card.DrinkCoffee();\\n  Console.WriteLine(card);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The card has a balance of 10 euros\\nThe card has a balance of 10 euros\\nThe card has a balance of 8 euros\\n\")), mdx(\"p\", null, \"Huomaa kuinka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EatLunch\"), \" ei muuttanut saldoa, koska rahaa ei ollut tarpeeksi. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DrinkCoffee\"), \" toimi kuten pit\\xE4\\xE4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 4\")), mdx(\"p\", null, \"Laajenna vastaustasi, niin ett\\xE4 kortille voi ladata rahaa. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public void AddMoney(double amount) {\\n    // Kirjoita t\\xE4h\\xE4n koodia\\n}\\n\")), mdx(\"p\", null, \"Metodin tarkoituksena on lis\\xE4t\\xE4 kortin saldoa parametrina annetulla summalla. Kuitenkin, kortin saldo ei saa ylitt\\xE4\\xE4 150 euroa. Jos ladattava summa on suurempi kuin 150, kortin saldo on 150 euroa. Seuraava koodi testaa luokan toimintaa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  PaymentCard card = new PaymentCard(100);\\n  Console.WriteLine(card);\\n\\n  card.AddMoney(49.99);\\n  Console.WriteLine(card);\\n\\n  card.AddMoney(10000.0);\\n  Console.WriteLine(card);\\n\\n  card.AddMoney(-10);\\n  Console.WriteLine(card);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The card has a balance of 100 euros\\nThe card has a balance of 149.99 euros\\nThe card has a balance of 150 euros\\nThe card has a balance of 150 euros\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Et voi lis\\xE4t\\xE4 negatiivista summaa!\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#luokat-ja-oliot","title":"Luokat ja oliot"},{"url":"#luokkien-luominen","title":"Luokkien luominen","items":[{"url":"#uuden-luokan-luominen","title":"Uuden luokan luominen"}]},{"url":"#konstruktorin-m√§√§ritt√§minen","title":"Konstruktorin m√§√§ritt√§minen"},{"url":"#metodin-m√§√§ritt√§minen-oliolle","title":"Metodin m√§√§ritt√§minen oliolle"},{"url":"#instanssimuuttujien-arvojen-muuttaminen-metodissa","title":"Instanssimuuttujien arvojen muuttaminen metodissa"},{"url":"#arvon-palauttaminen-metodista","title":"Arvon palauttaminen metodista"},{"url":"#olion-merkkijonoesitys-ja-tostring-metodi","title":"Olion merkkijonoesitys ja ToString-metodi"},{"url":"#metodin-parametrit","title":"Metodin parametrit"},{"url":"#parametrilla-ja-instanssimuuttujalla-voi-olla-sama-nimi","title":"Parametrilla ja instanssimuuttujalla voi olla sama nimi!"},{"url":"#sis√§isen-metodin-kutsuminen","title":"Sis√§isen metodin kutsuminen"}]},{"url":"#teht√§v√§t","title":"Teht√§v√§t"}]},"frontmatter":{"title":"Olio-ohjelmointi"}}},"pageContext":{"id":"a95794c2-7a02-5ba4-ac81-9c0a3ac62c8c"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}