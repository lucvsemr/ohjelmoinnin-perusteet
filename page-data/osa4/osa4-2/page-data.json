{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa4/osa4-2",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Oliot listassa\",\n  \"nav_order\": 2,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Listan parametri m\\xE4\\xE4ritt\\xE4\\xE4 listan sis\\xE4lt\\xE4mien muuttujien tyypin. Esimerkiksi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List<string>\"), \" sis\\xE4lt\\xE4\\xE4 merkkijonoja, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List<int>\"), \" kokonaislukuja ja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List<double>\"), \" liukulukuja.\"), mdx(\"p\", null, \"Alla olevassa esimerkiss\\xE4 lis\\xE4t\\xE4\\xE4n merkkijonoja listaan, jonka j\\xE4lkeen listan merkkijonot tulostetaan yksi kerrallaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> names = new List<string>();\\n\\n// merkkijono voidaan ensin tallentaa muuttujaan\\nstring betty = \\\"Betty Jennings\\\";\\n// sitten lis\\xE4t\\xE4 listaan\\nnames.Add(betty);\\n\\n// merkkijonoja voidaan lis\\xE4t\\xE4 suoraan listaan:\\nnames.Add(\\\"Betty Snyder\\\");\\nnames.Add(\\\"Frances Spence\\\");\\nnames.Add(\\\"Kay McNulty\\\");\\nnames.Add(\\\"Marlyn Wescoff\\\");\\nnames.Add(\\\"Ruth Lichterman\\\");\\n\\n// useita erilaisia toistorakenteita voidaan\\n// k\\xE4ytt\\xE4\\xE4 listan l\\xE4pik\\xE4ymiseen\\n\\n// 1. while-silmukka ehdolla\\nint index = 0;\\nwhile (index < names.Count)\\n{\\n  Console.WriteLine(names[index]);\\n  index = index + 1;\\n}\\n\\n// 2. for-silmukka indeksill\\xE4\\nfor (int i = 0; i < names.Count; i++)\\n{\\n  Console.WriteLine(names[i]);\\n}\\n\\nConsole.WriteLine();\\n// 3. foreach-silmukka (ei indeksi\\xE4)\\nforeach (string name in names)\\n{\\n  Console.WriteLine(name);\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"olioiden-lisääminen-listaan\"\n  }, \"Olioiden lis\\xE4\\xE4minen listaan\"), mdx(\"p\", null, \"Merkkijonot ovat olioita, joten ei pit\\xE4isi tulla yll\\xE4tyksen\\xE4, ett\\xE4 listoissa voi olla my\\xF6s muita olioita. Seuraavaksi tarkastellaan listojen ja olioiden yhteispeli\\xE4 tarkemmin.\"), mdx(\"p\", null, \"Oletetaan ett\\xE4 meill\\xE4 on k\\xE4yt\\xF6ss\\xE4 alla oleva luokka, joka kuvaa henkil\\xF6\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  public string name { get; }\\n  public int age { get; set; }\\n  public int weight { get; set; }\\n  public int height { get; set; }\\n\\n  public Person(string name)\\n  {\\n    this.age = 0;\\n    this.weight = 0;\\n    this.height = 0;\\n    this.name = name;\\n  }\\n\\n  public double BodyMassIndex()\\n  {\\n    double heigthPerHundred = this.height / 100.0;\\n    return this.weight / (heigthPerHundred * heigthPerHundred);\\n  }\\n\\n  public void GrowOlder()\\n  {\\n    if (this.age < 100)\\n    {\\n      this.age = this.age + 1;\\n    }\\n  }\\n\\n  public bool IsOfLegalAge()\\n  {\\n    return this.age >= 18;\\n  }\\n\\n\\n  public override string ToString()\\n  {\\n    return this.name + \\\", age \\\" + this.age + \\\" years\\\";\\n  }\\n}\\n\")), mdx(\"p\", null, \"Olioiden k\\xE4sittely listassa ei ole mitenk\\xE4\\xE4n erilaista kuin aiempi kokemuksemme listoista. Ainoa olennainen ero on vain se, ett\\xE4 listaa luodessa m\\xE4\\xE4ritell\\xE4\\xE4n talletettavien olioiden tyyppi.\"), mdx(\"p\", null, \"Alla olevassa esimerkiss\\xE4 luodaan ensin lista, johon talletetaan Person-tyypin olioita, jonka j\\xE4lkeen henkil\\xF6it\\xE4 lis\\xE4t\\xE4\\xE4n listaan. Lopuksi henkil\\xF6-oliot tulostetaan yksi kerrallaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  List<Person> persons = new List<Person>();\\n\\n  // henkil\\xF6-olio voidaan luoda ensin\\n  Person john = new Person(\\\"John\\\");\\n  // ja sitten lis\\xE4t\\xE4 listaan\\n  persons.Add(john);\\n\\n  // henkil\\xF6-olioita voidaan luoda my\\xF6s \\\"samalla lauseella\\\" kun ne lis\\xE4t\\xE4\\xE4n listaan\\n  persons.Add(new Person(\\\"Matthew\\\"));\\n  persons.Add(new Person(\\\"Martin\\\"));\\n\\n  foreach (Person person in persons)\\n  {\\n    Console.WriteLine(person);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"John, age 0 years\\nMatthew, age 0 years\\nMartin, age 0 years\\n\")), mdx(\"h2\", {\n    \"id\": \"käyttäjän-syöttämien-olioiden-lisääminen-listaan\"\n  }, \"K\\xE4ytt\\xE4j\\xE4n sy\\xF6tt\\xE4mien olioiden lis\\xE4\\xE4minen listaan\"), mdx(\"p\", null, \"Aiemmin oppimamme rakenne sy\\xF6tteen lukemiseen on edelleen hyvin k\\xE4ytt\\xF6kelpoinen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  List<Person> persons = new List<Person>();\\n\\n  // Lue henkil\\xF6iden nimet k\\xE4ytt\\xE4j\\xE4lt\\xE4\\n  while (true)\\n  {\\n    Console.Write(\\\"Enter a name, empty will stop: \\\");\\n    string name = Console.ReadLine();\\n    if (name == \\\"\\\")\\n    {\\n      break;\\n    }\\n\\n    // Lis\\xE4\\xE4 listaan uusi henkil\\xF6\\n    // jonka nimi on edellinen k\\xE4ytt\\xE4j\\xE4n sy\\xF6te\\n    persons.Add(new Person(name));\\n  }\\n\\n  // Tulosta sy\\xF6tettyjen henkil\\xF6iden lukum\\xE4\\xE4r\\xE4, ja niiden yksil\\xF6lliset tiedot\\n  Console.WriteLine();\\n  Console.WriteLine(\\\"Persons in total: \\\" + persons.Count);\\n  Console.WriteLine(\\\"Persons: \\\");\\n\\n  foreach (Person person in persons)\\n  {\\n    Console.WriteLine(person);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Enter a name, empty will stop: Matt\\nEnter a name, empty will stop: Mike\\nEnter a name, empty will stop: Bob\\nEnter a name, empty will stop: \\n\\nPersons in total: 3\\nPersons: \\nMatt, age 0 years\\nMike, age 0 years\\nBob, age 0 years\\n\")), mdx(\"h2\", {\n    \"id\": \"monta-konstruktorin-parametria\"\n  }, \"Monta konstruktorin parametria\"), mdx(\"p\", null, \"Jos konstruktori vaatii useamman kuin yhden parametrin, voidaan k\\xE4ytt\\xE4j\\xE4lt\\xE4 kysy\\xE4 lis\\xE4tietoja. Oletetaan, ett\\xE4 luokalla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \" on seuraava konstruktori.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  public string name { get; }\\n  public int age { get; set; }\\n  public int weight { get; set; }\\n  public int height { get; set; }\\n\\n  public Person(string name, int age)\\n  {\\n    this.age = age;\\n    this.name = name;\\n    this.weight = 0;\\n    this.height = 0;\\n  }\\n\\n  // Loput koodista on sama kuin aiemmin\\n}\\n\")), mdx(\"p\", null, \"T\\xE4ss\\xE4 tapauksessa olio luodaan kutsumalla kaksiparametrista konstruktoria.\"), mdx(\"p\", null, \"Jos haluamme kysy\\xE4 k\\xE4ytt\\xE4j\\xE4lt\\xE4 t\\xE4llaisia olioita, niin jokaiselta parametrilta t\\xE4ytyy kysy\\xE4 erikseen. Esimerkiss\\xE4 alla kysyt\\xE4\\xE4n ensin nimi ja sitten ik\\xE4. Tyhj\\xE4 nimi lopettaa lukemisen.\"), mdx(\"p\", null, \"Henkil\\xF6t tulostetaan sen j\\xE4lkeen kun ne on luettu.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  List<Person> persons = new List<Person>();\\n\\n  // Lue henkil\\xF6iden nimet k\\xE4ytt\\xE4j\\xE4lt\\xE4\\n  while (true)\\n  {\\n    Console.Write(\\\"Enter a name, empty will stop: \\\");\\n    string name = Console.ReadLine();\\n    if (name == \\\"\\\")\\n    {\\n      break;\\n    }\\n\\n    // Lue henkil\\xF6n ik\\xE4\\n    Console.Write(\\\"Enter the age of the person \\\" + name + \\\": \\\");\\n\\n    int age = Convert.ToInt32(Console.ReadLine());\\n\\n    // Lis\\xE4\\xE4 listaan uusi henkil\\xF6\\n    // jonka nimi ja ik\\xE4 ovat edellinen k\\xE4ytt\\xE4j\\xE4n sy\\xF6tteet\\n    persons.Add(new Person(name, age));\\n  }\\n\\n  // Tulosta sy\\xF6tettyjen henkil\\xF6iden lukum\\xE4\\xE4r\\xE4, ja niiden yksil\\xF6lliset tiedot\\n  Console.WriteLine();\\n  Console.WriteLine(\\\"Persons in total: \\\" + persons.Count);\\n  Console.WriteLine(\\\"Persons: \\\");\\n\\n  foreach (Person person in persons)\\n  {\\n    Console.WriteLine(person);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Enter a name, empty will stop: Mike Modeler \\nEnter the age of the person Mike Modeler: 42\\nEnter a name, empty will stop: Nelson M\\nEnter the age of the person Nelson M: 1000\\nEnter a name, empty will stop: Harry Booter\\nEnter the age of the person Harry Booter: 1\\nEnter a name, empty will stop: \\n\\nPersons in total: 3\\nPersons: \\nMike Modeler, age 42 years\\nNelson M, age 1000 years\\nHarry Booter, age 1 years\\n\")), mdx(\"p\", null, \"Yll\\xE4 olevassa esimerkiss\\xE4 vaadittiin k\\xE4ytt\\xE4j\\xE4lt\\xE4 tietoja rivi rivilt\\xE4. Ei miss\\xE4\\xE4n nimess\\xE4 ole mahdotonta kysy\\xE4 sy\\xF6tett\\xE4 tietynlaisessa muodossa, esim. pilkulla eroteltuna.\"), mdx(\"p\", null, \"Jos nimi ja ik\\xE4 olisivat eroteltu pilkulla, niin ohjelma voisi toimia seuraavasti.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  List<Person> persons = new List<Person>();\\n\\n  // Lue henkil\\xF6n tiedot k\\xE4ytt\\xE4j\\xE4lt\\xE4\\n  while (true)\\n  {\\n    Console.WriteLine(\\\"Enter the person details separated by a comma, e.g.: Randall, 2\\\");\\n    string details = Console.ReadLine();\\n    if (details == \\\"\\\")\\n    {\\n      break;\\n    }\\n\\n    string[] parts = details.Split(\\\",\\\");\\n    string name = parts[0];\\n    int age = Convert.ToInt32(parts[1]);\\n    persons.Add(new Person(name, age));\\n  }\\n\\n  // Tulosta sy\\xF6tettyjen henkil\\xF6iden lukum\\xE4\\xE4r\\xE4, ja niiden yksil\\xF6lliset tiedot\\n  Console.WriteLine();\\n  Console.WriteLine(\\\"Persons in total: \\\" + persons.Count);\\n  Console.WriteLine(\\\"Persons: \\\");\\n\\n  foreach (Person person in persons)\\n  {\\n    Console.WriteLine(person);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Enter the person details separated by a comma, e.g.: Randall, 2\\nMatt, 23\\nEnter the person details separated by a comma, e.g.: Randall, 2\\nMike Pence, 3\\nEnter the person details separated by a comma, e.g.: Randall, 2\\n\\n\\nPersons in total: 2\\nPersons: \\nMatt, age 23 years\\nMike Pence, age 3 years\\n\")), mdx(\"h2\", {\n    \"id\": \"valikoiva-tulostus-listasta\"\n  }, \"Valikoiva tulostus listasta\"), mdx(\"p\", null, \"Voit my\\xF6s tarkastella listan sis\\xE4lt\\xF6\\xE4, kun k\\xE4yt listaa l\\xE4pi. Alla olevassa esimerkiss\\xE4 kysyt\\xE4\\xE4n ensin ik\\xE4rajaa, jonka j\\xE4lkeen tulostetaan kaikki ne oliot, joiden ik\\xE4 on v\\xE4hint\\xE4\\xE4n k\\xE4ytt\\xE4j\\xE4n antama luku.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Tehd\\xE4\\xE4n lista, jossa on pari henkil\\xF6\\xE4\\nList<Person> persons = new List<Person>();\\npersons.Add(new Person(\\\"Martin\\\", 11));\\npersons.Add(new Person(\\\"Matthew\\\", 12));\\n\\n// Kysyt\\xE4\\xE4n ik\\xE4raja\\nConsole.Write(\\\"What is the age limit? \\\");\\nint ageLimit = Convert.ToInt32(Console.ReadLine());\\n\\n// Tulostetaan vain ne, joiden ik\\xE4 on v\\xE4hint\\xE4\\xE4n ik\\xE4raja\\nforeach (Person person in persons) {\\n  if (person.age >= ageLimit)\\n  { \\n    Console.WriteLine(person);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"What is the age limit? 12\\nMatthew, age 12 years\\n\")), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Exercise, {\n    title: '015 Main class',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"T\\xE4yt\\xE4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Program\"), \"luokan metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \", joka kuvaillaan alla.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"\\xC4l\\xE4 muokkaa luokkaa Item\"), mdx(\"p\", null, \"Kirjoita ohjelma, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 esineiden nimi\\xE4. Jos nimi on tyhj\\xE4, ohjelma lopettaa lukemisen. Muussa tapauksessa annettu nimi k\\xE4ytet\\xE4\\xE4n uuden esineen luomiseen, jonka lis\\xE4\\xE4t sitten esineiden listaan.\"), mdx(\"p\", null, \"Kun kaikki nimet on luettu, tulosta kaikki esineet k\\xE4ytt\\xE4m\\xE4ll\\xE4 Item-luokan ToString-metodia. Item-luokan toteutus pit\\xE4\\xE4 kirjaa esineen luomisajasta, lis\\xE4ksi esineell\\xE4 on nimi.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Listan nimen on pakko olla \\\"items\\\" jotta testit toimivat!\"), mdx(\"p\", null, \"Esimerkkituloste:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Name: Hammer\\nName: Radio\\nName: Hot Potato\\nName: \\n\\nHammer (created at: 9.2.2020 13.48.16)\\nRadio (created at: 9.2.2020 13.48.18)\\nHot Potato (created at: 9.2.2020 13.48.21)\\n\"))), mdx(Exercise, {\n    title: '016 Personal information',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"T\\xE4ss\\xE4 kuvailtu ohjelma tulee toteuttaa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Program\"), \"luokan metodiin \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \".\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"\\xC4l\\xE4 muokkaa luokkaa PersonalInformation\"), mdx(\"p\", null, \"Kun k\\xE4ytt\\xE4j\\xE4 on sy\\xF6tt\\xE4nyt kaikki tiedot, eli tyhj\\xE4n merkkijonon, poistu toistorakenteesta.\"), mdx(\"p\", null, \"Tulosta yksi tyhj\\xE4 rivi selkeyden vuoksi.\"), mdx(\"p\", null, \"Sitten tulosta kaikkien henkil\\xF6iden tiedot siten, ett\\xE4 ne tulostetaan oikeassa formaatissa: etunimi ja sukunimi v\\xE4lily\\xF6nnill\\xE4 erotettuna (\\xE4l\\xE4 tulosta henkil\\xF6tunnusta). Esimerkki ohjelman toiminnasta on annettu alla:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First name: \\n> Jean \\nLast name: \\n> Bartik \\nIdentification number: \\n> 271224 \\nFirst name: \\n> Betty \\nLast name: \\n> Holberton \\nIdentification number: \\n> 070317 \\nFirst name:\\n>\\n\\nJean Bartik \\nBetty Holberton\\n\")), mdx(\"p\", null, \"Voit (ja kannattaa) pyyt\\xE4\\xE4 henkil\\xF6tunnusta merkkijonona.\")), mdx(Exercise, {\n    title: '017 Television guide',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on valmiina luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TelevisionProgram\"), \", joka kuvaa televisio-ohjelmaa. Luokalla on oliomuuttujat \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" ja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"duration\"), \", konstruktori sek\\xE4 muutama metodi.\"), mdx(\"p\", null, \"Luo ohjelma (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" metodissa) joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 televisio-ohjelmia ja niiden pituuksia. Kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 tyhj\\xE4n merkkijonon, lukeminen lopetetaan.\"), mdx(\"p\", null, \"T\\xE4m\\xE4n j\\xE4lkeen k\\xE4ytt\\xE4j\\xE4lt\\xE4 kysyt\\xE4\\xE4n ohjelman maksimikestoa. Kun maksimikesto on saatu, ohjelma listaa kaikki ne ohjelmat, joiden kesto on pienempi tai yht\\xE4 suuri kuin maksimikesto.\"), mdx(\"p\", null, \"Ohjelman tulee toimia kuten alla:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Name: Rick and Morty \\nDuration: 25 \\nName: Two and a Half Men \\nDuration: 30 \\nName: Love it or list it \\nDuration: 60 \\nName: House \\nDuration: 60\\nName:\\n\\nProgram's maximum duration? 30 \\nRick and Morty, 25 minutes \\nTwo and a Half Men, 30 minutes\\n\"))), mdx(Exercise, {\n    title: '018 Book class',\n    mdxType: \"Exercise\"\n  }, mdx(Note, {\n    mdxType: \"Note\"\n  }, \"T\\xE4m\\xE4 teht\\xE4v\\xE4 on 2 pisteen arvoinen, ilman erillisi\\xE4 osioita.\"), mdx(\"p\", null, \"Kirjoita ohjelma joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 kirjoja. Kysytt\\xE4viin tietoihin kuuluu kirjan nimi, sivum\\xE4\\xE4r\\xE4 sek\\xE4 julkaisuvuosi. Sy\\xF6tteen lukeminen lopetetaan kun k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 tyhj\\xE4n merkkijonon.\"), mdx(\"p\", null, \"T\\xE4m\\xE4n j\\xE4lkeen k\\xE4ytt\\xE4j\\xE4lt\\xE4 kysyt\\xE4\\xE4n, mit\\xE4 halutaan tulostaa. Jos k\\xE4ytt\\xE4j\\xE4 antaa \\\"everything\\\", kaikki yksityiskohdat tulostetaan: kirjojen nimet, sivum\\xE4\\xE4r\\xE4t ja julkaisuvuodet. Jos k\\xE4ytt\\xE4j\\xE4 antaa sy\\xF6tteen \\\"title\\\", vain kirjojen nimet tulostetaan. Jos tuloste on jotain muuta, ohjelma ei tulosta mit\\xE4\\xE4n.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Toteuta luokka Book.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Toteuta toiminnallisuus Main-metodissa.\")), mdx(\"p\", null, \"Esimerkki ohjelman Main-metodin toiminnasta:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"\\nName: To Kill a Mockingbird \\nPages: 281 \\nPublication year: 1960 \\nName: A Brief History of Time \\nPages: 256 \\nPublication year: 1988 \\nName: Beautiful Code \\nPages: 593 \\nPublication year: 2007 \\nName: The Name of the Wind \\nPages: 662 \\nPublication year: 2007 \\nName:\\n\\nWhat information will be printed? everything \\nTo Kill a Mockingbird, 281 pages, 1960 \\nA Brief History of Time, 256 pages, 1988 \\nBeautiful Code, 593 pages, 2007 \\nThe Name of the Wind, 662 pages, 2007\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Name: To Kill a Mockingbird \\nPages: 281 \\nPublication year: 1960 \\nName: A Brief History of Time \\nPages: 256 \\nPublication year: 1988 \\nName: Beautiful Code \\nPages: 593 \\nPublication year: 2007 \\nName: The Name of the Wind \\nPages: 662 \\nPublication year: 2007 \\nName:\\n\\nWhat information will be printed? title \\nTo Kill a Mockingbird \\nA Brief History of Time \\nBeautiful Code \\nThe Name of the Wind\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#olioiden-lisääminen-listaan","title":"Olioiden lisääminen listaan"},{"url":"#käyttäjän-syöttämien-olioiden-lisääminen-listaan","title":"Käyttäjän syöttämien olioiden lisääminen listaan"},{"url":"#monta-konstruktorin-parametria","title":"Monta konstruktorin parametria"},{"url":"#valikoiva-tulostus-listasta","title":"Valikoiva tulostus listasta"}]},{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Oliot listassa"}}},"pageContext":{"id":"f30295e8-a190-5a2a-ace8-2e9c087bd6d0"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}