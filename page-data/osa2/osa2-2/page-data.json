{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa2/osa2-2",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Lisää silmukoita\",\n  \"nav_order\": 2,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Osassa 1 tutustuimme yksin kertaiseen while-silmukkaan\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true)\\n{\\n  // Tee jotain\\n}\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 on eritt\\xE4in hy\\xF6dyllinen kun ohjelman t\\xE4ytyy toistaa jotain toiminnallisuutta kunnes k\\xE4ytt\\xE4j\\xE4 antaa tietyn sy\\xF6tteen.\"), mdx(\"p\", null, \"Seuraavaksi tutustumme muutamaan muuhun tapaan toteuttaa silmukoita.\"), mdx(\"h2\", {\n    \"id\": \"while-silmukka-ehdolla\"\n  }, \"While-silmukka ehdolla\"), mdx(\"p\", null, \"T\\xE4h\\xE4n asti olemme k\\xE4ytt\\xE4neet silmukkaa \\\"true\\\" ehdolla, jolloin silmukka toistuu ikuisesti (tai kunnes silmukka lopetetaan \\\"break\\\" komennolla).\"), mdx(\"p\", null, \"Todellisuudessa silmukan sulkeet sis\\xE4lt\\xE4v\\xE4t ehtolauseen, tai ehdon, aivan kuten \\\"if-lauseen\\\" sulkeet. True arvo voidaan korvata lausekkeella, joka arvioidaan ohjelman suorituksen aikana. Lauseke m\\xE4\\xE4ritell\\xE4\\xE4n samalla tavalla kuin ehtolauseen ehto.\"), mdx(\"p\", null, \"Seuraava koodi tulostaa numerot 1,2,...,5. Kun muuttujan \\\"number\\\" arvo on yli 5, while-ehdon arvo arvoidaan olevan false ja suoritus p\\xE4\\xE4ttyy.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 1;\\n\\nwhile (number < 6)\\n{\\n  Console.WriteLine(number);\\n  number++;\\n}\\n\")), mdx(\"p\", null, \"Yll\\xE4 oleva koodi voidaan lukea \\\"Niin kauan kuin muuttujan \\\"number\\\" arvo on pienempi kuin 6, tulosta muuttujan \\\"number\\\" arvo ja lis\\xE4\\xE4 muuttujan \\\"number\\\" arvoa yhdell\\xE4\\\".\"), mdx(\"p\", null, \"Koodissa on my\\xF6s uusi tapa lis\\xE4t\\xE4 muuttujan arvoa. Yll\\xE4 olevassa koodissa muuttujan \\\"number\\\" arvoa lis\\xE4t\\xE4\\xE4n yhdell\\xE4 joka kerta kun silmukan sis\\xE4lt\\xF6 suoritetaan.\"), mdx(\"p\", null, \"Koodi tulostaa kuten alla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n3\\n4\\n5\\n\")), mdx(\"h2\", {\n    \"id\": \"for-silmukka-for-loop\"\n  }, \"For-silmukka (for-loop)\"), mdx(\"p\", null, \"Yll\\xE4 opimme kuinka \\\"while-silmukkaa\\\" ehdolla voidaan k\\xE4ytt\\xE4\\xE4 k\\xE4ym\\xE4\\xE4n l\\xE4pi numeroita tietyll\\xE4 v\\xE4lill\\xE4.\"), mdx(\"p\", null, \"T\\xE4llaisen silmukan rakenne on seuraava.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int i = 0;\\nwhile (i < 10)\\n{\\n  Console.WriteLine(i);\\n  i++;\\n}\\n\")), mdx(\"p\", null, \"Yll\\xE4 oleva silmukka voidaan jakaa kolmeen osaan. Ensin m\\xE4\\xE4ritell\\xE4\\xE4n muuttuja \\\"i\\\", jota k\\xE4ytet\\xE4\\xE4n silmukan toistojen laskemiseen, ja asetetaan sen arvoksi 0: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int i = 0;\"), \". T\\xE4m\\xE4n j\\xE4lkeen m\\xE4\\xE4ritell\\xE4\\xE4n silmukan ehto -- silmukka toistuu niin kauan kuin muuttujan \\\"i\\\" arvo on pienempi kuin 10: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"i < 10\"), \". Silmukan sis\\xE4lt\\xF6 sis\\xE4lt\\xE4\\xE4 toiminnallisuuden joka suoritetaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine(i);\"), \", jota seuraa muuttujan \\\"i\\\" arvon lis\\xE4\\xE4minen yhdell\\xE4 i++.\"), mdx(\"p\", null, \"Sama voidaan saavuttaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"for-silmukalla\"), \" n\\xE4in.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"for (int i = 0; i < 10; i++)\\n{\\n  Console.WriteLine(i);\\n}\\n\")), mdx(\"p\", null, \"For-silmukka koostuu nelj\\xE4st\\xE4 osasta:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"m\\xE4\\xE4ritell\\xE4\\xE4n muuttuja jota k\\xE4ytet\\xE4\\xE4n silmukan toistojen laskemiseen;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"silmukan ehto;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"muuttujan arvon lis\\xE4\\xE4minen (tai v\\xE4hent\\xE4minen tai muuttaminen); ja\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"toiminnallisuus joka suoritetaan.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"for (*muuttujan m\\xE4\\xE4rittely*; *ehto*; *muuttujan kasvattaminen*)\\n{\\n  // Toiminnallisuus\\n}\\n\")), mdx(\"p\", null, \"Tarkastellaan t\\xE4t\\xE4 toiminnassa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"for (int i = 0; i < 5; i++)\\n{\\n  Console.WriteLine(i);\\n}\\n\")), mdx(\"p\", null, \"Yll\\xE4 oleva esimerkki tulostaa numerot nollasta nelj\\xE4\\xE4n. V\\xE4lill\\xE4 voidaan k\\xE4ytt\\xE4\\xE4 my\\xF6s muuttujia -- alla oleva esimerkki k\\xE4ytt\\xE4\\xE4 muuttujia \\\"start\\\" ja \\\"end\\\" m\\xE4\\xE4rittelem\\xE4\\xE4n numeroiden v\\xE4lill\\xE4, jotka silmukka k\\xE4y l\\xE4pi.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int start = 3;\\nint end = 7;\\nfor (int i = start; i < end; i++)\\n{\\n  Console.WriteLine(i);\\n}\\n\")), mdx(\"p\", null, \"Jatkamme harjoittelua silmukoilla teht\\xE4viss\\xE4. Voit k\\xE4ytt\\xE4\\xE4 joko while-silmukkaa ehdolla tai for-silmukkaa.\"), mdx(\"h2\", {\n    \"id\": \"silmukan-suorituksen-lopettaminen\"\n  }, \"Silmukan suorituksen lopettaminen\"), mdx(\"p\", null, \"Silmukka ei lopeta suoritustaan v\\xE4litt\\xF6m\\xE4sti kun sen ehto arvioidaan todeksi. Silmukan ehto arvioidaan silmukan suorituksen alussa, eli\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"kun seuraava suoritettava lauseke on silmukka, ja\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"silmukan sis\\xE4lt\\xF6 on suoritettu.\")), mdx(\"p\", null, \"Katsotaan seuraavaa silmukkaa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 1;\\n\\nwhile (number != 2)\\n{\\n  Console.WriteLine(number);\\n  number = 2;\\n  Console.WriteLine(number);\\n  number = 1;\\n}\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 tulostaa\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n1\\n2\\n... keeps on going forever\\n\")), mdx(\"p\", null, \"Vaikka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number\"), \" on yht\\xE4 kuin 2 jossain vaiheessa, silmukka suoritetaan ikuisesti.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Silmukan ehto arvioidaan silmukan suorituksen alussa ja silmukan suorituksen p\\xE4\\xE4stess\\xE4 sulkevaan aaltosulkeeseen.\"), \" Jos ehto on tosi, suoritus jatkuu silmukan alusta. Jos ehto on ep\\xE4tosi, suoritus jatkuu ensimm\\xE4isest\\xE4 lausekkeesta aaltosulkeiden j\\xE4lkeen (eli silmukan j\\xE4lkeen).\"), mdx(\"p\", null, \"T\\xE4m\\xE4 p\\xE4tee my\\xF6s for-silmukkaan. Alle olevassa esimerkiss\\xE4, silmukan suoritus -- v\\xE4\\xE4rin ymm\\xE4rrettyn\\xE4 -- pit\\xE4isi loppua kun i on yht\\xE4 kuin 100. Kuitenkin, se ei lopu.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"for (int i = 0; i != 100; i++)\\n{\\n  Console.WriteLine(i);\\n  i = 100;\\n  Console.WriteLine(i);\\n  i = 0;\\n}\\n\")), mdx(\"p\", null, \"Yll\\xE4 oleva silmukka ei koskaan lakkaa suoritusta.\"), mdx(\"h2\", {\n    \"id\": \"toiminnallisuuden-toistaminen\"\n  }, \"Toiminnallisuuden toistaminen\"), mdx(\"p\", null, \"Yksi yleinen ohjelmatyyppi on \\\"tee jotain tietty m\\xE4\\xE4r\\xE4 kertoja\\\". Yhteist\\xE4 n\\xE4ille ohjelmille on toistuvuus. Jotain toiminnallisuutta toistetaan, ja laskuri muuttuja k\\xE4ytet\\xE4\\xE4n pit\\xE4m\\xE4\\xE4n kirjaa toistoista.\"), mdx(\"p\", null, \"Seuraava ohjelma laskee tulon 4\", \"*\", \"3 hieman k\\xF6mpel\\xF6sti, eli summana 3 + 3 + 3 + 3:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int result = 0;\\n\\nint i = 0;\\nwhile (true)\\n{\\n  result += 3; // lyhenne lausekkeelle result = result + 3\\n  i++;  // lyhenne lausekkeelle i = i + 1\\n\\n  if (i == 4)\\n  {\\n      break;\\n  }\\n}\\n\\nConsole.WriteLine(result);\\n\")), mdx(\"p\", null, \"Sama toiminnallisuus voidaan saavuttaa seuraavalla koodilla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int result = 0;\\n\\nint i = 0;\\nwhile (i < 4)\\n{\\n  result += 3; // lyhenne lausekkeelle result = result + 3\\n  i++;  // lyhenne lausekkeelle i = i + 1\\n}\\n\\nConsole.WriteLine(result);\\n\")), mdx(\"p\", null, \"Tai k\\xE4ytt\\xE4m\\xE4ll\\xE4 for-silmukkaa kuten seuraavassa n\\xE4hd\\xE4\\xE4n.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int result = 0;\\n\\nfor (int i = 0; i < 4; i++)\\n{\\n  result += 3;\\n}\\n\\nConsole.WriteLine(result);\\n\")), mdx(\"p\", null, \"While-silmukan suoritus on visualisoitu alla.\"), mdx(\"p\", null, \"Kun muuttujien m\\xE4\\xE4r\\xE4 kasvaa, ohjelman ymm\\xE4rt\\xE4minen vaikeutuu. Ohjelman suorituksen simulointi voi auttaa ymm\\xE4rt\\xE4m\\xE4\\xE4n sit\\xE4.\"), mdx(\"p\", null, \"Voit simuloida ohjelman suoritusta piirt\\xE4m\\xE4ll\\xE4 taulukon, jossa on sarakkeet jokaiselle muuttujalle ja ehdolle, ja erillinen tila ohjelman tulostukselle. K\\xE4yt sitten l\\xE4pi l\\xE4hdekoodin rivi rivilt\\xE4, ja kirjoitat muutokset ohjelman tilaan (jokaisen muuttujan tai ehtolauseen arvon), ja ohjelman tulostuksen.\"), mdx(\"p\", null, \"Arvot muuttujille \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"result\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"i\"), \" edellisest\\xE4 esimerkist\\xE4 on kirjoitettu taulukkoon alla jokaisella kerralla kun ehto \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"i < 4\"), \" arvioidaan.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"result\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"i\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"i < 4\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"0\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"0\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"3\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"1\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"6\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"2\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"9\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"3\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"12\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"false\")))), mdx(\"h2\", {\n    \"id\": \"ohjelman-rakenteesta-silmukoiden-avulla\"\n  }, \"Ohjelman rakenteesta silmukoiden avulla\"), mdx(\"p\", null, \"Edellisiss\\xE4 esimerkeiss\\xE4, olemme keskittyneet tapauksiin joissa silmukka suoritetaan ennalta m\\xE4\\xE4r\\xE4tyn m\\xE4\\xE4r\\xE4n kertoja. Toistojen m\\xE4\\xE4r\\xE4 voi perustua k\\xE4ytt\\xE4j\\xE4n sy\\xF6tteeseen -- n\\xE4iss\\xE4 tapauksissa for-silmukka on k\\xE4tev\\xE4.\"), mdx(\"p\", null, \"Ohjelmissa joissa silmukka suoritetaan kunnes k\\xE4ytt\\xE4j\\xE4 antaa tietyn sy\\xF6tteen, for-silmukka ei ole paras vaihtoehto. T\\xE4llaisissa tapauksissa, while-true silmukka jota harjoittelimme aiemmin toimii hyvin. \"), mdx(\"p\", null, \"Katsotaan v\\xE4h\\xE4n monimutkaisempaa ohjelmaa, joka lukee kokonaislukuja k\\xE4ytt\\xE4j\\xE4lt\\xE4. Ohjelma k\\xE4sittelee negatiiviset luvut virheellisin\\xE4, ja nolla lopettaa silmukan. Kun k\\xE4ytt\\xE4j\\xE4 antaa nollan, ohjelma tulostaa kelvollisten lukujen summan, kelvollisten lukujen m\\xE4\\xE4r\\xE4n ja virheellisten lukujen m\\xE4\\xE4r\\xE4n.\"), mdx(\"p\", null, \"Mahdollinen ratkaisu on esitetty alla. Kuitenkin, esimerkin tyyli ei ole ihanteellinen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.Write(\\\"Write numbers, negative numbers are invalid: \\\");\\nint sum = 0;\\nint validNumbers = 0;\\nint invalidNumbers = 0;\\n\\nwhile (true)\\n{\\n  int input = Convert.ToInt32(Console.ReadLine());\\n\\n  if (input == 0)\\n  {\\n    Console.WriteLine(\\\"Sum of valid numbers: \\\" + sum);\\n    Console.WriteLine(\\\"Valid numbers: \\\" + validNumbers);\\n    Console.WriteLine(\\\"Invalid numbers: \\\" + invalidNumbers);\\n    break;\\n  }\\n\\n  if (input < 0) {\\n      invalidNumbers++;\\n      continue;\\n  }\\n\\n  sum += input;\\n  validNumbers++;\\n}\\n\")), mdx(\"p\", null, \"Yll\\xE4 olevassa koodissa, laskenta joka tulisi suorittaa silmukan p\\xE4\\xE4ttymisen j\\xE4lkeen, suoritetaan silmukan sis\\xE4ll\\xE4. T\\xE4m\\xE4 l\\xE4hestymistapa ei ole suositeltava, koska se voi johtaa hyvin monimutkaiseen ohjelman rakenteeseen. Jos jotain muuta -- esimerkiksi lis\\xE4\\xE4 sy\\xF6tteen lukemista -- pit\\xE4isi tehd\\xE4 silmukan p\\xE4\\xE4ttymisen j\\xE4lkeen, se voisi helposti p\\xE4\\xE4ty\\xE4 silmukan sis\\xE4lle. Mit\\xE4 enemm\\xE4n toiminnallisuutta tarvitaan, ohjelman rakenteesta tulee yh\\xE4 hankalampi lukea.\"), mdx(\"p\", null, \"Pysytell\\xE4\\xE4n seuraavassa silmukkarakenteessa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Luo tarvittavat muuttujat\\n\\nwhile (true)\\n{\\n  // lue sy\\xF6te\\n\\n  // lopeta silmukka --break\\n\\n  // tarkista sy\\xF6tteen virheellisyys -- continue\\n\\n  // k\\xE4sittele kelvollinen sy\\xF6te\\n}\\n\\n// toiminnallisuus silmukan p\\xE4\\xE4ttymisen j\\xE4lkeen\\n\")), mdx(\"p\", null, \"Toisin sanoen, ohjelman rakenne on puhtaampi jos asiat jotka pit\\xE4\\xE4 tehd\\xE4 silmukan p\\xE4\\xE4ttymisen j\\xE4lkeen, sijoitetaan sen ulkopuolelle.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.Write(\\\"Write numbers, negative numbers are invalid: \\\");\\nint sum = 0;\\nint validNumbers = 0;\\nint invalidNumbers = 0;\\n\\nwhile (true)\\n{\\n  int input = Convert.ToInt32(Console.ReadLine());\\n\\n  if (input == 0) {\\n      break;\\n  }\\n\\n  if (input < 0) {\\n      invalidNumbers++;\\n      continue;\\n  }\\n\\n  sum += input;\\n  validNumbers++;\\n}\\n\\nConsole.WriteLine(\\\"Sum of valid numbers: \\\" + sum);\\nConsole.WriteLine(\\\"Valid numbers: \\\" + validNumbers);\\nConsole.WriteLine(\\\"Invalid numbers: \\\" + invalidNumbers);\\n\")), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Exercise, {\n    title: '005 Iterating to input',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Kirjoita ohjelma joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaisluvun. Ohjelma tulostaa luvusta 0 alkaen kaikki luvut k\\xE4ytt\\xE4j\\xE4n antamaan lukuun asti. Voit olettaa, ett\\xE4 k\\xE4ytt\\xE4j\\xE4 antaa positiivisen luvun. Alla on muutamia esimerkkej\\xE4 ohjelman toiminnasta.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Voit k\\xE4ytt\\xE4\\xE4 while-silmukkaa ehdolla, tai for-silmukkaa\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 4\\n0\\n1\\n2\\n3\\n4\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 1\\n0\\n1\\n\"))), mdx(Exercise, {\n    title: '006 Iterating to hundred',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Kirjoita ohjelma, joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaisluvun. Ohjelma tulostaa numerot siit\\xE4 luvusta numeroon 100. Voit olettaa, ett\\xE4 k\\xE4ytt\\xE4j\\xE4 antaa aina numeron joka on pienempi kuin 100. Alla on muutamia esimerkkej\\xE4 halutusta toiminnasta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 99\\n99\\n100\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> -4\\n-4\\n-3\\n-2\\n-1\\n0\\n1\\n... (lots of numbers in between) ...\\n98\\n99\\n100\\n\"))), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, \"T\\xE4st\\xE4 l\\xE4htien teht\\xE4v\\xE4t saattavat olla useassa osassa ohjeissa, jotta niiden ymm\\xE4rt\\xE4minen olisi helpompaa. Lopuksi sinulla pit\\xE4isi olla vain yksi ohjelma per teht\\xE4v\\xE4.\"), mdx(\"p\", null, \"Jokainen osio on laskettu erikseen, kun lasketaan teht\\xE4v\\xE4n kokonaispistem\\xE4\\xE4r\\xE4\\xE4. Esimerkiksi seuraava teht\\xE4v\\xE4, jossa on 2 osaa, lasketaan 2 pisteeksi kokonaispistem\\xE4\\xE4r\\xE4st\\xE4.\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Kun kaikki testit menev\\xE4t l\\xE4pi, olet tehnyt kaikki osat. Teht\\xE4v\\xE4st\\xE4 on mahdollista saada my\\xF6s vain osa pisteist\\xE4, jos vain osa testeist\\xE4 menee l\\xE4pi.\"), mdx(Exercise, {\n    title: '007 Where to and from',\n    mdxType: \"Exercise\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1\")), mdx(\"p\", null, \"Kirjoita ohjelma, joka tulostaa kokonaisluvut 1:st\\xE4 annettuun numeroon.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Where to? \\n>3 \\n1 \\n2 \\n3\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Where to? \\n>5 \\n1 \\n2 \\n3 \\n4 \\n5\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"K\\xE4ytt\\xE4j\\xE4lt\\xE4 annettu numero on nyt ehdon yl\\xE4raja. Muista, ett\\xE4 a <= b tarkoittaa a on pienempi tai yht\\xE4 suuri kuin b.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2 2\")), mdx(\"p\", null, \"Kysy k\\xE4ytt\\xE4j\\xE4lt\\xE4 my\\xF6s l\\xE4ht\\xF6numero. Tulosta kaikki numerot l\\xE4ht\\xF6numerosta yl\\xE4rajaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Where to? \\n>8 \\nWhere from? \\n>5\\n5 \\n6 \\n7 \\n8\\n\")), mdx(\"p\", null, \"Jos yl\\xE4raja on pienempi kuin l\\xE4ht\\xF6numero, ei mit\\xE4\\xE4n tulosteta:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Where to? \\n> 12 \\nWhere from? \\n> 16\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Muista, ett\\xE4 yl\\xE4raja ja alaraja voivat olla negatiivisia, ja yl\\xE4raja kysyt\\xE4\\xE4n ensin!\")), mdx(Exercise, {\n    title: '008 Numbers and calculations',\n    mdxType: \"Exercise\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1\")), mdx(\"p\", null, \"Luo ohjelma, joka kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 numeroita (alussa tulostetaan \\\"Give numbers:\\\") kunnes k\\xE4ytt\\xE4j\\xE4 antaa luvun -1. Kun k\\xE4ytt\\xE4j\\xE4 antaa -1, ohjelma tulostaa \\\"Thx! Bye!\\\" ja ohjelma lopettaa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give numbers: \\n> 5 \\n> 2 \\n> 4 \\n> -1 \\nThx! Bye!\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2\")), mdx(\"p\", null, \"Laajenna ohjelmaa siten, ett\\xE4 se laskee ja tulostaa k\\xE4ytt\\xE4j\\xE4n antamien lukujen summan (ei sis\\xE4ll\\xE4 -1).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give numbers: \\n> 5 \\n> 2 \\n> 4 \\n> -1 \\nThx! Bye! \\nSum: 11\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 3 \")), mdx(\"p\", null, \"Laajenna ohjelmaa siten, ett\\xE4 se laskee ja tulostaa k\\xE4ytt\\xE4j\\xE4n antamien lukujen lukum\\xE4\\xE4r\\xE4n (ei sis\\xE4ll\\xE4 -1).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give numbers: \\n> 5 \\n> 2 \\n> 4 \\n> -1 \\nThx! Bye! \\nSum: 11\\nNumbers: 3\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 4\")), mdx(\"p\", null, \"Laajenna ohjelma siten, ett\\xE4 se tulostaa laskee ja tulostaa k\\xE4ytt\\xE4j\\xE4n antamien lukujen keskiarvon (ei sis\\xE4ll\\xE4 -1).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give numbers: \\n> 5 \\n> 2 \\n> 4 \\n> -1 \\nThx! Bye! \\nSum: 11\\nNumbers: 3\\nAverage: 3.666666666666\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 5\")), mdx(\"p\", null, \"Laajenna ohjelma siten, ett\\xE4 se tulostaa k\\xE4ytt\\xE4j\\xE4n antamien lukujen parillisten ja parittomien lukujen lukum\\xE4\\xE4r\\xE4n (ei sis\\xE4ll\\xE4 -1).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give numbers: \\n> 5 \\n> 2 \\n> 4 \\n> -1 \\nThx! Bye! \\nSum: 11\\nNumbers: 3\\nAverage: 3.666666666666\\nEven: 2\\nOdd: 1\\n\"))), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Kun kirjoitat ohjelmaa, oli se sitten harjoitusteht\\xE4v\\xE4 tai oma projekti, mieti millaisia osia ohjelma tarvitsee toimiakseen. Jaa ohjelma osiin ja toteuta ne yksi kerrallaan. Muista testata ohjelmaa jokaisen osan j\\xE4lkeen.\", mdx(\"p\", null, \"\\xC4l\\xE4 koskaan yrit\\xE4 ratkaista koko ongelmaa kerralla, koska se tekee ohjelman testaamisesta ja suorittamisesta kesken ongelmanratkaisun vaikeaa. Aloita jostain helposta, josta tied\\xE4t ett\\xE4 osaat tehd\\xE4 sen. Kun yksi osa toimii, voit siirty\\xE4 seuraavaan.\"), mdx(\"p\", null, \"Osa teht\\xE4vist\\xE4 on jo jaettuna osiin. Kuitenkin, on tyypillist\\xE4 ohjelmoinnissa ett\\xE4 n\\xE4m\\xE4 osat pit\\xE4\\xE4 jakaa viel\\xE4 pienempiin osiin. Sinun pit\\xE4isi melkeinp\\xE4 aina ajaa koodia jokaisen uuden rivin j\\xE4lkeen. T\\xE4m\\xE4 varmistaa ett\\xE4 ratkaisu on menossa oikeaan suuntaan.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#while-silmukka-ehdolla","title":"While-silmukka ehdolla"},{"url":"#for-silmukka-for-loop","title":"For-silmukka (for-loop)"},{"url":"#silmukan-suorituksen-lopettaminen","title":"Silmukan suorituksen lopettaminen"},{"url":"#toiminnallisuuden-toistaminen","title":"Toiminnallisuuden toistaminen"},{"url":"#ohjelman-rakenteesta-silmukoiden-avulla","title":"Ohjelman rakenteesta silmukoiden avulla"}]},{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Lisää silmukoita"}}},"pageContext":{"id":"eb0619a3-fc4a-517e-88ee-68eb3bd64ace"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}