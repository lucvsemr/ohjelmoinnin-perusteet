{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa2/osa2-3",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Metodit\",\n  \"nav_order\": 3,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Ruudulle tulostaminen ja lukeminen on tehty \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine()\"), \" -k\\xE4skyll\\xE4 ja lukeminen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.ReadLine()\"), \" -k\\xE4skyll\\xE4. Ehtolauseet ovat k\\xE4ytt\\xE4neet \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"if\"), \" -rakennetta, toistolauseet \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"while\"), \" - ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"for\"), \" -rakenteita. Huomaamme, ett\\xE4 tulostaminen ja lukeminen eroavat hieman \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"if\"), \" -, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"while\"), \" - ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"for\"), \" -rakenteista; tulostamis- ja lukemisk\\xE4skyt p\\xE4\\xE4ttyv\\xE4t sulkeisiin, ja v\\xE4lill\\xE4 sulkeissa on my\\xF6s k\\xE4skyn parametreja. N\\xE4m\\xE4 sulkeisiin p\\xE4\\xE4ttyv\\xE4t k\\xE4skyt eiv\\xE4t ole varsinaisesti k\\xE4skyj\\xE4, vaan metodeja.\"), mdx(\"p\", null, \"Teknisesti ottaen, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"metodi\"), \" on nimetty joukko lauseita - osa ohjelmaa, jota voidaan kutsua muualta ohjelmakoodista k\\xE4ytt\\xE4m\\xE4ll\\xE4 metodin nime\\xE4. Esimerkiksi koodirivi\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine(\\\"I am a parameter given to a method!\\\");\\n\")), mdx(\"p\", null, \"kutsuu metodia joka k\\xE4sittelee ruudulle tulostamista. Metodin sis\\xE4inen rakenne -- eli miten metodin kutsun yhteydess\\xE4 annettu k\\xE4skyjoukko suoritetaan -- on piilotettu, eik\\xE4 ohjelmoijan tarvitse sit\\xE4 k\\xE4ytt\\xE4ess\\xE4\\xE4n tiet\\xE4\\xE4.\"), mdx(\"p\", null, \"T\\xE4h\\xE4n menness\\xE4 kaikki metodit joita olemme k\\xE4ytt\\xE4neet ovat olleet C#:n valmiita metodeja. Seuraavaksi opimme luoman omia metodeja.\"), mdx(\"h2\", {\n    \"id\": \"omat-metodit\"\n  }, \"Omat metodit\"), mdx(\"p\", null, \"Metodi tarkoittaa nimetty\\xE4 joukkoa lauseita, jota voidaan kutsua muualta ohjelmakoodista sen nimell\\xE4. Ohjelmointikielten mukana tulee valmiita metodeja, mutta ohjelmoija voi my\\xF6s kirjoittaa omiaan. Olisi itse asiassa melko erikoista, jos ohjelma ei k\\xE4ytt\\xE4isi lainkaan ohjelmoijan kirjoittamia metodeja, sill\\xE4 metodit auttavat ohjelman rakenteen hahmottamisessa. T\\xE4st\\xE4 eteenp\\xE4in l\\xE4hes jokainen kurssilla teht\\xE4v\\xE4 ohjelma sis\\xE4lt\\xE4\\xE4 siis ohjelmoijan kirjoittamia metodeja.\"), mdx(\"p\", null, \"Koodin mallipohjassa metodit on kirjoitettu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodin aaltosulkujen ulkopuolelle, mutta uloimpien aaltosulkujen sis\\xE4lle. Ne voivat sijaita joko \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodin yl\\xE4- tai alapuolella.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\npublic class Program\\n{\\n  public static void Main(string[] args)\\n  {\\n      // T\\xE4nne tulisi koodia\\n  }\\n\\n  // Omat metodit ovat t\\xE4\\xE4ll\\xE4\\n}\\n\")), mdx(\"p\", null, \"Tarkastellaan uuden metodin luomista. Luodaan metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Greet\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Greet()\\n{\\n  Console.WriteLine(\\\"Greetings from the method world!\\\");\\n}\\n\")), mdx(\"p\", null, \"Ja laitetaan se metodille sopivaan paikkaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\npublic class Program\\n{\\n    public static void Main(string[] args)\\n    {\\n        // T\\xE4nne tulisi koodia\\n    }\\n\\n    // Omat metodit ovat t\\xE4\\xE4ll\\xE4\\n    public static void Greet()\\n    {\\n      Console.WriteLine(\\\"Greetings from the method world!\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"Metodin m\\xE4\\xE4ritelm\\xE4 koostuu kahdesta osasta. Ensimm\\xE4isen rivi sis\\xE4lt\\xE4\\xE4 metodin nimen, eli \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Greet\"), \". Nimen vasemmalla puolella ovat avainsanat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public static void\"), \". Nimen alla on aaltosulkeiden ymp\\xE4r\\xF6im\\xE4 koodilohko, jonka sis\\xE4ll\\xE4 on metodin koodi -- k\\xE4skyt, jotka suoritetaan kun metodia kutsutaan. Metodimme tekee vain yhden asian: kirjoittaa ruudulle yhden rivin teksti\\xE4.\"), mdx(\"p\", null, \"Oman metodin kutsuminen on yksinkertaista: kirjoitetaan metodin nimi, per\\xE4\\xE4n sulkumerkit ja puolipiste. Seuraavassa koodissa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodi kutsuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Greet\"), \" -metodia nelj\\xE4 kertaa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\npublic class Program\\n{\\n  public static void Main(string[] args)\\n  {\\n    Console.WriteLine(\\\"Let's try if we can travel to the method world:\\\");\\n    Greet();\\n\\n    Console.WriteLine(\\\"Looks like we can, let's try again:\\\");\\n    Greet();\\n    Greet();\\n    Greet();\\n  }\\n\\n  // Omat metodit t\\xE4nne\\n  public static void Greet()\\n  {\\n    Console.WriteLine(\\\"Greetings from the method world!\\\");\\n  }\\n}\\n\")), mdx(\"p\", null, \"Ohjelman suoritus tuottaa seuraavan tulosteen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Let's try if we can travel to the method world: \\nGreetings from the method world!\\nLooks like we can, let's try again:\\nGreetings from the method world!\\nGreetings from the method world!\\nGreetings from the method world!\\n\")), mdx(\"p\", null, \"Suoritusj\\xE4rjestykseen kannattaa kiinnitt\\xE4\\xE4 huomiota. Ohjelman suoritus tapahtuu suorittamalla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodin (eli \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \") rivit j\\xE4rjestyksess\\xE4 ylh\\xE4\\xE4lt\\xE4 alas, yksi kerrallaan. K\\xE4skyn ollessa metodikutsu, ohjelman suoritus siirtyy kutsuttavan metodin sis\\xE4lle. Metodin k\\xE4skyt suoritetaan ylh\\xE4\\xE4lt\\xE4 alas, yksi kerrallaan. T\\xE4m\\xE4n j\\xE4lkeen suoritus palaa takaisin siihen kohtaan, josta metodikutsu tapahtui, ja jatkaa seuraavalla k\\xE4skyll\\xE4.\"), mdx(\"p\", null, \"Tarkalleen ottaen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodi itsess\\xE4\\xE4n on my\\xF6s metodi. Kun ohjelma k\\xE4ynnistyy, k\\xE4ytt\\xF6j\\xE4rjestelm\\xE4 kutsuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodia. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodi on siis ohjelman aloituspiste, sill\\xE4 suoritus alkaa sen ensimm\\xE4iselt\\xE4 rivilt\\xE4. Ohjelman suoritus p\\xE4\\xE4ttyy \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodin viimeiselle riville. \"), mdx(\"h2\", {\n    \"id\": \"metodien-nimeämisestä\"\n  }, \"Metodien nime\\xE4misest\\xE4\"), mdx(\"p\", null, \"K\\xE4vimme l\\xE4pi muuttujien nime\\xE4mist\\xE4 edellisess\\xE4 osassa. My\\xF6s metodien nime\\xE4miseen on oma k\\xE4yt\\xE4nt\\xF6ns\\xE4. Metodien nimet kirjoitetaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PascalCase\"), \" -tyylill\\xE4. T\\xE4m\\xE4 tarkoittaa, ett\\xE4 metodin nimi alkaa isolla kirjaimella, ja jokaisen sanan ensimm\\xE4inen kirjain on iso. Se on hyvin samankaltainen kuin camelCase jota k\\xE4ytet\\xE4\\xE4n muuttujille. Suurin ero on, ett\\xE4 PascalCase \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"metodin nimet alkavat isolla kirjaimella\"), \".\"), mdx(\"p\", null, \"Alla olevassa esimerkiss\\xE4 metodi on huonosti nimetty. Se alkaa pienell\\xE4 alkukirjaimella ja sanat on eroteltu \", \"_\", \" merkill\\xE4. Metodin nimen per\\xE4ss\\xE4 olevissa sulkumerkeiss\\xE4 on v\\xE4li ja metodin sis\\xE4ll\\xE4 oleva koodilohko on sisennetty v\\xE4\\xE4rin.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void this_method_says_woof ( ) {\\nConsole.WriteLine(\\\"woof\\\");\\n}\\n\")), mdx(\"p\", null, \"Vertailun vuoksi alla oleva metodi on nimetty oikein: nimi alkaa isolla kirjaimella ja sanat on yhdistetty PascalCase-tyylill\\xE4, eli jokainen sana alkaa isolla kirjaimella. Sulkumerkit ovat vierekk\\xE4in ja sis\\xE4ll\\xE4 oleva koodilohko on sisennetty oikein (metodilla on oma koodilohkonsa, joten koodin sisennys on nelj\\xE4 merkki\\xE4).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void ThisMethodSaysWoof()\\n{\\n  Console.WriteLine(\\\"woof\\\");\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"metodin-parametrit\"\n  }, \"Metodin parametrit\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parametrit\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parameters\"), \") ovat metodille annettuja arvoja joita voidaan k\\xE4ytt\\xE4\\xE4 sen suorituksessa. Metodin parametrit m\\xE4\\xE4ritell\\xE4\\xE4n metodin yl\\xE4reunassa, metodin nimen per\\xE4ss\\xE4 olevissa sulkumerkeiss\\xE4. Parametreja voi olla useita tai ei yht\\xE4\\xE4n. Parametrit ovat muuttujia, joiden arvot kopioidaan metodin suorituksen ajaksi.\"), mdx(\"p\", null, \"Seuraavassa esimerkiss\\xE4 on m\\xE4\\xE4ritelty parametrillinen metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Greet\"), \". Metodin parametri on int -tyypinen muuttuja nimelt\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"numOfTimes\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Greet(int numOfTimes)\\n{\\n    int i = 0;\\n    while (i < numOfTimes)\\n    {\\n      Console.WriteLine(\\\"Greetings!\\\");\\n      i++;\\n    }\\n}\\n\")), mdx(\"p\", null, \"Kutsumme metodia eri arvoilla. Parametri \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"numOfTimes\"), \" saa arvon \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1\"), \" ensimm\\xE4isell\\xE4 kutsulla ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"3\"), \" toisella.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"  public static void Main(string[] args)\\n  {\\n    Greet(1);\\n    Console.WriteLine(\\\"\\\");\\n    Greet(3);\\n  }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Greetings!\\n\\nGreetings!\\nGreetings!\\nGreetings!\\n\")), mdx(\"p\", null, \"Aivan kuten valmiita metodeja kuten \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine()\"), \" kutsuttaessa, parametriksi voidaan antaa lauseke.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"  public static void Main(string[] args)\\n  {\\n    Greet(1 + 2);\\n  }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Greetings!\\nGreetings!\\nGreetings!\\n\")), mdx(\"p\", null, \"Jos parametrina k\\xE4ytet\\xE4\\xE4n lauseketta, se evaluoidaan ennen metodikutsua. Yll\\xE4 olevassa esimerkiss\\xE4 lauseke \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"evaluoituu arvoon 3\"), \" ja lopullinen metodikutsu on muotoa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Greet(3)\"), \".\"), mdx(\"h2\", {\n    \"id\": \"monta-parametria\"\n  }, \"Monta parametria\"), mdx(\"p\", null, \"Metodille voidaan antaa useita parametreja. Kun sellaista metodia kutsutaan, parametrit annetaan samassa j\\xE4rjestyksess\\xE4 kuin ne on m\\xE4\\xE4ritelty. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Sum(int first, int second)\\n{\\n  Console.WriteLine(\\\"The sum of numbers \\\" + first + \\\" and \\\" + second + \\\" is \\\" + (first + second));\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Sum(3, 5);\\n\\nint number1 = 2;\\nint number2 = 4;\\n\\nSum(number1, number2);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The sum of numbers 3 and 5 is 8\\nThe sum of numbers 2 and 4 is 6\\n\")), mdx(\"h2\", {\n    \"id\": \"parametrien-arvot-kopioidaan-metodia-kutsuttaessa\"\n  }, \"Parametrien arvot kopioidaan metodia kutsuttaessa\"), mdx(\"p\", null, \"Kun metodia kutsutaan, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"parametrien arvot kopioidaan\"), \". K\\xE4yt\\xE4nn\\xF6ss\\xE4 t\\xE4m\\xE4 tarkoittaa sit\\xE4, ett\\xE4 sek\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodin ett\\xE4 kutsuttavan metodin voi k\\xE4ytt\\xE4\\xE4 samannimisi\\xE4 muuttujia, mutta parametrin arvon muuttaminen kutsuttavassa metodissa ei vaikuta samannimiseen muuttujaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodissa. Tutkitaan t\\xE4t\\xE4 seuraavassa esimerkiss\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Example {\\n  public static void Main(string[] args)\\n  {\\n      int min = 5;\\n      int max = 10;\\n\\n      PrintNumbers(min, max);\\n      Console.WriteLine();\\n\\n      min = 8;\\n\\n      PrintNumbers(min, max);\\n  }\\n\\n  public static void PrintNumbers(int min, int max)\\n  {\\n      while (min < max) {\\n          Console.WriteLine(min);\\n          min++;\\n      }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Ohjelman tuloste on seuraava:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"5\\n6\\n7\\n8\\n9\\n\\n8\\n9\\n\")), mdx(\"p\", null, \"Muuttujan arvon muuttaminen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintNumbers\"), \" -metodissa ei vaikuta \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodissa olevan muuttujan arvoon, vaikka muuttujat ovat samannimisi\\xE4.\"), mdx(\"p\", null, \"Eli vaikka niill\\xE4 on t\\xE4sm\\xE4lleen sama nimi, metodin parametrit ovat eri kuin muiden metodien muuttujat (tai parametrit). Kun metodikutsun yhteydess\\xE4 muuttuja annetaan metodille parametrina, muuttujan arvo kopioidaan metodille parametrimuuttujaan, joka m\\xE4\\xE4ritell\\xE4\\xE4n samalla kun metodi m\\xE4\\xE4ritell\\xE4\\xE4n. N\\xE4m\\xE4 kaksi muuttujaa ovat eri muuttujia, vaikka niill\\xE4 olisikin sama nimi.\"), mdx(\"p\", null, \"T\\xE4m\\xE4 on helpointa ymm\\xE4rt\\xE4\\xE4 esimerkin avulla. M\\xE4\\xE4ritell\\xE4\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodissa muuttuja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number\"), \" ja annetaan se parametrina metodille \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IncrementByThree\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Main-metodi\\npublic static void Main(String[] args)\\n{\\n  int number = 1;\\n  Console.WriteLine(\\\"The value of the variable 'number' in the Main program: \\\" + number);\\n  IncrementByThree(number);\\n  Console.WriteLine(\\\"The value of the variable 'number' in the Main program: \\\" + number);\\n}\\n\\n// Oma metodi\\npublic static void IncrementByThree(int number)\\n{\\n  Console.WriteLine(\\\"The value of the method parameter 'number': \\\" + number);\\n  number = number + 3;\\n  Console.WriteLine(\\\"The value of the method parameter 'number': \\\" + number);\\n}\\n\")), mdx(\"p\", null, \"Ohjelman tuloste on seuraava:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The value of the variable 'number' in the Main program: 1\\nThe value of the method parameter 'number': 1\\nThe value of the method parameter 'number': 4\\nThe value of the variable 'number' in the Main program: 1\\n\")), mdx(\"p\", null, \"Muuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number\"), \" arvon kasvattaminen metodin sis\\xE4ll\\xE4 ei aiheuta ongelmaa. T\\xE4m\\xE4 ei aiheuta muutoksia muuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number\"), \" arvoon \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -ohjelmassa. T\\xE4m\\xE4 j\\xE4lkimm\\xE4inen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number\"), \" on eri muuttuja kuin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IncrementByThree\"), \" -metodissa oleva \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number\"), \".\"), mdx(\"p\", null, \"Parametri \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number\"), \" kopioidaan metodia kutsuttaessa -- eli uusi muuttuja nimelt\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number\"), \" luodaan metodille \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IncrementByThree\"), \" ja sille annetaan arvoksi kutsun yhteydess\\xE4 annettu muuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number\"), \" arvo. Metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IncrementByThree\"), \" sis\\xE4ll\\xE4 oleva muuttuja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number\"), \" on olemassa vain metodin suorituksen ajan, eik\\xE4 sill\\xE4 ole mit\\xE4\\xE4n tekemist\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -ohjelman samannimisen muuttujan kanssa.\"), mdx(\"h2\", {\n    \"id\": \"metodit-voivat-palauttaa-arvoja\"\n  }, \"Metodit voivat palauttaa arvoja\"), mdx(\"p\", null, \"Metodin m\\xE4\\xE4rittely kertoo, palauttaako metodi arvoja. Jos metodi palauttaa arvoja, m\\xE4\\xE4rittelyss\\xE4 ilmaistaan palautettavan arvon tyyppi. Muuten m\\xE4\\xE4rittelyss\\xE4 k\\xE4ytet\\xE4\\xE4n avainsanaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void\"), \". T\\xE4h\\xE4n menness\\xE4 luomamme metodit ovat m\\xE4\\xE4ritelty avainsanalla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void\"), \", joten ne eiv\\xE4t ole palauttaneet mit\\xE4\\xE4n arvoja.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void IncrementByThree()\\n{\\n  ...\\n}\\n\")), mdx(\"p\", null, \"Avainsana \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void\"), \" tarkoittaa, ett\\xE4 metodi ei palauta mit\\xE4\\xE4n. Jos haluamme metodin palauttavan arvon, avainsana \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void\"), \" korvataan palautettavan muuttujan tyypill\\xE4. Seuraavassa esimerkiss\\xE4 on metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AlwaysReturnsTen\"), \", joka palauttaa kokonaislukutyyppisen (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int\"), \") muuttujan arvon 10.\"), mdx(\"p\", null, \"Konkreettisemmin, arvon palauttaminen tapahtuu komennolla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return\"), \" ja sen per\\xE4ss\\xE4 olevalla palautettavalla arvolla (tai muuttujan nimell\\xE4, jonka arvo palautetaan).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static int AlwaysReturnsTen()\\n{\\n  return 10;\\n}\\n\")), mdx(\"p\", null, \"Yll\\xE4 m\\xE4\\xE4ritelty metodi palauttaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int\"), \" -tyyppisen arvon \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"10\"), \" sit\\xE4 kutsuttaessa. Palautettava arvo t\\xE4ytyy tallentaa, jotta sit\\xE4 voidaan k\\xE4ytt\\xE4\\xE4. T\\xE4m\\xE4 tapahtuu samalla tavalla kuin muuttujan arvon tallentaminen -- yht\\xE4suuruusmerkill\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(String[] args)\\n{\\n  int number = AlwaysReturnsTen();\\n\\n  Console.WriteLine(\\\"the method returned the number \\\" + number);\\n}\\n\")), mdx(\"p\", null, \"Metodin palauttama arvo sijoitetaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int\"), \" -tyyppiseen muuttujaan aivan kuten mik\\xE4 tahansa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int\"), \" -arvo. Palautettu arvo voidaan k\\xE4ytt\\xE4\\xE4 my\\xF6s osana mit\\xE4 tahansa lauseketta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"double number = 4 * AlwaysReturnsTen() + (alwaysReturnsTen() / 2.0) - 8;\\n\\nConsole.WriteLine(\\\"the result of the calculation \\\" + number);\\n\")), mdx(\"p\", null, \"Kaikki t\\xE4h\\xE4n menness\\xE4 n\\xE4kem\\xE4mme muuttujatyypit voidaan palauttaa metodista.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Metodin paluuarvo\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Esimerkki\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Metodi ei palauta mit\\xE4\\xE4n\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"public static void ReturnsNothing()\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Metodi palauttaa \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"int\"), \" -muuttujan\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"public static int ReturnsInt()\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Metodi palauttaa \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"string\"), \" -muuttujan\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"public static string ReturnsString()\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Metodi palauttaa \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"double\"), \" -muuttujan\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"public static double ReturnsDouble()\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Metodi palauttaa \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"bool\"), \" -muuttujan\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"public static bool ReturnsBool()\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Metodi palauttaa \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"muuttujaTyypin\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"public static \\\"muuttujaTyyppi\\\" NameOfMethod()\")))), mdx(\"p\", null, \"L\\xE4hdekoodin rivit jotka ovat rivin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return\"), \" j\\xE4lkeen ei koskaan suoriteta. Jos ohjelmoija lis\\xE4\\xE4 l\\xE4hdekoodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return\"), \" -k\\xE4skyn j\\xE4lkeen, jota ei voi koskaan suorittaa, IDE tuottaa virheilmoituksen.\"), mdx(\"p\", null, \"IDEn n\\xE4k\\xF6kulmasta seuraava metodi on virheellinen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static int FaultyMethod()\\n{\\n  return 10;\\n  Console.WriteLine(\\\"I claim to return an integer, but I won't.\\\");\\n}\\n\")), mdx(\"p\", null, \"Seuraava metodi toimii, koska jokainen lauseke voidaan saavuttaa -- vaikka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return\"), \" j\\xE4lkeen onkin l\\xE4hdekoodia.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static int FunctioningMethod(int parameter)\\n{\\n  if (parameter > 10) {\\n      return 10;\\n  }\\n  Console.WriteLine(\\\"The number received as parameter is ten or lesser.\\\");\\n\\n  return parameter;\\n}\\n\")), mdx(\"p\", null, \"Jos metodi on muotoa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public static void NameOfMethod()\"), \" siit\\xE4 on mahdollista palata (return) -- eli lopettaa sen suoritus siin\\xE4 kohdassa -- k\\xE4ytt\\xE4m\\xE4ll\\xE4 komentoa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return\"), \" ilman mit\\xE4\\xE4n arvoa. Esimerkiksi:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void PrintEmptyLines(int parameter)\\n{\\n  if (parameter > 10)\\n  {\\n    return;\\n  }\\n  for (int i = 0; i < parameter; i++)\\n  {\\n    Console.WriteLine(\\\"\\\");\\n  }\\n}\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 tulostaisi enint\\xE4\\xE4n 10 tyhj\\xE4\\xE4 rivi\\xE4. Jos \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"parameter\"), \" on yli 10, metodi palaa eik\\xE4 tulosta mit\\xE4\\xE4n. Esimerkki ei ehk\\xE4 ole paras mahdollinen, mutta havainnollistaa ideaa...\"), mdx(\"h2\", {\n    \"id\": \"muuttujien-määrittäminen-metodien-sisällä\"\n  }, \"Muuttujien m\\xE4\\xE4ritt\\xE4minen metodien sis\\xE4ll\\xE4\"), mdx(\"p\", null, \"Muuttujan m\\xE4\\xE4ritt\\xE4minen metodin sis\\xE4ll\\xE4 tapahtuu samalla tavalla kuin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodissa. Seuraavassa esimerkiss\\xE4 lasketaan kolmen luvun keskiarvo. Metodin sis\\xE4ll\\xE4 m\\xE4\\xE4ritell\\xE4\\xE4n muuttujat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sum\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"avg\"), \" jotka auttavat laskennassa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static double Average(int number1, int number2, int number3)\\n{\\n  int sum = number1 + number2 + number3;\\n  double avg = sum / 3.0;\\n\\n  return avg;\\n}\\n\")), mdx(\"p\", null, \"Yksi tapa kutsua metodia on seuraavanlainen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(String[] args)\\n{\\n  Console.Write(\\\"Enter the first number: \\\");\\n  int first = Convert.ToInt32(Console.WriteLine());\\n\\n  Console.Write(\\\"Enter the second number: \\\");\\n  int second = Convert.ToInt32(Console.WriteLine());\\n\\n  Console.Write(\\\"Enter the third number: \\\");\\n  int third = Convert.ToInt32(Console.WriteLine());\\n\\n  double averageResult = Average(first, second, third);\\n\\n  Console.Write(\\\"The average of the numbers: \\\" + averageResult);\\n}\\n\")), mdx(\"p\", null, \"Metodissa m\\xE4\\xE4ritellyt muuttujat ovat n\\xE4kyviss\\xE4 vain kyseisess\\xE4 metodissa. Yll\\xE4 olevassa esimerkiss\\xE4 t\\xE4m\\xE4 tarkoittaa sit\\xE4, ett\\xE4 metodissa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Average\"), \" m\\xE4\\xE4ritellyt muuttujat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sum\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"avg\"), \" eiv\\xE4t ole n\\xE4kyviss\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -ohjelmassa. Tyypillinen virhe aloittelevalla ohjelmoijalla on yritt\\xE4\\xE4 k\\xE4ytt\\xE4\\xE4 metodia seuraavalla tavalla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(String[] args)\\n{\\n  int first = 3;\\n  int second = 8;\\n  int third = 4;\\n\\n  Average(first, second, third);\\n\\n  // metodin sis\\xE4inen muuttuja avg yritet\\xE4\\xE4n tulostaa, EI TOIMI!\\n  Console.Write(\\\"The average of the numbers: \\\" + avg);\\n}\\n\")), mdx(\"p\", null, \"Yll\\xE4 ohjelmoija yritt\\xE4\\xE4 k\\xE4ytt\\xE4\\xE4 muuttujaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"avg\"), \" joka on m\\xE4\\xE4ritelty \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"metodin Average sis\\xE4ll\\xE4\"), \", ja tulostaa sen arvon. Muuttuja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"avg\"), \" on kuitenkin olemassa vain \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"metodin Average sis\\xE4ll\\xE4\"), \", eik\\xE4 sit\\xE4 voi k\\xE4ytt\\xE4\\xE4 sen ulkopuolella.\"), mdx(\"p\", null, \"My\\xF6s seuraavanlainen virhe on yleinen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(String[] args)\\n{\\n  int first = 3;\\n  int second = 8;\\n  int third = 4;\\n\\n  // yritet\\xE4\\xE4n k\\xE4ytt\\xE4\\xE4 vain metodin nime\\xE4, EI TOIMI!\\n  Console.Write(\\\"The average of the numbers: \\\" + Average);\\n}\\n\")), mdx(\"p\", null, \"Yll\\xE4 olevassa esimerkiss\\xE4 yritet\\xE4\\xE4n k\\xE4ytt\\xE4\\xE4 metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Average\"), \" nime\\xE4 ik\\xE4\\xE4n kuin se olisi muuttuja. Metodia t\\xE4ytyy kuitenkin kutsua.\\nMetodin tuloksen voi kuitenkin tallentaa muuttujaan, ja k\\xE4ytt\\xE4\\xE4 sit\\xE4 my\\xF6hemmin. Toinen toimiva tapa on suorittaa metodikutsu suoraan tulostuksen yhteydess\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(String[] args)\\n{\\n  int first = 3;\\n  int second = 8;\\n  int third = 4;\\n\\n  // metodin kutsuminen tulostuksen sis\\xE4ll\\xE4, TOIMII!\\n  Console.Write(\\\"The average of the numbers: \\\" + average(first, second, third));\\n}\\n\")), mdx(\"p\", null, \"T\\xE4ss\\xE4 metodin kutsu suoritetaan ensin ja se palauttaa arvon 5.0. T\\xE4m\\xE4n j\\xE4lkeen kyseinen arvo tulostetaan tulostuskomennossa.\"), mdx(\"h2\", {\n    \"id\": \"paluuarvon-laskeminen-metodin-sisällä\"\n  }, \"Paluuarvon laskeminen metodin sis\\xE4ll\\xE4\"), mdx(\"p\", null, \"Palautettavan arvon ei tarvitse olla kokonaan m\\xE4\\xE4ritelty etuk\\xE4teen -- se voidaan my\\xF6s laskea: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return\"), \" -k\\xE4sky\\xE4 joka palauttaa arvon metodista voidaan k\\xE4ytt\\xE4\\xE4 my\\xF6s lausekkeen kanssa. \"), mdx(\"p\", null, \"Seuraavassa esimerkiss\\xE4 m\\xE4\\xE4ritell\\xE4\\xE4n metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sum\"), \" joka laskee kahden muuttujan arvon yhteen ja palauttaa summan. Summattavien muuttujien arvot saadaan metodin parametreina.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static int Sum(int first, int second)\\n{\\n  return first + second;\\n}\\n\")), mdx(\"p\", null, \"Kun metodin suoritus saavuttaa lausekkeen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return first + second;\"), \", lauseke \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"first + second\"), \" evaluoidaan, ja sen arvo palautetaan my\\xF6hemmin.\"), mdx(\"p\", null, \"Metodia kutsutaan seuraavalla tavalla. Metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sum\"), \" avulla lasketaan yhteen luvut 2 ja 7. Metodin palauttama arvo sijoitetaan muuttujaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sumOfNumbers\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int sumOfNumbers = Sum(2, 7);\\n// sumOfNumbers on nyt 9\\n\")), mdx(\"p\", null, \"Laajennetaan edellist\\xE4 esimerkki\\xE4 niin, ett\\xE4 luvut annetaan k\\xE4ytt\\xE4j\\xE4n sy\\xF6ttein\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(String[] args)\\n{\\n  Console.Write(\\\"Enter the first number: \\\");\\n  int first = Convert.ToInt32(Console.ReadLine());\\n\\n  Console.Write(\\\"Enter the second number: \\\");\\n  int second = Convert.ToInt32(Console.ReadLine());\\n\\n  Console.Write(\\\"The combined sum of the numbers is: \\\" + Sum(first, second));\\n}\\n\\npublic static int Sum(int first, int second)\\n{\\n  return first + second;\\n}\\n\")), mdx(\"p\", null, \"Yll\\xE4 olevassa esimerkiss\\xE4 metodin palauttamaa arvoa ei tallenneta muuttujaan, vaan se k\\xE4ytet\\xE4\\xE4n suoraan osana tulostusta.\"), mdx(\"p\", null, \"Metodille annetut arvot kopioidaan sen parametreihin. T\\xE4m\\xE4n vuoksi metodin parametrien nimill\\xE4 ja metodin kutsun yhteydess\\xE4 m\\xE4\\xE4riteltyjen muuttujien nimill\\xE4 ei ole mit\\xE4\\xE4n tekemist\\xE4 toistensa kanssa. Edellisess\\xE4 esimerkiss\\xE4 sek\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -ohjelman muuttujat ett\\xE4 metodin parametrit olivat nimetty samalla tavalla (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"first\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"second\"), \") \\\"sattumalta\\\". Seuraava koodi toimii t\\xE4ysin samalla tavalla vaikka muuttujat olisivat nimetty eri tavalla:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(String[] args)\\n{\\n  Console.Write(\\\"Enter the first number: \\\");\\n  int number1 = Convert.ToInt32(Console.ReadLine());\\n\\n  Console.Write(\\\"Enter the second number: \\\");\\n  int number2 = Convert.ToInt32(Console.ReadLine());\\n\\n  Console.Write(\\\"The combined sum of the numbers is: \\\" + Sum(number1, number2));\\n}\\n\\npublic static int Sum(int first, int second)\\n{\\n  return first + second;\\n}\\n\")), mdx(\"p\", null, \"Nyt muuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number1\"), \" arvo kopioidaan parametrin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"first\"), \" arvoksi ja muuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number2\"), \" arvo kopioidaan parametrin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"second\"), \" arvoksi.\"), mdx(\"h2\", {\n    \"id\": \"metodikutsujen-suorittaminen-ja-kutsupino-call-stack\"\n  }, \"Metodikutsujen suorittaminen ja kutsupino (call stack)\"), mdx(\"p\", null, \"Miten tietokone muistaa, mihin palataan metodin suorituksen j\\xE4lkeen?\"), mdx(\"p\", null, \"C#:n l\\xE4hdekoodin suoritusymp\\xE4rist\\xF6 pit\\xE4\\xE4 kirjaa siit\\xE4, mik\\xE4 metodi on suorituksessa kutsupinossa (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"call stack\"), \"). Kutsupino sis\\xE4lt\\xE4\\xE4 kehyksi\\xE4, joista jokainen sis\\xE4lt\\xE4\\xE4 tietoa yhdest\\xE4 metodista: sen sis\\xE4iset muuttujat ja niiden arvot. Kun metodia kutsutaan, kutsupinoon luodaan uusi kehys (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"frame\"), \"), joka sis\\xE4lt\\xE4\\xE4 kyseisen metodin muuttujat. Kun metodin suoritus p\\xE4\\xE4ttyy, kyseinen kehys poistetaan kutsupinosta, ja suoritus jatkuu edellisess\\xE4 metodissa.\"), mdx(\"p\", null, \"Kun metodia kutsutaan, suoritus odottaa kutsutun metodin suorituksen p\\xE4\\xE4ttymist\\xE4. T\\xE4m\\xE4 voidaan visualisoida kutsupinolla. Kutsupino viittaa metodikutsujen muodostamaan pinoon -- suorituksessa oleva metodi on aina pinon p\\xE4\\xE4llimm\\xE4isen\\xE4, ja metodin suorituksen p\\xE4\\xE4ttyess\\xE4 suoritus jatkuu pinon seuraavassa metodissa. Tutkitaan seuraavaa ohjelmaa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(String[] args)\\n{\\n  Console.WriteLine(\\\"Hello world!\\\");\\n  PrintNumber();\\n  Console.WriteLine(\\\"Bye bye world!\\\");\\n}\\n\\npublic static void PrintNumber() {\\n  Console.WriteLine(\\\"Number\\\");\\n}\\n\")), mdx(\"p\", null, \"Suoritus alkaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodista, kun ohjelma k\\xE4ynnistet\\xE4\\xE4n. Teksti \\\"Hello world!\\\" tulostetaan komennolla ensimm\\xE4isell\\xE4 rivill\\xE4. Kutsupino n\\xE4ytt\\xE4\\xE4 t\\xE4lt\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Main\\n\")), mdx(\"p\", null, \"Kun tulostuskomento on suoritettu, seuraava rivi kutsuu metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintNumber\"), \". Metodin kutsu siirt\\xE4\\xE4 ohjelman suorituksen metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintNumber\"), \" alkuun. T\\xE4ll\\xE4 v\\xE4lin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodi odottaa, ett\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintNumber\"), \" -metodin suoritus p\\xE4\\xE4ttyy. Metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintNumber\"), \" suorituksen aikana kutsupino n\\xE4ytt\\xE4\\xE4 t\\xE4lt\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"PrintNumber\\nMain\\n\")), mdx(\"p\", null, \"Kun metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintNumber\"), \" suoritus p\\xE4\\xE4ttyy, palataan metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintNumber\"), \" alla olevaan metodiin kutsupinossa -- t\\xE4ss\\xE4 tapauksessa metodiin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \". Metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintNumber\"), \" poistetaan kutsupinosta, ja suoritus jatkuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintNumber\"), \" -kutsun j\\xE4lkeisell\\xE4 rivill\\xE4. Kutsupinon tilanne on nyt seuraava:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Main\\n\")), mdx(\"h2\", {\n    \"id\": \"kutsupino-ja-metodin-parametrit\"\n  }, \"Kutsupino ja metodin parametrit\"), mdx(\"p\", null, \"Tarkastellaan seuraavaksi kutsupinoa tilanteessa, jossa metodille on m\\xE4\\xE4ritelty parametreja.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(String[] args)\\n{\\n  int beginning = 1;\\n  int end = 5;\\n\\n  PrintStarts(beginning, end);\\n}\\n\\npublic static void PrintStars(int beginning, int end) {\\n  while (beginning < end) {\\n      Console.Write(\\\"*\\\");\\n      beginning++; // sama kuin beginning = beginning + 1\\n  }\\n}\\n\")), mdx(\"p\", null, \"Ohjelman suoritus alkaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodin ensimm\\xE4iselt\\xE4 rivilt\\xE4. Seuraavat kaksi rivi\\xE4 luovat muuttujat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"beginning\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"end\"), \" ja asettavat niille arvot. Ohjelman tilanne ennen metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintStars\"), \" kutsumista:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Main beginning = 1 end = 5\\n\")), mdx(\"p\", null, \"Kun metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintStars\"), \" kutsutaan, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodi siirtyy odottamaan. Metodin kutsu aiheuttaa uusien muuttujien \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"beginning\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"end\"), \" luomisen metodille \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintStars\"), \"; parametreina annetut arvot kopioidaan niihin. N\\xE4m\\xE4 arvot kopioitiin muuttujista \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"beginning\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"end\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodissa. Ohjelman tilanne metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintStars\"), \" suorituksen ensimm\\xE4isell\\xE4 rivill\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"PrintStars beginning = 1 end = 5\\nMain beginning = 1 end = 5\\n\")), mdx(\"p\", null, \"Kun komento beginning++ suoritetaan toistolauseessa, muuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"beginning\"), \", joka kuuluu t\\xE4ll\\xE4 hetkell\\xE4 suoritettavalle metodille, arvo muuttuu.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"PrintStars beginning = 2 end = 5\\nMain beginning = 1 end = 5\\n\")), mdx(\"p\", null, \"Eli muuttujien arvot \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodissa pysyv\\xE4t muuttumattomina. Metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintStars\"), \" suoritus jatkuu jonkin aikaa. Kun sen metodin suoritus p\\xE4\\xE4ttyy, suoritus jatkuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodissa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Main beginning = 1 end = 5\\n\")), mdx(\"h2\", {\n    \"id\": \"kutsupino-ja-metodin-palauttama-arvo\"\n  }, \"Kutsupino ja metodin palauttama arvo\"), mdx(\"p\", null, \"Tarkastellaan seuraavaksi tilannetta, jossa metodi palauttaa arvon. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodi kutsuu metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Start\"), \", jonka sis\\xE4ll\\xE4 luodaan kaksi muuttujaa, kutsutaan metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sum\"), \" ja tulostetaan palautettu arvo.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(String[] args)\\n{\\n  Start();\\n}\\n\\npublic static void Start()\\n{\\n  int first = 5;\\n  int second = 6;\\n\\n  int sum = Sum(first, second);\\n\\n  Console.WriteLine(\\\"Sum: \\\" + sum);\\n}\\n\\npublic static int Sum(int number1, int number2) {\\n  return number1 + number2;\\n}\\n\")), mdx(\"p\", null, \"Metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Start\"), \" suorituksen alussa kutsupino n\\xE4ytt\\xE4\\xE4 seuraavalta, sill\\xE4 metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Start\"), \" kutsutaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodista. Metodilla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" ei ole omia muuttujia t\\xE4ss\\xE4 esimerkiss\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Start\\nMain\\n\")), mdx(\"p\", null, \"Kun muuttujat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"first\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"second\"), \" on luotu metodissa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Start\"), \" (metodin ensimm\\xE4iset kaksi rivi\\xE4 on suoritettu), tilanne n\\xE4ytt\\xE4\\xE4 seuraavalta:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Start first = 5 second = 6\\nMain\\n\")), mdx(\"p\", null, \"Komento \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"int sum = Sum(first, second);\"), \" luo muuttujan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sum\"), \" metodissa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Start\"), \", ja kutsuu metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sum\"), \". Metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Start\"), \" siirtyy odottamaan. Koska parametrit \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number1\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number2\"), \" on m\\xE4\\xE4ritelty metodissa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sum\"), \", ne luodaan heti metodin suorituksen alussa, ja niiden arvot kopioidaan parametreiksi annetuista muuttujista.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Sum number1 = 5 number2 = 6\\nStart first = 5 second = 6\\nsum // no value\\nMain\\n\")), mdx(\"p\", null, \"Metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sum\"), \" suoritus laskee yhteen muuttujien \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number1\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number2\"), \" arvot. Komento \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return\"), \" palauttaa summattujen muuttujien arvon metodille, joka on seuraavaksi kutsupinossa, eli t\\xE4ss\\xE4 tapauksessa metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Start\"), \". Palautettu arvo asetetaan arvoksi muuttujalle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sum\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Start first = 5 second = 6\\nsum = 11\\nMain\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4n j\\xE4lkeen suoritetaan tulostuskoment, ja palataan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" -metodiin. Kun suoritus saavuttaa metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" lopun, kutsupino on tyhj\\xE4 ja ohjelman suoritus loppuu.\"), mdx(\"h2\", {\n    \"id\": \"metodi-kutsuu-toista-metodia\"\n  }, \"Metodi kutsuu toista metodia\"), mdx(\"p\", null, \"Kuten olemme jo aiemmin huomanneet, metodia voi kutsua toisen metodin sis\\xE4lt\\xE4. Lis\\xE4esimerkki t\\xE4st\\xE4 tekniikasta on annettu alla. Luomme metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MultiplicationTable\"), \" joka tulostaa kertotaulun annetusta luvusta. Metodi tulostaa rivit \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintMultiplicationTableRow\"), \" -metodin avulla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void MultiplicationTable(int max)\\n{\\n  int number = 1;\\n\\n  while (number <= max)\\n  {\\n    PrintMultiplicationTableRow(number, max);\\n    number++;\\n  }\\n}\\n\\npublic static void PrintMultiplicationTableRow(int number, int coefficient)\\n{\\n  int printable = number;\\n  while (printable <= number * coefficient)\\n  {\\n    Console.Write(\\\"  \\\" + printable);\\n    printable += number;\\n  }\\n  Console.WriteLine(\\\"\\\");\\n}\\n\")), mdx(\"p\", null, \"Tulostus metodikutsulla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MultiplicationTable(3)\"), \" n\\xE4ytt\\xE4\\xE4 seuraavalta:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1 2 3\\n2 4 6\\n3 6 9\\n\")), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Exercise, {\n    title: '009 Print phrase',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PrintPhrase\"), \" joka tulostaa lauseen \\\"In a hole in the ground there lived a method\\\" ja rivinvaihdon (k\\xE4yt\\xE4 WriteLine eik\\xE4 Write).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  // Kutsu metodia t\\xE4ss\\xE4:\\n  PrintPhrase();\\n\\n}\\n\\n// Kirjoita metodi t\\xE4h\\xE4n:\\npublic static void PrintPhrase() \\n{\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"In a hole in the ground there lived a method\\n\"))), mdx(Exercise, {\n    title: '010 How many times',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Laajenna edellist\\xE4 ohjelmaa siten, ett\\xE4 Main-metodi kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 kuinka monta kertaa (\\\"How many times?\\\") lause tulostetaan (eli kuinka monta kertaa metodia kutsutaan).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  // kysy k\\xE4ytt\\xE4j\\xE4lt\\xE4 kuinka monta kertaa lause tulostetaan\\n  // k\\xE4yt\\xE4 while-komentoa kutsuaksesi metodia sopiva m\\xE4\\xE4r\\xE4 kertoja\\n  \\n\\n}\\n\\n// Kirjoita metodisi t\\xE4h\\xE4n:\\npublic static void PrintPhrase() \\n{\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"How many times?\\n> 3\\nIn a hole in the ground there lived a method\\nIn a hole in the ground there lived a method\\nIn a hole in the ground there lived a method\\n\"))), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"T\\xE4st\\xE4 l\\xE4htien, kun esittelemme metodeja, emme v\\xE4ltt\\xE4m\\xE4tt\\xE4 mainitse erikseen, ett\\xE4 ne t\\xE4ytyy sijoittaa oikeaan paikkaan. Metodeja ei voi m\\xE4\\xE4ritell\\xE4 esim. toisten metodien sis\\xE4ll\\xE4.\"), mdx(Exercise, {\n    title: '011 Print until number',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo seuraava metodi: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static void PrintUntilNumber(int number)\"), \". Se tulostaa numerot yhdest\\xE4 annettuun lukuun asti. Kaksi esimerkki\\xE4 metodin k\\xE4yt\\xF6st\\xE4 on annettu alla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args) \\n{\\n  PrintUntilNumber(5);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n3\\n4\\n5\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args) \\n{\\n  PrintUntilNumber(3);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n3\\n\"))), mdx(Exercise, {\n    title: '012 From number to one',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo teht\\xE4v\\xE4pohjaan seuraava metodi: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static void PrintFromNumberToOne(int number)\"), \". Se tulostaa numerot annetusta luvusta alasp\\xE4in yhteen. Kaksi esimerkki\\xE4 metodin k\\xE4yt\\xF6st\\xE4 on annettu alla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args) \\n{\\n  PrintFromNumberToOne(5);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"5\\n4\\n3\\n2\\n1\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args) \\n{\\n  PrintFromNumberToOne(2);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"2\\n1\\n\"))), mdx(Exercise, {\n    title: '013 Division',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Kirjoita metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static void Division(int numerator, int denominator)\"), \" joka tulostaa jakolaskun tuloksen (numerator / denominator). Muista ett\\xE4 kokonaislukujen jakolasku palauttaa kokonaisluvun -- t\\xE4ss\\xE4 tapauksessa haluamme tuloksen olevan liukuluku (double).\")), mdx(Exercise, {\n    title: '014 Divisible in range',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Kirjoita metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static void DivisibleByThreeInRange(int beginning, int end)\"), \" joka tulostaa kaikki luvut annetulta v\\xE4lilt\\xE4 jotka ovat jaollisia kolmella. Luvut tulostetaan pienimm\\xE4st\\xE4 suurimpaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args) \\n{\\n  DivisibleByThreeInRange(3, 6);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"3\\n6\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args) \\n{\\n  DivisibleByThreeInRange(2, 10);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"3\\n6\\n9\\n\"))), mdx(Exercise, {\n    title: '015 Number uno',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Kirjoita metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static int NumberUno()\"), \" joka palauttaa arvon 1.\")), mdx(Exercise, {\n    title: '016 Word',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Kirjoita metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static string Word()\"), \" joka palauttaa haluamasi merkkijonon (string).\")), mdx(Exercise, {\n    title: '017 Sum',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Laajennetaan metodia \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sum\"), \" teht\\xE4v\\xE4pohjassa siten, ett\\xE4 se laskee ja palauttaa parametreina annettujen lukujen summan.\\nK\\xE4yt\\xE4 seuraavaa rakennetta:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static int Sum(int number1, int number2, int number3, int number4) \\n{\\n  // Kirjoita koodisi t\\xE4nne\\n  // Muista palauttaa arvo (return)!\\n}\\n\\npublic static void Main(string[] args) \\n{\\n    int answer = Sum(4, 3, 6, 1);\\n    Console.WriteLine(\\\"Sum: \\\" + answer);\\n}\\n\")), mdx(\"p\", null, \"Esimerkin tuloste:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Sum: 14\\n\"))), mdx(Exercise, {\n    title: '018 Smallest',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Smallest\"), \" kahdella parametrilla, joka palauttaa pienemm\\xE4n parametrina annetuista arvoista.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static int Smallest(int number1, int number2) \\n{\\n  // Kirjoita koodisi t\\xE4nne\\n  // \\xC4l\\xE4 tulosta metodin sis\\xE4ll\\xE4 mit\\xE4\\xE4n\\n\\n  // Loppuun return!\\n}\\n\\npublic static void Main(string[] args) \\n{\\n  int answer =  Smallest(2, 7);\\n  Console.WriteLine(\\\"Smallest: \\\" + answer);\\n}\\n\")), mdx(\"p\", null, \"Esimerkkituloste:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Smallest: 2\\n\"))), mdx(Exercise, {\n    title: '019 Greatest',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Greatest\"), \" kolmella parametrilla, joka palauttaa suurimman parametrina annetuista arvoista.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static int Greatest(int number1, int number2, int number3) \\n{\\n  // Kirjoita koodisi t\\xE4nne\\n  // \\xC4l\\xE4 tulosta metodin sis\\xE4ll\\xE4 mit\\xE4\\xE4n\\n\\n  // Loppuun return!\\n}\\n\\npublic static void Main(string[] args) \\n{\\n  int answer =  Greatest(2, 7, 3);\\n  Console.WriteLine(\\\"Greatest: \\\" + answer);\\n}\\n\")), mdx(\"p\", null, \"Esimerkkituloste:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Greatest: 7\\n\"))), mdx(Exercise, {\n    title: '020 Stars',\n    mdxType: \"Exercise\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1\")), mdx(\"p\", null, \"Luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintStars(int number)\"), \" joka tulostaa annetun m\\xE4\\xE4r\\xE4n t\\xE4hti\\xE4 ja rivinvaihdon. \"), mdx(\"p\", null, \"Kirjoita metodi seuraavaan pohjaan:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void PrintStars(int number)\\n{\\n  // Voit tulostaa yhden t\\xE4hden komennolla\\n  // Console.Write(\\\"*\\\");\\n  // Kutsu komentoa number kertaa\\n  // Loppuun rivinvaihto komennolla\\n  // Console.WriteLine(\\\"\\\");\\n}\\n\\npublic static void Main(string[] args) \\n{\\n  PrintStars(5);\\n  PrintStars(3);\\n  PrintStars(9);\\n}\\n\")), mdx(\"p\", null, \"Esimerkkituloste:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"***** \\n*** \\n*********\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2\")), mdx(\"p\", null, \"M\\xE4\\xE4rit\\xE4 metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintSquare(int size)\"), \" joka tulostaa sopivan neli\\xF6n metodin \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintStars\"), \" avulla. Eli metodi kutsu \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintSquare(4)\"), \" tuottaa seuraavan tulostuksen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"****\\n****\\n****\\n****\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 3\")), mdx(\"p\", null, \"Kirjoita metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintRectangle(int width, int height)\"), \" joka tulostaa sopivan suorakulmion metodin \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintStars\"), \" avulla. Eli metodi kutsu \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintRectangle(17, 3)\"), \" tuottaa seuraavan tulostuksen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"***************** \\n***************** \\n*****************\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 4\")), mdx(\"p\", null, \"Luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintTriangle(int size)\"), \" joka tulostaa kolmion metodin \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintStars\"), \" avulla. Eli metodi kutsu \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintTriangle(4)\"), \" tuottaa seuraavan tulostuksen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"*\\n**\\n***\\n****\\n\"))), mdx(Exercise, {\n    title: '021 Christmas tree',\n    mdxType: \"Exercise\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1\")), mdx(\"p\", null, \"Luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintSpaces(int number)\"), \" joka tulostaa parametrina annetun m\\xE4\\xE4r\\xE4n v\\xE4lily\\xF6ntej\\xE4. Metodi ei tulosta rivinvaihtoa.\"), mdx(\"p\", null, \"Sinun tarvitsee my\\xF6s joko kopioida \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintStars\"), \" metodi edellisest\\xE4 teht\\xE4v\\xE4st\\xE4 tai toteuttaa se uudelleen t\\xE4ss\\xE4 teht\\xE4v\\xE4ss\\xE4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Kommentti t\\xE4ss\\xE4 ja seuraavissa esimerkeiss\\xE4 ei ole osa tulostusta, vaan vain korostamassa eroa edelliseen teht\\xE4v\\xE4\\xE4n.\"), mdx(\"p\", null, \"Luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintRightTriangle(int size)\"), \" joka k\\xE4ytt\\xE4\\xE4 metodeja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintSpaces\"), \" ja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintStars\"), \" oikealle nojaavan suorakulmaisen kolmion tulostamiseen. Eli metodi kutsu \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintRightTriangle(4)\"), \" tuottaa seuraavan tulostuksen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// HUOMAA V\\xC4LILY\\xD6NTIEN M\\xC4\\xC4R\\xC4    \\n\\xA0\\xA0\\xA0*  // Kolme v\\xE4lily\\xF6nti\\xE4 alussa\\n\\xA0\\xA0**  // Kaksi\\n\\xA0***  // Yksi\\n****  // Ei yht\\xE4\\xE4n \\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Jos kolmio ei n\\xE4yt\\xE4 nojaavan oikealle, kokeile toisella selaimella. V\\xE4lill\\xE4 Safari ja mobiiliselaimet eiv\\xE4t n\\xE4yt\\xE4 merkkej\\xE4 oikein.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 3\")), mdx(\"p\", null, \"M\\xE4\\xE4rit\\xE4 metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ChristmasTree(int height)\"), \" joka tulostaa oikeanlaisen joulukuusen. Joulukuusi koostuu kolmiosta, jonka korkeus on parametrina annettu luku, sek\\xE4 kuusen jalasta. Jalka on kaksi t\\xE4hte\\xE4 korkea ja kolme t\\xE4hte\\xE4 leve\\xE4, ja se sijaitsee kolmion pohjalla keskell\\xE4. Puu rakennetaan k\\xE4ytt\\xE4m\\xE4ll\\xE4 metodeja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintSpaces\"), \" ja \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrintStars\"), \".\"), mdx(\"p\", null, \"Esimerkiksi kutsu \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ChristmasTree(4)\"), \" tuottaa seuraavan tulostuksen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// HUOMAA V\\xC4LILY\\xD6NTIEN M\\xC4\\xC4R\\xC4\\n\\xA0\\xA0\\xA0* \\n\\xA0\\xA0*** \\n\\xA0*****\\n******* \\n\\xA0\\xA0*** \\n\\xA0\\xA0***\\n\")), mdx(\"p\", null, \"Kutsu \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ChristmasTree(10)\"), \" tuottaa seuraavan tulostuksen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// HUOMAA V\\xC4LILY\\xD6NTIEN M\\xC4\\xC4R\\xC4\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0* \\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0*** \\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0***** \\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0******* \\n\\xA0\\xA0\\xA0\\xA0\\xA0********* \\n\\xA0\\xA0\\xA0\\xA0*********** \\n\\xA0\\xA0\\xA0************* \\n\\xA0\\xA0*************** \\n\\xA0***************** \\n******************* \\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0*** \\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0***\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Alle 3 korkeiden puiden ei tarvitse toimia oikein!\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#omat-metodit","title":"Omat metodit"},{"url":"#metodien-nimeämisestä","title":"Metodien nimeämisestä"},{"url":"#metodin-parametrit","title":"Metodin parametrit"},{"url":"#monta-parametria","title":"Monta parametria"},{"url":"#parametrien-arvot-kopioidaan-metodia-kutsuttaessa","title":"Parametrien arvot kopioidaan metodia kutsuttaessa"},{"url":"#metodit-voivat-palauttaa-arvoja","title":"Metodit voivat palauttaa arvoja"},{"url":"#muuttujien-määrittäminen-metodien-sisällä","title":"Muuttujien määrittäminen metodien sisällä"},{"url":"#paluuarvon-laskeminen-metodin-sisällä","title":"Paluuarvon laskeminen metodin sisällä"},{"url":"#metodikutsujen-suorittaminen-ja-kutsupino-call-stack","title":"Metodikutsujen suorittaminen ja kutsupino (call stack)"},{"url":"#kutsupino-ja-metodin-parametrit","title":"Kutsupino ja metodin parametrit"},{"url":"#kutsupino-ja-metodin-palauttama-arvo","title":"Kutsupino ja metodin palauttama arvo"},{"url":"#metodi-kutsuu-toista-metodia","title":"Metodi kutsuu toista metodia"}]},{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Metodit"}}},"pageContext":{"id":"7beaa42e-6830-54e7-a96a-c1b251b3a816"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}