{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa6/osa6-1",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Käyttöliittymät\",\n  \"nav_order\": 1,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"käyttöliittymän-erottaminen-ohjelman-logiikasta\"\n  }, \"K\\xE4ytt\\xF6liittym\\xE4n erottaminen ohjelman logiikasta\"), mdx(\"p\", null, \"T\\xE4ss\\xE4 osassa katsotaan tarkemmin k\\xE4ytt\\xF6liittym\\xE4\\xE4 (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User Interface\"), \" tai lyhennettyn\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"UI\"), \") ja ohjelmalogiikkaa (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"program logic\"), \".) Tarkastellaan prosessia jossa toteutamme ohjelman ja erotamme eri vastuualueet toisistaan. Ohjelma pyyt\\xE4\\xE4 k\\xE4ytt\\xE4j\\xE4\\xE4 kirjoittamaan sanoja kunnes k\\xE4ytt\\xE4j\\xE4 kirjoittaa saman sanan kahdesti.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Write a word:\\n> carrot \\nWrite a word:\\n> turnip \\nWrite a word:\\n> potato \\nWrite a word:\\n> celery \\nWrite a word:\\n> potato \\nYou wrote the same word twice!\\n\")), mdx(\"p\", null, \"Rakennetaan ohjelma pala palalta. Yksi haasteista on se, ett\\xE4 on vaikea p\\xE4\\xE4tt\\xE4\\xE4 miten l\\xE4hesty\\xE4 ongelmaa, eli miten pilkkoa ongelma pienempiin osaongelmiin ja mist\\xE4 osaongelmasta aloittaa. Yht\\xE4 oikeaa vastausta ei ole -- joskus on hyv\\xE4 l\\xE4hte\\xE4 liikkeelle ongelma-alueesta ja sen k\\xE4sitteist\\xE4 ja niiden v\\xE4lisist\\xE4 yhteyksist\\xE4, joskus taas on parempi l\\xE4hte\\xE4 liikkeelle k\\xE4ytt\\xF6liittym\\xE4st\\xE4.\"), mdx(\"p\", null, \"Voisimme aloittaa ohjelman toteuttamisen luomalla k\\xE4ytt\\xF6liittym\\xE4n ja sille luokan UserInterface. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class UserInterface\\n{\\n  public UserInterface() \\n  {\\n\\n  }\\n\\n  public void Start()\\n  {\\n    // Tehd\\xE4\\xE4n jotain...\\n  }\\n}\\n\")), mdx(\"p\", null, \"K\\xE4ytt\\xF6liittym\\xE4n luominen ja k\\xE4ynnist\\xE4minen onnistuu seuraavasti.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args) \\n{  \\n  UserInterface userinterface = new UserInterface();\\n  userinterface.Start();\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"silmukka-ja-lopetus\"\n  }, \"Silmukka ja lopetus\"), mdx(\"p\", null, \"T\\xE4ss\\xE4 ohjelmassa on (ainakin) kaksi \\\"aliongelmaa\\\". Ensimm\\xE4inen on sanojen lukeminen k\\xE4ytt\\xE4j\\xE4lt\\xE4 niin kauan kuin jokin ehto toteutuu. Voimme hahmotella t\\xE4m\\xE4n seuraavasti.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class UserInterface\\n{\\n  public UserInterface() \\n  {\\n\\n  }\\n\\n  public void Start()\\n  {\\n    while(true)\\n    {\\n      Console.WriteLine(\\\"Enter a word:\\\");\\n      string word = Console.ReadLine();\\n\\n      if(/*loppuehto t\\xE4nne*/) {\\n        break;\\n      }\\n    }\\n    Console.WriteLine(\\\"You gave the same word twice!\\\");\\n  }\\n}\\n\")), mdx(\"p\", null, \"Ohjelma jatkaa sanojen lukemista kunnes k\\xE4ytt\\xE4j\\xE4 kirjoittaa sanan jonka h\\xE4n on jo kirjoittanut aiemmin. Muokataan ohjelmaa niin, ett\\xE4 se tarkistaa onko sana jo kirjoitettu. Emme viel\\xE4 tied\\xE4 miten t\\xE4m\\xE4 toteutetaan, joten tehd\\xE4\\xE4n ensin luonnos.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class UserInterface\\n{\\n  public UserInterface() \\n  {\\n\\n  }\\n\\n  public void Start()\\n  {\\n    while(true)\\n    {\\n      Console.WriteLine(\\\"Enter a word:\\\");\\n      string word = Console.ReadLine();\\n      if(AlreadyEntered(word)) {\\n        break;\\n      }\\n    }\\n    Console.WriteLine(\\\"You gave the same word twice!\\\");\\n  }\\n}\\n\\n  public bool AlreadyEntered(string word) \\n  {\\n    // Tehd\\xE4\\xE4n jotain t\\xE4\\xE4ll\\xE4\\n    return false;\\n  }\\n}\\n\")), mdx(\"p\", null, \"On hyv\\xE4 idea testata ohjelmaa jatkuvasti, joten tehd\\xE4\\xE4n testiversio metodista.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public bool AlreadyEntered(string word) \\n{\\n  if (word == \\\"end\\\") \\n  {\\n    return true;\\n  }\\n  return false;\\n}\\n\")), mdx(\"p\", null, \"Nyt silmukka jatkuu kunnes k\\xE4ytt\\xE4j\\xE4 kirjoittaa sanan \\\"end\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Write a word:\\n> carrot \\nWrite a word:\\n> turnip \\nWrite a word:\\n> potato \\nWrite a word:\\n> celery \\nWrite a word:\\n> end\\nYou wrote the same word twice!\\n\")), mdx(\"p\", null, \"Ohjelma ei viel\\xE4 toimi t\\xE4ysin, mutta ensimm\\xE4inen osaongelma -- silmukan lopettaminen kun tietty ehto on t\\xE4yttynyt -- on ratkaistu.\"), mdx(\"h2\", {\n    \"id\": \"oleeellisen-tiedon-säilyttäminen\"\n  }, \"Oleeellisen tiedon s\\xE4ilytt\\xE4minen\"), mdx(\"p\", null, \"Toinen aliongelma on muistaa mit\\xE4 sanoja on jo kirjoitettu. T\\xE4h\\xE4n tarkoitukseen sopiva tietorakenne on lista.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class UserInterface\\n{\\n  private List<string> words;\\n\\n  public UserInterface() \\n  {\\n    this.words = new List<string>();\\n  }\\n\\n  public void Start()\\n  {\\n    while(true)\\n    {\\n      Console.WriteLine(\\\"Enter a word:\\\");\\n      string word = Console.ReadLine();\\n\\n      if(AlreadyEntered(word)) {\\n        break;\\n      }\\n    }\\n    Console.WriteLine(\\\"You gave the same word twice!\\\");\\n  }\\n  public bool AlreadyEntered(string word) \\n  {\\n    if (word == \\\"end\\\") \\n    {\\n      return true;\\n    }\\n    return false;\\n  }\\n}\\n\")), mdx(\"p\", null, \"Kun uusi sana annetaan, se t\\xE4ytyy lis\\xE4t\\xE4 listaan sanoja jotka on jo kirjoitettu. T\\xE4m\\xE4 tehd\\xE4\\xE4n lis\\xE4\\xE4m\\xE4ll\\xE4 rivi joka p\\xE4ivitt\\xE4\\xE4 listaa silmukan sis\\xE4ll\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while(true)\\n{\\n  Console.WriteLine(\\\"Enter a word:\\\");\\n  string word = Console.ReadLine();\\n\\n  if (AlreadyEntered(word))\\n  {\\n    break;\\n  }\\n  // lis\\xE4t\\xE4\\xE4n sana listaan aiemmin kirjoitettujen sanojen joukkoon\\n  this.words.Add(word);\\n}\\n\")), mdx(\"p\", null, \"Koko k\\xE4ytt\\xF6liittym\\xE4 n\\xE4ytt\\xE4\\xE4 nyt seuraavalta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class UserInterface\\n{\\n  private List<string> words;\\n\\n  public UserInterface() \\n  {\\n    this.words = new List<string>();\\n  }\\n\\n  public void Start()\\n  {\\n    while(true)\\n    {\\n      Console.WriteLine(\\\"Enter a word:\\\");\\n      string word = Console.ReadLine();\\n\\n      if (AlreadyEntered(word))\\n      {\\n        break;\\n      }\\n      // lis\\xE4t\\xE4\\xE4n sana listaan aiemmin kirjoitettujen sanojen joukkoon\\n      this.words.Add(word);\\n    }\\n    Console.WriteLine(\\\"You gave the same word twice!\\\");\\n  }\\n\\n  public bool AlreadyEntered(string word) \\n  {\\n    if (word == \\\"end\\\") \\n    {\\n      return true;\\n    }\\n    return false;\\n  }\\n}\\n\")), mdx(\"p\", null, \"On j\\xE4lleen hyv\\xE4 idea testata ett\\xE4 ohjelma toimii. Esimerkiksi voimme lis\\xE4t\\xE4 testitulostuksen Start-metodin loppuun, jotta varmistamme ett\\xE4 sy\\xF6tetyt sanat ovat todella lis\\xE4tty listaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// testitulostus kokeilemaan ett\\xE4 kaikki toimii\\nwords.ForEach(Console.WriteLine);\\n\")), mdx(\"h2\", {\n    \"id\": \"aliongelmien-ratkaisujen-yhdistäminen\"\n  }, \"Aliongelmien ratkaisujen yhdist\\xE4minen\"), mdx(\"p\", null, \"Muutetaan metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AlreadyEntered\"), \" niin, ett\\xE4 se tarkistaa onko sy\\xF6tetty sana jo aiemmin sy\\xF6tettyjen sanojen listassa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public bool AlreadyEntered(string word) \\n{\\n  return this.words.Contains(word);\\n}\\n\")), mdx(\"p\", null, \"Nyt sovellus toimii kuten pit\\xE4\\xE4kin.\"), mdx(\"h2\", {\n    \"id\": \"oliot-luonnollisena-osana-ongelmanratkaisua\"\n  }, \"Oliot luonnollisena osana ongelmanratkaisua\"), mdx(\"p\", null, \"Loimme juuri ratkaisun ongelmaan, jossa ohjelma lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 sanoja kunnes k\\xE4ytt\\xE4j\\xE4 kirjoittaa sanan joka on jo kirjoitettu aiemmin. Esimerkkisy\\xF6te oli seuraava:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Write a word:\\n> carrot \\nWrite a word:\\n> turnip \\nWrite a word:\\n> potato \\nWrite a word:\\n> celery \\nWrite a word:\\n> potato \\nYou wrote the same word twice!\\n\")), mdx(\"p\", null, \"Saimme aikaan seuraavan ratkaisun:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class UserInterface\\n{\\n  private List<string> words;\\n\\n  public UserInterface() \\n  {\\n    this.words = new List<string>();\\n  }\\n\\n  public void Start()\\n  {\\n    while(true)\\n    {\\n      Console.WriteLine(\\\"Enter a word:\\\");\\n      string word = Console.ReadLine();\\n\\n      if (AlreadyEntered(word))\\n      {\\n        break;\\n      }\\n      // lis\\xE4t\\xE4\\xE4n sana listaan aiemmin kirjoitettujen sanojen joukkoon\\n      this.words.Add(word);\\n    }\\n    Console.WriteLine(\\\"You gave the same word twice!\\\");\\n  }\\n\\n  public bool AlreadyEntered(string word) \\n  {\\n    return this.words.Contains(word);\\n  }\\n}\\n\")), mdx(\"p\", null, \"K\\xE4ytt\\xF6liittym\\xE4n n\\xE4k\\xF6kulmasta, apumuuttuja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"words\"), \" on vain yksi yksityiskohta. T\\xE4rkeint\\xE4 on ett\\xE4 k\\xE4ytt\\xF6liittym\\xE4 muistaa mit\\xE4 sanoja on sy\\xF6tetty aiemmin. Joukko sanoja on selke\\xE4 erillinen \\\"konsepti\\\" tai abstraktio. T\\xE4llaiset selke\\xE4t konseptit ovat kaikki mahdollisia olioita: kun huomaamme ett\\xE4 koodissamme on t\\xE4llainen abstraktio, voimme mietti\\xE4 sen erottamista omaksi luokakseen.\"), mdx(\"h2\", {\n    \"id\": \"sanajoukko\"\n  }, \"Sanajoukko\"), mdx(\"p\", null, \"Luodaan luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WordSet\"), \". Luokan toteutuksen j\\xE4lkeen k\\xE4ytt\\xF6liittym\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Start\"), \"-metodi n\\xE4ytt\\xE4\\xE4 t\\xE4lt\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while(true)\\n{\\n  if (wordSet.Contains(word))\\n  {\\n    break;\\n  }\\n  wordSet.Add(word);\\n}\\nConsole.WriteLine(\\\"You gave the same word twice!\\\");\\n\")), mdx(\"p\", null, \"K\\xE4ytt\\xF6liittym\\xE4n n\\xE4k\\xF6kulmasta, luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WordSet\"), \" tarjoaa metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"bool Contains(string word)\"), \", joka tarkistaa onko annettu sana joukossa, ja metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void Add(word)\"), \", joka lis\\xE4\\xE4 annetun sanan joukkoon.\"), mdx(\"p\", null, \"Huomaamme ett\\xE4 k\\xE4ytt\\xF6liittym\\xE4n koodi on nyt paljon selke\\xE4mp\\xE4\\xE4. \"), mdx(\"p\", null, \"Luokan WordSet luonnos n\\xE4ytt\\xE4\\xE4 t\\xE4lt\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class WordSet \\n{\\n  // oliomuuttuja(t)\\n\\n  public WordSet() \\n  {\\n    // konstruktori\\n  }\\n\\n  public bool Contains(string word) \\n  {\\n    // Contains-metodin toteutus\\n    return false;\\n  }\\n\\n  public void Add(string word) \\n  {\\n    // Add-metodin toteutus\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"aiempi-ratkaisu-osana-toteutusta\"\n  }, \"Aiempi ratkaisu osana toteutusta\"), mdx(\"p\", null, \"Voimme implementoida sanajoukon tekem\\xE4ll\\xE4 aiemman ratkaisun, listan, oliomuuttujaksi:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class WordSet \\n{\\n  private List<string> words;\\n\\n  public WordSet() \\n  {\\n    this.words = new List<string>();\\n  }\\n\\n  public bool Contains(string word) \\n  {\\n    return this.words.Contains(word);\\n  }\\n\\n  public void Add(string word) \\n  {\\n    this.words.Add(word);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Nyt ratkaisumme on melko elegantti. Olemme erottaneet selke\\xE4n konseptin omaksi luokakseen, ja k\\xE4ytt\\xF6liittym\\xE4mme n\\xE4ytt\\xE4\\xE4 siistilt\\xE4. Kaikki \\\"likaiset yksityiskohdat\\\" on encapsuloitu siististi olioon.\"), mdx(\"p\", null, \"Muokataan nyt k\\xE4ytt\\xF6liittym\\xE4\\xE4 niin ett\\xE4 se k\\xE4ytt\\xE4\\xE4 luokkaa WordSet. Luokka annetaan k\\xE4ytt\\xF6liittym\\xE4lle parametrina.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class UserInterface\\n{\\n  private WordSet wordSet;\\n\\n  public UserInterface(WordSet wordSet) \\n  {\\n    this.wordSet = wordSet;\\n  }\\n\\n  public void Start()\\n  {\\n    while(true)\\n    {\\n      Console.WriteLine(\\\"Enter a word:\\\");\\n      string word = Console.ReadLine();\\n\\n      if (this.wordSet.Contains(word))\\n      {\\n        break;\\n      }\\n      // lis\\xE4t\\xE4\\xE4n sana listaan aiemmin kirjoitettujen sanojen joukkoon\\n      this.wordSet.Add(word);\\n    }\\n    Console.WriteLine(\\\"You gave the same word twice!\\\");\\n  }\\n}\\n\")), mdx(\"p\", null, \"Ohjelma k\\xE4ynnistet\\xE4\\xE4n nyt seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args) \\n{  \\n  WordSet set = new WordSet();\\n  UserInterface userinterface = new UserInterface(set);\\n  userinterface.Start();\\n}  \\n\")), mdx(\"h2\", {\n    \"id\": \"luokan-toteutuksen-muuttaminen\"\n  }, \"Luokan toteutuksen muuttaminen\"), mdx(\"p\", null, \"Olemme saavuttaneet nyt ratkaisun miss\\xE4 luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WordSet\"), \" kapsuloi listan. Onko t\\xE4m\\xE4 j\\xE4rkev\\xE4\\xE4? Ehk\\xE4. T\\xE4m\\xE4 johtuu siit\\xE4 ett\\xE4 voimme tehd\\xE4 luokkaan muutoksia jos niin haluamme, ja pian saattaa olla ett\\xE4 sanajoukon t\\xE4ytyy tallentaa sanat tiedostoon. Jos teemme kaikki muutokset luokkaan WordSet muuttamatta k\\xE4ytt\\xF6liittym\\xE4n metodeja, emme joudu muuttamaan k\\xE4ytt\\xF6liittym\\xE4n koodia ollenkaan.\"), mdx(\"p\", null, \"T\\xE4rkein pointti on kuitenkin se, ett\\xE4 muutokset jotka tehd\\xE4\\xE4n luokkaan WordSet eiv\\xE4t vaikuta k\\xE4ytt\\xF6liittym\\xE4\\xE4n. T\\xE4m\\xE4 johtuu siit\\xE4 ett\\xE4 k\\xE4ytt\\xF6liittym\\xE4 k\\xE4ytt\\xE4\\xE4 luokkaa WordSet vain sen tarjoamien metodien kautta -- n\\xE4it\\xE4 kutsutaan luokan julkisiksi rajapinnoiksi.\"), mdx(\"h2\", {\n    \"id\": \"uuden-toiminnallisuuden-toteuttaminen-palindromit\"\n  }, \"Uuden toiminnallisuuden toteuttaminen: palindromit\"), mdx(\"p\", null, \"Tulevaisuudessa voisimme haluta laajentaa ohjelmaa niin ett\\xE4 luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WordSet\"), \" tarjoaa uusia toiminnallisuuksia. Jos esimerkiksi haluaisimme tiet\\xE4\\xE4 kuinka monta sy\\xF6tetyist\\xE4 sanoista oli palindromi, voisimme lis\\xE4t\\xE4 luokkaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WordSet\"), \" metodin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Palindromes\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public void Start()\\n{\\n  while(true)\\n  {\\n    Console.WriteLine(\\\"Enter a word:\\\");\\n    string word = Console.ReadLine();\\n\\n    if (this.wordSet.Contains(word))\\n    {\\n      break;\\n    }\\n    this.wordSet.Add(word);\\n  }\\n  Console.WriteLine(\\\"You gave the same word twice!\\\");\\n  Console.WriteLine(this.wordSet.Palindromes() + \\\" of the words were palindromes.\\\");\\n}\\n\")), mdx(\"p\", null, \"K\\xE4ytt\\xF6liittym\\xE4 pysyy siistin\\xE4, koska palindromien laskeminen tapahtuu luokan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WordSet\"), \" sis\\xE4ll\\xE4. Seuraavassa on esimerkki metodin toteutuksesta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public int Palindromes() \\n{\\n  int count = 0;\\n\\n  foreach (string word in this.words)) \\n  {\\n    if (IsPalindrome(word)) \\n    {\\n      count++;\\n    }\\n  }\\n\\n  return count;\\n}\\n\\npublic bool IsPalindrome(string word) \\n{\\n  int length = word.Length;\\n  int end = word.Length - 1;\\n  for (int i = 0; i < length / 2; i++)\\n  {\\n      if (word[i] != word[end - i])\\n          return false;\\n  }\\n  return true;\\n}\\n\")), mdx(\"p\", null, \"Metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Palindromes\"), \" k\\xE4ytt\\xE4\\xE4 apunaan metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IsPalindrome\"), \". Metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Palindromes\"), \" laskee kuinka monta sanoista on palindromi, ja metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IsPalindrome\"), \" tarkistaa onko sana palindromi vai ei.\"), mdx(\"p\", null, \"Kun konseptit on erotettu toisistaan eri luokkiin koodissa, niiden kierr\\xE4tys ja uudelleenk\\xE4ytt\\xF6 muissa projekteissa k\\xE4y helposti. Esimerkiksi luokkaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WordSet\"), \" voisi k\\xE4ytt\\xE4\\xE4 hyvin graafisessa k\\xE4ytt\\xF6liittym\\xE4ss\\xE4, tai se voisi olla osa mobiilisovellusta. Lis\\xE4ksi ohjelman testaaminen on helpompaa kun se on jaettu useisiin konsepteihin, joista jokainen toimii itsen\\xE4isen\\xE4 kokonaisuutena.\"), mdx(\"h2\", {\n    \"id\": \"ohjelmoinrivinkkejä\"\n  }, \"Ohjelmoinrivinkkej\\xE4\"), mdx(\"p\", null, \"Yll\\xE4 olevassa isossa esimerkiss\\xE4 noudatimme seuraavia ohjelmoinnin periaatteita.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Etene pienin askelin\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Yrit\\xE4 jakaa ohjelma pienempiin aliongelmiin ja ratkaista ne yksi kerrallaan\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Testaa aina ett\\xE4 ohjelma toimii ennen kuin jatkat eteenp\\xE4in, toisin sanottuna: testaa ett\\xE4 aliongelman ratkaisu on oikea\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tunnista tilanteet joissa ohjelman tulee toimia eri tavalla. Yll\\xE4 olevassa esimerkiss\\xE4, tarvitsimme toiminnallisuuden tarkistamaan onko sana jo kirjoitettu aiemmin.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Kirjoita niin \\\"puhdasta\\\" koodia kuin mahdollista\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sisenn\\xE4 koodisi\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"K\\xE4yt\\xE4 kuvaavia metodi- ja muuttujanimi\\xE4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\xC4l\\xE4 tee metodeistasi liian pitki\\xE4, ei edes Main-metodista\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tee vain yht\\xE4 asiaa yhdess\\xE4 metodissa\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Poista kaikki copy-paste -koodi\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Korvaa \\\"huono\\\" ja ep\\xE4siisti puhtaalla koodilla\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jos on tarve, ota askel taaksep\\xE4in ja tarkastele ohjelmaa kokonaisuutena. Jos se e toimi, voi olla hyv\\xE4 idea palata edelliseen tilanteeseen jossa ohjelma toimi. Voisimmekin sanoa, ett\\xE4 rikkin\\xE4ist\\xE4 ohjelmaa ei korjata lis\\xE4\\xE4m\\xE4ll\\xE4 siihen lis\\xE4\\xE4 koodia.\")), mdx(\"p\", null, \"Ohjelmoijat seuraavat n\\xE4it\\xE4 periaatteita jotta ohjelmoinnista voisi tehd\\xE4 helpompaa. Niit\\xE4 seuraamalla koodista tulee my\\xF6s helpompaa lukea, yll\\xE4pit\\xE4\\xE4 ja muokata tiimeiss\\xE4.\"), mdx(\"h2\", {\n    \"id\": \"yhdestä-entiteetistä-useaan-osaan\"\n  }, \"Yhdest\\xE4 entiteetist\\xE4 useaan osaan\"), mdx(\"p\", null, \"Tarkastellaan ohjelmaa joka pyyt\\xE4\\xE4 k\\xE4ytt\\xE4j\\xE4\\xE4 antamaan tenttipisteit\\xE4 ja muuttaa ne arvosanoiksi. Lopuksi ohjelma tulostaa arvosanojen jakauman t\\xE4htin\\xE4. Ohjelma lopettaa sy\\xF6tteiden lukemisen kun k\\xE4ytt\\xE4j\\xE4 antaa tyhj\\xE4n sy\\xF6tteen. Esimerkki ohjelma n\\xE4ytt\\xE4\\xE4 seuraavalta:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Points:\\n> 91 \\nPoints:\\n> 98 \\nPoints:\\n> 103 \\nImpossible number. \\nPoints:\\n> 90 \\nPoints:\\n> 89 \\nPoints:\\n> 89 \\nPoints:\\n> 88 \\nPoints:\\n> 72 \\nPoints:\\n> 54 \\nPoints:\\n> 55 \\nPoints: \\n51 \\nPoints:\\n> 49 \\nPoints:\\n> 48 \\nPoints:\\n>\\n\\n5: *** \\n4: *** \\n3: * \\n2: \\n1: *** \\n0: **\\n\")), mdx(\"p\", null, \"Kuten melkein kaikki ohjelmat, t\\xE4m\\xE4 ohjelma voidaan kirjoittaa yhten\\xE4 kokonaisuutena Main-metodiin. T\\xE4ss\\xE4 on yksi mahdollisuus.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program \\n{\\n  public static void Main(string[] args) \\n  {\\n    List<int> grades = new List<int>();\\n\\n    while (true) {\\n      Console.WriteLine(\\\"Points:\\\");\\n      string input = Console.ReadLine();\\n      if (input =0 \\\"\\\") \\n      {\\n          break;\\n      }\\n      int score = Conver.ToInt32(input);\\n\\n      if (score < 0 || score > 100) \\n      {\\n        Console.WriteLine(\\\"Impossible number.\\\");\\n        continue;\\n      }\\n\\n      int grade = 0;\\n      if (score < 50) \\n      {\\n        grade = 0;\\n      } \\n      else if (score < 60) \\n      {\\n        grade = 1;\\n      } \\n      else if (score < 70) \\n      {\\n        grade = 2;\\n      } \\n      else if (score < 80) \\n      {\\n        grade = 3;\\n      } \\n      else if (score < 90) \\n      {\\n        grade = 4;\\n      } \\n      else \\n      {\\n        grade = 5;\\n      }\\n\\n      grades.Add(grade);\\n    }\\n\\n    Console.WriteLine(\\\"\\\");\\n    int grade = 5;\\n    while (grade >= 0) \\n    {\\n      int stars = 0;\\n      foreach(int received in grades) \\n      {\\n        if (received == grade) \\n        {\\n          stars++;\\n        }\\n      }\\n\\n      Console.Write(grade + \\\": \\\");\\n      while (stars > 0) \\n      {\\n        Console.Write(\\\"*\\\");\\n        stars--;\\n      }\\n      Console.WriteLine(\\\"\\\");\\n      grade = grade - 1;\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Erotellaan ohjelman eri osat pienemmiksi paloiksi. T\\xE4m\\xE4 voidaan tehd\\xE4 tunnistamalla ohjelmasta eri vastuualueet. Arvosanojen seuranta, mukaanluettuna pisteiden muuttaminen arvosanoiksi, voidaan tehd\\xE4 omassa luokassaan. Lis\\xE4ksi voimme luoda uuden luokan k\\xE4ytt\\xF6liittym\\xE4lle.\"), mdx(\"h2\", {\n    \"id\": \"ohjelmalogiikka\"\n  }, \"Ohjelmalogiikka\"), mdx(\"p\", null, \"Ohjelmalogiikka sis\\xE4lt\\xE4\\xE4 ohjelman toiminnan kannalta kriittiset osat, kuten toiminnot jotka s\\xE4ilytt\\xE4v\\xE4t tietoa. Edellisest\\xE4 esimerkist\\xE4 pystymme erottamaan osat jotka tallentavat arvosanatiedot. N\\xE4ist\\xE4 voimme tehd\\xE4 luolan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"GradeRegister\"), \", joka on vastuussa eri arvosanojen m\\xE4\\xE4r\\xE4n laskemisesta. Rekisteriin voidaan lis\\xE4t\\xE4 arvosanoja pisteiden perusteella. Lis\\xE4ksi rekisterist\\xE4 voidaan kysy\\xE4 kuinka monta tietty\\xE4 arvosanaa on annettu.\"), mdx(\"p\", null, \"Esimerkki luokasta alla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class GradeRegister \\n{\\n  private List<int> grades;\\n  \\n  public GradeRegister() \\n  {\\n    this.grades = new List<int>();\\n  }\\n\\n  public void AddGradeBasedOnPoints(int points) \\n  {\\n    this.grades.Add(PointsToGrades(points));\\n  }\\n\\n  public int NumberOfGrades(int grade) \\n  {\\n    int count = 0;\\n    foreach(int received in this.grades) \\n    {\\n      if (received == grade) \\n      {\\n          count++;\\n      }\\n    }\\n    return count;\\n  }\\n  \\n  public static int PointsToGrades(int points) \\n  {\\n    int grade = 0;\\n    if (points < 50) \\n    {\\n      grade = 0;\\n    } \\n    else if (points < 60) \\n    {\\n      grade = 1;\\n    } \\n    else if (points < 70) \\n    {\\n      grade = 2;\\n    } \\n    else if (points < 80) \\n    {\\n      grade = 3;\\n    } \\n    else if (points < 90) \\n    {\\n      grade = 4;\\n    } \\n    else \\n    {\\n      grade = 5;\\n    }\\n    return grade;\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Kun luokka on erotettu omaksi luokakseen, voimme k\\xE4ytt\\xE4\\xE4 sit\\xE4 k\\xE4ytt\\xF6liittym\\xE4ss\\xE4. Main n\\xE4ytt\\xE4\\xE4 nyt t\\xE4lt\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program \\n{\\n  public static void Main(string[] args) \\n  {\\n    GradeRegister register = new GradeRegister();\\n\\n    while (true) {\\n      Console.WriteLine(\\\"Points:\\\");\\n      string input = Console.ReadLine();\\n      if (input == \\\"\\\") \\n      {\\n          break;\\n      }\\n      int score = Conver.ToInt32(input);\\n\\n      if (score < 0 || score > 100) \\n      {\\n        Console.WriteLine(\\\"Impossible number.\\\");\\n        continue;\\n      }\\n      register.AddGradeBasedOnPoints(score);\\n    }\\n\\n    Console.WriteLine(\\\"\\\");\\n    int grade = 5;\\n    while (grade >= 0) \\n    {\\n      int stars = register.NumberOfGrades(grade);\\n      Console.Write(grade + \\\": \\\");\\n      while (stars > 0) \\n      {\\n        Console.Write(\\\"*\\\");\\n        stars--;\\n      }\\n      Console.WriteLine(\\\"\\\");\\n\\n      grade = grade - 1;\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Ohjelmalogiikan erottaminen omakseen on eritt\\xE4in hy\\xF6dyllist\\xE4 ohjelman yll\\xE4pidon kannalta. Kun ohjelmalogiikka -- t\\xE4ss\\xE4 tapauksessa GradeRegister -- on omana luokkanaan, sit\\xE4 voidaan my\\xF6s testta muista osista erikseen. Jos haluat, voit kopioida luokan GradeRegister ja k\\xE4ytt\\xE4\\xE4 sit\\xE4 muissa ohjelmissa. Alla on esimerkki yksinkertaisesta manuaalisesta testist\\xE4 -- t\\xE4ss\\xE4 testiss\\xE4 keskityt\\xE4\\xE4n vain osaan rekisterin toiminnallisuudesta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"GradeRegister register = new GradeRegister();\\nregister.AddGradeBasedOnPoints(51);\\nregister.AddGradeBasedOnPoints(50);\\nregister.AddGradeBasedOnPoints(49);\\n\\nConsole.WriteLine(\\\"Number of students with grade 0 (should be 1): \\\" + register.NumberOfGrades(0));\\nConsole.WriteLine(\\\"Number of students with grade 1 (should be 2): \\\" + register.NumberOfGrades(1));\\n\")), mdx(\"h2\", {\n    \"id\": \"käyttöliittymä\"\n  }, \"K\\xE4ytt\\xF6liittym\\xE4\"), mdx(\"p\", null, \"Tyypillisesti jokaisella ohjelmalla on oma k\\xE4ytt\\xF6liittym\\xE4ns\\xE4. Luomme luokan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"UserInterface\"), \" ja erotamme sen Main-metodista. K\\xE4ytt\\xF6liittym\\xE4 saa parametrina GradeRegister-olion, jotta se voi k\\xE4ytt\\xE4\\xE4 sit\\xE4.\"), mdx(\"p\", null, \"Nyt kun meill\\xE4 on erillinen k\\xE4ytt\\xF6liittym\\xE4, p\\xE4\\xE4ohjelma j\\xE4\\xE4 hyvin yksinkertaiseksi.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program \\n{\\n  public static void Main(String[] args) \\n  {\\n    GradeRegister register = new GradeRegister();\\n\\n    UserInterface userInterface = new UserInterface(register);\\n    userInterface.Start();\\n  }\\n}\\n\")), mdx(\"p\", null, \"Katsotaan tarkemmin toteuttamaamme k\\xE4ytt\\xF6liittym\\xE4\\xE4. K\\xE4ytt\\xF6liittym\\xE4ss\\xE4 on kaksi keskeist\\xE4 osaa: pisteiden lukeminen ja arvosanojen tulostaminen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class UserInterface \\n{\\n  private GradeRegister register;\\n\\n  public UserInterface(GradeRegister register) \\n  {\\n    this.register = register;\\n  }\\n\\n  public void Start() \\n  {\\n    ReadPoints();\\n    Console.WriteLine(\\\"\\\");\\n    PrintGradeDistribution();\\n  }\\n\\n  public void ReadPoints() \\n  {\\n  }\\n\\n  public void PrintGradeDistribution() \\n  {\\n  }\\n}\\n\")), mdx(\"p\", null, \"Voimme kopioida koodin pisteiden lukemiseen ja arvosanojen tulostamiseen melko suoraan edellisest\\xE4 main-metodista. Alla olevassa ohjelmassa on kopioitu koodia vanhasta Main-metodista, ja on luotu uusi metodi t\\xE4htien tulostamiseen -- t\\xE4m\\xE4 selkeytt\\xE4\\xE4 arvosanajakauman tulostamiseen k\\xE4ytetyn metodin koodia.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class UserInterface \\n{\\n  private GradeRegister register;\\n\\n  public UserInterface(GradeRegister register) \\n  {\\n    this.register = register;\\n  }\\n\\n  public void Start() \\n  {\\n    ReadPoints();\\n    Console.WriteLine(\\\"\\\");\\n    PrintGradeDistribution();\\n  }\\n\\n  public void ReadPoints() \\n  {\\n    while (true) \\n    {\\n      Console.WriteLine(\\\"Points:\\\");\\n      string input = Console.ReadLine();\\n      if (input =0 \\\"\\\") \\n      {\\n        break;\\n      }\\n      int score = Conver.ToInt32(input);\\n\\n      if (score < 0 || score > 100) \\n      {\\n        Console.WriteLine(\\\"Impossible number.\\\");\\n        continue;\\n      }\\n      register.AddGradeBasedOnPoints(score);\\n    }\\n  }\\n\\n  public void PrintGradeDistribution() \\n  {\\n    int grade = 5;\\n    while (grade >= 0) \\n    {\\n      int stars = register.NumberOfGrades(grade);\\n      Console.Write(grade + \\\": \\\");\\n      PrintStars(stars);\\n      Console.WriteLine();\\n\\n      grade = grade - 1;\\n    }\\n\\n  public static void PrintStars(int stars) \\n  {\\n    while (stars > 0) \\n    {\\n      Console.Write(\\\"*\\\");\\n      stars--;\\n    }\\n  }\\n  }\\n}\\n\")), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Exercise, {\n    title: '001 Grade register',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on materiaalista tuttu luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GradeRegister\"), \". T\\xE4ss\\xE4 teht\\xE4v\\xE4ss\\xE4 kehit\\xE4mme ohjelmaa eteenp\\xE4in, jonka avulla voidaan laskea arvosanojen keskiarvoja ja tenttituloksia.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1 - Arvosanojen keskiarvo\")), mdx(\"p\", null, \"Luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public double AverageOfGrades()\"), \" luokkaan \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GradeRegister\"), \". Sen tulee palauttaa arvosanojen keskiarvo py\\xF6ristettyn\\xE4 kahden desimaalin tarkkuuteen. Jos rekisteriss\\xE4 ei ole arvosanoja, metodin tulee palauttaa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-1\"), \". K\\xE4yt\\xE4 keskiarvon laskemiseen listaa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grades\"), \". Esimerkki:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"GradeRegister register = new GradeRegister();\\nregister.AddGradeBasedOnPoints(93);\\nregister.AddGradeBasedOnPoints(91);\\nregister.AddGradeBasedOnPoints(92);\\nregister.AddGradeBasedOnPoints(88);\\n\\nConsole.WriteLine(register.AverageOfGrades());\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"4.75\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2 - Pisteiden keskiarvo\")), mdx(\"p\", null, \"Anna luokalle \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GradeRegister\"), \" uusi oliomuuttuja: lista johon tallennetaan tenttipisteet aina kun metodia \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddGradeBasedOnPoints\"), \" kutsutaan. T\\xE4m\\xE4n lis\\xE4yksen j\\xE4lkeen luo metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public double AverageOfPoints()\"), \" joka laskee ja palauttaa tenttipisteiden keskiarvon py\\xF6ristettyn\\xE4 kahden desimaalin tarkkuuteen. Jos rekisteriss\\xE4 ei ole pisteit\\xE4, metodin tulee palauttaa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-1\"), \". Esimerkki:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"GradeRegister register = new GradeRegister();\\nregister.AddGradeBasedOnPoints(93);\\nregister.AddGradeBasedOnPoints(91);\\nregister.AddGradeBasedOnPoints(92);\\n\\nConsole.WriteLine(register.AverageOfPoints());\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"92\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 3 - Tulostaminen k\\xE4ytt\\xF6liittym\\xE4ss\\xE4\")), mdx(\"p\", null, \"Viimeisen\\xE4 osana, lis\\xE4\\xE4 yll\\xE4 toteutetut metodit k\\xE4ytt\\xF6liittym\\xE4\\xE4n. Kun ohjelma tulostaa arvosanojen jakauman, se tulostaa my\\xF6s pisteiden ja arvosanojen keskiarvot. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Points:\\n> 82 \\nPoints:\\n> 83\\nPoints:\\n> 96 \\nPoints: \\n> 51 \\nPoints:\\n> 48 \\nPoints:\\n> 56 \\nPoints:\\n> 61 \\nPoints:\\n>\\n\\n5: * \\n4: ** \\n3: \\n2: * \\n1: ** \\n0: * \\nThe average of points: 68.14\\nThe average of grades: 2.43\\n\"))), mdx(Exercise, {\n    title: '002 Joke manager',\n    mdxType: \"Exercise\"\n  }, mdx(Note, {\n    mdxType: \"Note\"\n  }, \"T\\xE4ss\\xE4 teht\\xE4v\\xE4ss\\xE4 EI OLE TESTEJ\\xC4. Sinun tulee itse p\\xE4\\xE4tt\\xE4\\xE4, milloin teht\\xE4v\\xE4 on valmis. TARKASTAN TEHT\\xC4V\\xC4N, JOTEN \\xC4L\\xC4 HUIJAA.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"T\\xE4st\\xE4 saa tuplapisteet, eli 4 yhteens\\xE4 (2 per osio).\"), mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on seuraava ohjelma joka on kirjoitettu kokonaan Main-luokkaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\nusing System.Collections.Generic;\\n\\nnamespace Exercise002\\n{\\n  class Program\\n  {\\n    public static void Main(string[] args)\\n    {\\n      List<string> jokes = new List<string>();\\n      Console.WriteLine(\\\"What a joke!\\\");\\n\\n      while (true)\\n      {\\n        Console.WriteLine(\\\"Commands:\\\");\\n        Console.WriteLine(\\\" 1 - add a joke\\\");\\n        Console.WriteLine(\\\" 2 - draw a joke\\\");\\n        Console.WriteLine(\\\" 3 - list jokes\\\");\\n        Console.WriteLine(\\\" X - stop\\\");\\n\\n        string command = Console.ReadLine();\\n\\n        if (command == \\\"X\\\")\\n        {\\n          break;\\n        }\\n\\n        if (command == \\\"1\\\")\\n        {\\n          Console.WriteLine(\\\"Write the joke to be added:\\\");\\n          string joke = Console.ReadLine();\\n          jokes.Add(joke);\\n        }\\n        else if (command == \\\"2\\\")\\n        {\\n          Console.WriteLine(\\\"Drawing a joke.\\\");\\n\\n          if (jokes.Count == 0)\\n          {\\n            Console.WriteLine(\\\"Jokes are in short supply.\\\");\\n          }\\n          else\\n          {\\n            Random draw = new Random();\\n            int index = draw.Next(0, jokes.Count);\\n            Console.WriteLine(jokes[index]);\\n          }\\n\\n        }\\n        else if (command == \\\"3\\\")\\n        {\\n          Console.WriteLine(\\\"Printing the jokes.\\\");\\n          foreach (string joke in jokes)\\n          {\\n            Console.WriteLine(joke);\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Ohjelma on k\\xE4yt\\xE4nn\\xF6ss\\xE4 vitsivarasto. Voit lis\\xE4t\\xE4 vitsej\\xE4, hakea satunnaisen vitsin, ja tallennetut vitsit voi tulostaa. T\\xE4ss\\xE4 teht\\xE4v\\xE4ss\\xE4 ohjelma jaetaan osiin ohjelmoinnin periaatteiden mukaisesti.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1 - Joke manager (vitsivarasto)\")), mdx(\"p\", null, \"Luo luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JokeManager\"), \" ja siirr\\xE4 vitsien hallintaan liittyv\\xE4 toiminnallisuus siihen. Luokan tulee sis\\xE4lt\\xE4\\xE4 parametriton konstruktori, sek\\xE4 seuraavat metodit:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public void AddJoke(string joke)\"), \" - lis\\xE4\\xE4 vitsi vitsivarastoon.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public string DrawJoke()\"), \" - valitse yksi satunnainen vitsi ja palauta se. Jos vitsej\\xE4 ei ole, palauta merkkijono \\\"Jokes are in short supply.\\\".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public void PrintJokes()\"), \" - tulostaa kaikki vitsit jotka on talletettu vitsivarastoon.\")), mdx(\"p\", null, \"Esimerkki luokan k\\xE4yt\\xF6st\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"JokeManager manager = new JokeManager();\\nmanager.AddJoke(\\\"What is red and smells of blue paint? - Red paint.\\\");\\nmanager.AddJoke(\\\"What is blue and smells of red paint? - Blue paint.\\\");\\n\\nConsole.WriteLine(\\\"Drawing jokes:\\\");\\nfor (int i = 0; i < 5; i++)\\n{\\n  Console.WriteLine(manager.DrawJoke());\\n}\\n\\nConsole.WriteLine(\\\"\\\");\\nConsole.WriteLine(\\\"Printing jokes:\\\");\\nmanager.PrintJokes();\\n\")), mdx(\"p\", null, \"Alla on mahdollinen tuloste ohjelmasta. Huomaa ett\\xE4 vitsej\\xE4 ei v\\xE4ltt\\xE4m\\xE4tt\\xE4 tulosteta samassa j\\xE4rjestyksess\\xE4 kuin ne on lis\\xE4tty.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Drawing jokes: \\nWhat is blue and smells of red paint? - Blue paint. \\nWhat is red and smells of blue paint? - Red paint. \\nWhat is blue and smells of red paint? - Blue paint. \\nWhat is blue and smells of red paint? - Blue paint. \\nWhat is blue and smells of red paint? - Blue paint.\\n\\nPrinting jokes: \\nWhat is red and smells of blue paint? - Red paint. \\nWhat is blue and smells of red paint? - Blue paint.\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2 - User Interface (k\\xE4ytt\\xF6liittym\\xE4)\")), mdx(\"p\", null, \"Luo luokka \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserInterface\"), \" ja siirr\\xE4 k\\xE4ytt\\xF6liittym\\xE4n toiminnallisuus siihen. Luokan tulee sis\\xE4lt\\xE4\\xE4 konstruktori jossa on yksi parametri: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JokeManager\"), \"-luokan olio. Lis\\xE4ksi luokalla tulee olla metodi \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public void Start()\"), \" jota voidaan k\\xE4ytt\\xE4\\xE4 k\\xE4ytt\\xF6liittym\\xE4n k\\xE4ynnist\\xE4miseen.\"), mdx(\"p\", null, \"K\\xE4ytt\\xF6liittym\\xE4n tulee tarjota seuraavat komennot k\\xE4ytt\\xE4j\\xE4lle:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"X - Lopetus: Poistuu metodista Start.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1 - Lis\\xE4\\xE4minen: Kysyy k\\xE4ytt\\xE4j\\xE4lt\\xE4 vitsin ja lis\\xE4\\xE4 sen vitsivarastoon. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2 - Arpominen: Valitsee satunnaisen vitsin vitsivarastosta ja tulostaa sen. Jos vitsej\\xE4 ei ole, tulostetaan merkkijono \\\"Jokes are in short supply.\\\".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3 - Tulostaminen: Tulostaa kaikki vitsit jotka on talletettu vitsivarastoon.\")), mdx(\"p\", null, \"Esimerkki k\\xE4ytt\\xF6liittym\\xE4n k\\xE4yt\\xF6st\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"JokeManager manager = new JokeManager();\\nUserInterface ui = new UserInterface(manager);\\nui.Start();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Commands: \\n 1 - add a joke \\n 2 - draw a joke \\n 3 - list jokes\\n  X - stop \\n> 1 \\nWrite the joke to be added:\\n> Did you hear about the claustrophobic astronaut? -- He just needed a little space. \\nCommands:\\n 1 - add a joke\\n 2 - draw a joke\\n 3 - list jokes \\n X - stop \\n> 3 \\nPrinting the jokes. \\nDid you hear about the claustrophobic astronaut? -- He just needed a little space. \\nCommands:\\n 1 - add a joke\\n 2 - draw a joke\\n 3 - list jokes \\n X - stop \\n> X\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#käyttöliittymän-erottaminen-ohjelman-logiikasta","title":"Käyttöliittymän erottaminen ohjelman logiikasta","items":[{"url":"#silmukka-ja-lopetus","title":"Silmukka ja lopetus"},{"url":"#oleeellisen-tiedon-säilyttäminen","title":"Oleeellisen tiedon säilyttäminen"},{"url":"#aliongelmien-ratkaisujen-yhdistäminen","title":"Aliongelmien ratkaisujen yhdistäminen"},{"url":"#oliot-luonnollisena-osana-ongelmanratkaisua","title":"Oliot luonnollisena osana ongelmanratkaisua"},{"url":"#sanajoukko","title":"Sanajoukko"},{"url":"#aiempi-ratkaisu-osana-toteutusta","title":"Aiempi ratkaisu osana toteutusta"},{"url":"#luokan-toteutuksen-muuttaminen","title":"Luokan toteutuksen muuttaminen"},{"url":"#uuden-toiminnallisuuden-toteuttaminen-palindromit","title":"Uuden toiminnallisuuden toteuttaminen: palindromit"},{"url":"#ohjelmoinrivinkkejä","title":"Ohjelmoinrivinkkejä"},{"url":"#yhdestä-entiteetistä-useaan-osaan","title":"Yhdestä entiteetistä useaan osaan"},{"url":"#ohjelmalogiikka","title":"Ohjelmalogiikka"},{"url":"#käyttöliittymä","title":"Käyttöliittymä"}]},{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Käyttöliittymät"}}},"pageContext":{"id":"5517105f-4c7d-5f70-b4dd-a846766c0595"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}